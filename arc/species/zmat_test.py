#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
This module contains unit tests of the arc.species.species module
"""

import unittest

import arc.species.zmat as zmat
from arc.exceptions import ZMatError
from arc.species.species import ARCSpecies


class TestZMat(unittest.TestCase):
    """
    Contains unit tests for the ARCSpecies class
    """
    @classmethod
    def setUpClass(cls):
        """
        A method that is run before all unit tests in this class.
        """
        cls.maxDiff = None
        cls.o = {'symbols': ('O',), 'isotopes': (16,),
                 'coords': ((0, 5, 0),)}
        cls.h2 = {'symbols': ('H', 'H'), 'isotopes': (1, 1),
                  'coords': ((0.1843687220308723, -3.589142397102111, 0.5509015063542707),
                             (-0.5045869289213082, -3.6636354012346986, 0.6123827842667411))}
        cls.ch2 = {'symbols': ('C', 'H', 'H'),
                   'isotopes': (12, 1, 1),
                   'coords': ((0.0000000, 0.0000000, 0.1047730),
                              (0.0000000, 0.9878040, -0.3143180),
                              (0.0000000, -0.9878040, -0.3143180))}
        cls.ch4 = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                   'isotopes': (12, 1, 1, 1, 1),
                   'coords': ((0.0, 0.0, 0.0),
                              (0.6300326, 0.6300326, 0.6300326),
                              (-0.6300326, -0.6300326, 0.6300326),
                              (-0.6300326, 0.6300326, -0.6300326),
                              (0.6300326, -0.6300326, -0.6300326))}
        cls.n2h2 = {'symbols': ('N', 'N', 'H', 'H'),
                    'isotopes': (14, 14, 1, 1),
                    'coords': ((-0.5092886779079191, 0.35793982922935974, -0.009272171569141162),
                               (0.509288673134674, -0.3579398256646019, 0.009272133629072029),
                               (-1.3789597692428337, -0.1947244046215175, 0.019430178519009387),
                               (1.3789597740160853, 0.19472440105675842, -0.0194301405789408))}
        cls.h2o2 = {'symbols': ('O', 'O', 'H', 'H'),
                    'isotopes': (16, 16, 1, 1),
                    'coords': ((0.0222080523282218, 0.7207126623564566, 0.09617312028356606),
                               (0.0222080523282218, -0.7231905592851924, -0.07530885370918139),
                               (-0.7271238650806491, 0.7625165817031243, 0.7202512883655388),
                               (0.0222080523282218, -0.7231905592851924, -1.0513823396706372))}
        cls.h2nn = {'symbols': ('N', 'N', 'H', 'H'),
                    'isotopes': (14, 14, 1, 1),
                    'coords': ((1.3546347608168492, -0.015322539977107492, -0.015327345703300993),
                               (-0.0986192196858452, 0.0011155018627852027, 0.0011158328655407426),
                               (-0.6378749227822363, -0.8648316328267205, 0.0067050159766062715),
                               (-0.6181406183487707, 0.8790386709410358, 0.007506496861156013))}
        cls.ch3nh2 = {'symbols': ('C', 'N', 'H', 'H', 'H', 'H', 'H'),
                      'isotopes': (12, 14, 1, 1, 1, 1, 1),
                      'coords': ((-0.5742286697040887, -0.016697712230008085, 0.012292129335517637),
                                 (0.8208404422996248, 0.0827910406364399, -0.37769346207107873),
                                 (-1.0573700464459694, -0.8406777190695487, -0.5200749387254854),
                                 (-1.1021146811862017, 0.9087986699874372, -0.233830111412309),
                                 (-0.6613312758198031, -0.19490561834917827, 1.0878511105273783),
                                 (0.8805462585895368, 0.2662583233797538, -1.3784337589325522),
                                 (1.2797264656423253, -0.8145252774119457, -0.22619079977298262))}
        cls.co2 = {'symbols': ('O', 'C', 'O'), 'isotopes': (16, 12, 16),
                   'coords': ((-1.4050000037154526, 0.0, 0.0), (7.654677848880926e-10, 0.0, 0.0),
                              (1.4050000029499874, 0.0, 0.0))}
        cls.co3 = {'symbols': ('O', 'O', 'O'), 'isotopes': (16, 16, 16),
                   'coords': ((-0.5176037264169743, -0.6377114913523825, 0.2783350035180426),
                              (-0.18596828032694376, 0.5657990029009184, -0.44683087846019576),
                              (0.7035720067439201, 0.07191248845146347, 0.577414866076579))}
        cls.c4h2 = {'symbols': ('C', 'C', 'C', 'C', 'H', 'H'),
                    'isotopes': (12, 12, 12, 12, 1, 1),
                    'coords': ((1.9347068234896196, 0.14242236392968965, -0.7789155813431534),
                               (0.7562146287478744, 0.0556682378383746, -0.5699560840680622),
                               (-0.7562146066837767, -0.05566842139925123, -0.30178597715544486),
                               (-1.934706835483623, -0.14242232018660442, -0.09282659654307752),
                               (2.980433323377626, 0.21940305800927, -0.964334055207275),
                               (-2.9804333334477184, -0.2194029181914813, 0.09259194953859241))}
        cls.benzene = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H'),
                       'isotopes': (12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1),
                       'coords': ((-1.2216577, 0.66078741, -0.12826463), (-1.19107395, -0.72551307, 0.0226491),
                                  (0.03058375, -1.38630048, 0.15091368), (1.22165769, -0.66078741, 0.12826459),
                                  (1.19107394, 0.72551306, -0.02264913), (-0.03058375, 1.38630047, -0.15091376),
                                  (-2.17346972, 1.17561691, -0.22819747), (-2.1190577, -1.2907713, 0.04029543),
                                  (0.05441202, -2.46638819, 0.26849287), (2.17346971, -1.17561688, 0.22819756),
                                  (2.1190577, 1.29077128, -0.04029534), (-0.054412, 2.46638819, -0.26849291))}
        cls.c6h8 = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                    'isotopes': (12, 12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1),
                    'coords': ((3.484414, -0.21032486, -0.274436), (2.16607832, -0.08689715, -0.46809924),
                               (1.27407619, 0.47709453, 0.51277922), (-0.00343262, 0.57953734, 0.29099902),
                               (-1.28096118, 0.6854582, 0.07097112), (-2.1633229, -0.44663594, 0.19618165),
                               (-3.48135896, -0.37616688, -0.02419077), (3.96738638, 0.1104313, 0.64307756),
                               (4.11508134, -0.64262981, -1.04510384), (1.73146925, -0.42487761, -1.40727399),
                               (1.67852166, 0.82026228, 1.45972638), (-1.69282248, 1.64730262, -0.2176039),
                               (-1.72138262, -1.39887451, 0.48444475), (-4.10455181, -1.25858029, 0.08321349),
                               (-3.97140753, 0.54797717, -0.31365155))}
        cls.sonch = {'symbols': ('S', 'O', 'N', 'C', 'H', 'H', 'H'),
                     'isotopes': (32, 16, 14, 12, 1, 1, 1),
                     'coords': ((1.02558264, -0.04344404, -0.07343859),
                                (-0.25448248, 1.10710477, 0.18359696),
                                (-1.30762173, 0.15796567, -0.1048929),
                                (-0.49011438, -1.0370438, 0.15365747),
                                (-0.6486995, -1.85796321, -0.54773423),
                                (-0.60359153, -1.37304859, 1.18613964),
                                (-1.43009127, 0.23517346, -1.11797908))}
        cls.n3h5 = {'symbols': ('N', 'H', 'H', 'N', 'H', 'N', 'H', 'H'),
                    'isotopes': (14, 1, 1, 14, 1, 14, 1, 1),
                    'coords': ((-1.1997440839, -0.1610052059, 0.0274738287),
                               (-1.4016624407, -0.6229695533, -0.848703408),
                               (-1.8759e-06, 1.2861082773, 0.592607787),
                               (8.52e-07, 0.5651072858, -0.1124621525),
                               (-1.1294692206, -0.8709078271, 0.7537518889),
                               (1.1997613019, -0.1609980472, 0.0274604887),
                               (1.1294795781, -0.870899855, 0.7537444446),
                               (1.4015274689, -0.6230592706, -0.8487058662))}
        cls.chiral_chlorine = {'symbols': ('C', 'C', 'Cl', 'C', 'C', 'C', 'C', 'O', 'H', 'H',
                                           'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                               'isotopes': (12, 12, 35, 12, 12, 12, 12, 16, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                               'coords': ((-2.578509712530318, 0.38121240547111007, -0.31545198147258363),
                                          (-1.5941349895084616, -0.635494075258274, 0.2526267766110877),
                                          (-2.446130204434876, -2.199793383445274, 0.4739879765478844),
                                          (-0.3649125812333054, -0.856711907825194, -0.6396701659159703),
                                          (0.4922297868446982, 0.37185241828403975, -0.7809642373311291),
                                          (1.6231568004320585, 0.6568089242362904, -0.12145237874417657),
                                          (2.267486108970528, -0.1753954473511403, 0.9466738166587931),
                                          (2.265480730568699, 1.8439777575730865, -0.4285684239770236),
                                          (-3.4594352741921353, 0.47581928028773773, 0.32913922777496435),
                                          (-2.123704792289639, 1.3742045671010559, -0.3889170186287234),
                                          (-2.920625447943592, 0.09209027422932005, -1.3152490550970735),
                                          (-1.2790241139583118, -0.31597683146205213, 1.2521170706149654),
                                          (-0.6802362877491801, -1.1661589508802492, -1.6449366809148853),
                                          (0.231721951825261, -1.6911255777813388, -0.2530777406072024),
                                          (0.15205839141215702, 1.0933904704061583, -1.5237538914581972),
                                          (2.4559163544367437, 0.43653975141236306, 1.8352257595756216),
                                          (1.6504484708523275, -1.0197745053207323, 1.2634073789063887),
                                          (3.225226315786351, -0.5670700918169522, 0.58983306593164),
                                          (3.082988492711173, 1.9016049221399955, 0.0959260108384249))}

        cls.phenanthrene = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
                                        'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                            'isotopes': (12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
                                         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                            'coords': ((3.032666557133464, -2.31946773410356, -0.2005909214711227),
                                       (1.7965966323727525, -2.726769481545662, 0.1131944823160859),
                                       (0.6001022450168033, -1.823716095575642, 0.09610348164662497),
                                       (0.8656212227956182, -0.38322721155806344, -0.3059007396686369),
                                       (-0.20384687365076506, 0.5538578830402723, -0.35330127405658207),
                                       (-1.615850257373334, 0.11793810515744706, -0.0021083813167320125),
                                       (-2.666631210484685, 1.1839819667026763, -0.08462331623575792),
                                       (-2.408432554722245, 2.448108762765795, -0.44175285637152395),
                                       (-1.0384672839219615, 2.9343382425800866, -0.7981390069853233),
                                       (0.05354493654580599, 1.8901268527378152, -0.7281328101572656),
                                       (1.360345163459102, 2.2800367851044663, -1.0498125324207495),
                                       (2.4062888753907306, 1.3635648690195294, -1.0034533310613403),
                                       (2.1741200125893454, 0.03204590442949366, -0.6341438700725668),
                                       (3.3537347060642184, -0.9141772130421169, -0.6034663330286769),
                                       (3.857416971199899, -3.0258691251257033, -0.1680561641739474),
                                       (1.6284948936766175, -3.761751698143623, 0.3981237205775182),
                                       (-0.12876728204316892, -2.2546376246861692, -0.6003879601412826),
                                       (0.1647188432433128, -1.8335631217240267, 1.1022788475462293),
                                       (-1.6193441692533277, -0.27033274566077425, 1.0232110277361828),
                                       (-1.9128335130279017, -0.6914121934743168, -0.6794549801644719),
                                       (-3.683901780650125, 0.8930548728345359, 0.16266783139886437),
                                       (-3.216883510106505, 3.172742016232346, -0.48160893631158447),
                                       (-1.072894198165549, 3.336201536383572, -1.818157150389412),
                                       (-0.7800775196988431, 3.75631208054777, -0.11938284836659853),
                                       (1.568722832673161, 3.307517543615306, -1.3398308108979469),
                                       (3.4111451729908047, 1.6931590170230992, -1.2581692640326767),
                                       (4.100057564417453, -0.5197380000819599, 0.09691660839857347),
                                       (3.8072448171754303, -0.9398527056749205, -1.60185770224936))}
        cls.crazy = {'symbols': ('C', 'S', 'C', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'N', 'O', 'C', 'C', 'C', 'O',
                                 'C', 'H', 'H', 'C', 'O', 'O', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
                                 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                     'isotopes': (12, 32, 12, 12, 12, 16, 12, 12, 12, 12, 12, 14, 16, 12, 12, 12, 16, 12, 1, 1, 12, 16,
                                  16, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                     'coords': ((0.3274026, -2.26751349, 1.63049586), (-0.45583669, -0.69403507, 2.07966011),
                                (-0.74998553, 0.1674721, 0.40294571), (-1.00035074, -0.91486831, -0.69963969),
                                (-1.36275248, -0.4211373, -2.10180028), (-1.2751424, -1.51271695, -3.01524455),
                                (0.52137932, 1.03702992, 0.05827308), (1.87071211, 0.36242919, -0.0942956),
                                (2.27157054, -0.19914345, -1.31148631), (3.52325995, -0.81277227, -1.43688167),
                                (4.40522429, -0.88047028, -0.3550893), (5.67765022, -1.44973252, -0.47213753),
                                (6.14232632, -2.01780812, -1.64786894), (4.01787295, -0.28926955, 0.85080026),
                                (2.76727967, 0.32378873, 0.98226698), (-2.03762393, 1.15227615, 0.57400664),
                                (-2.08528422, 1.91614517, -0.66817021), (-3.07850461, 2.79943864, -0.89330921),
                                (-3.01406475, 3.29649809, -1.84791173), (-3.82602922, 2.99925098, -0.14930564),
                                (-3.34048249, 0.30576028, 0.76061402), (-4.43606057, 1.09150052, 1.25094611),
                                (-5.5667201, 0.17784882, 1.34169192), (-1.87366601, 2.15813122, 1.74584475),
                                (-0.38980918, -2.92765906, 1.13662409), (0.64993945, -2.7631856, 2.55083355),
                                (1.20742139, -2.132265, 1.00223888), (-1.7923623, -1.60504973, -0.3796867),
                                (-0.1173514, -1.55329785, -0.81227132), (-2.38336335, -0.03585664, -2.15575528),
                                (-0.67883648, 0.35169141, -2.45761307), (-2.10902199, -1.54645788, -3.51490053),
                                (0.34538583, 1.60264434, -0.86560486), (0.65096478, 1.81353001, 0.82157824),
                                (1.62059278, -0.16895436, -2.18187181), (3.79727304, -1.2511092, -2.39297007),
                                (6.19600818, -1.66693258, 0.37451698), (6.3095366, -1.24260293, -2.21706522),
                                (4.68937879, -0.29721399, 1.70527737), (2.49834754, 0.7695989, 1.93797335),
                                (-3.65415206, -0.1279457, -0.19458068), (-3.18902405, -0.502595, 1.48133547),
                                (-5.67928065, 0.23893607, 2.30792673), (-1.02113438, 2.82848721, 1.61108522),
                                (-2.77629877, 2.75649408, 1.89754068), (-1.71528969, 1.64716863, 2.70183805))}
        cls.benzene_linear = {'symbols': ('C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H'),
                              'isotopes': (12, 12, 12, 12, 12, 14, 12, 12, 12, 12, 1, 1, 1, 1, 1),
                              'coords': ((0.6917793400562684, 1.29391286284502, -0.13214664465353948),
                                         (-0.6185504091221145, 1.7731769101968289, -0.08692612528832466),
                                         (-1.6833932359508677, 0.8795882038758046, 0.03962615401321982),
                                         (-1.4388646234989495, -0.49609521189287714, 0.12121388937844003),
                                         (-2.5325313367182374, -1.4135105222226252, 0.2511668921938016),
                                         (-3.419108758680219, -2.1550485143737768, 0.3563617353906588),
                                         (-0.12449811341569593, -0.9745257802320272, 0.07569241019004518),
                                         (0.9400920303355451, -0.07856780853548581, -0.05101070868141463),
                                         (2.2838837513381445, -0.5668187500359169, -0.09761373980211455),
                                         (3.411542161966814, -0.9776058226463531, -0.13664657076151265),
                                         (1.5167531603719113, 1.9964974017394397, -0.23091160649596784),
                                         (-0.8082072424590546, 2.842208372309582, -0.150348939041469),
                                         (-2.701844059239637, 1.2627914212305793, 0.07402489950809948),
                                         (0.0710685088262258, -2.043700425728123, 0.13877020059989245),
                                         (4.4118788261898745, -1.3423023365299716, -0.17125184654981912))}
        cls.c3h3oh = {'symbols': ('C', 'C', 'C', 'O', 'H', 'H', 'H', 'H'), 'isotopes': (12, 12, 12, 16, 1, 1, 1, 1),
                      'coords': ((1.862456554348004, 0.026777369167519667, -0.32293688986523705),
                                 (0.6791463077885745, -0.16499231505016476, -0.2475201358614193),
                                 (-0.7639819655104447, -0.3949436347947458, -0.15698880909783156),
                                 (-1.4609606539196633, 0.6114030307461297, -0.8779028960442423),
                                 (2.912458872637442, 0.1947139893882568, -0.395628248384611),
                                 (-1.0341923127149264, -1.36628954444727, -0.5809277826898395),
                                 (-1.1025029235883375, -0.3707173135111986, 0.8831511472017024),
                                 (-1.092424954839099, 1.464048496722401, -0.5909587968604432))}
        cls.linear_o_s = {'symbols': ('O', 'C', 'C', 'C', 'C', 'C', 'C', 'S', 'H', 'H'),
                          'isotopes': (16, 12, 12, 12, 12, 12, 12, 32, 1, 1),
                          'coords': ((4.703272327944669, -0.1279902472522122, 0.5085363788699104),
                                     (3.382470593412934, -0.0911977073014611, 0.37449935363252085),
                                     (2.1888361387019764, -0.05796642607288465, 0.25458639270093797),
                                     (0.657294050941561, -0.015325988424438086, 0.10061735366842632),
                                     (-0.5362515620733099, 0.017903102273182633, -0.01930913495863116),
                                     (-2.06771847979884, 0.060537517824209096, -0.1730272094151613),
                                     (-3.2612606476239305, 0.09376026646268551, -0.2925596544617892),
                                     (-4.94204603720629, 0.14053912294994944, -0.4604775787001255),
                                     (5.133649971823049, -0.12575191569386987, -0.36314007950137006),
                                     (-5.257594122948905, 0.12854160689842523, 0.8428357989788153))}
        cls.c4linear = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'C', 'N', 'C', 'C', 'H', 'H'),
                        'isotopes': (12, 12, 12, 12, 12, 12, 14, 12, 12, 12, 14, 12, 12, 1, 1),
                        'coords': ((4.090907361992789, 1.5636922953406667, 1.448364945920644),
                                   (3.0985682529210616, 1.0351632117753742, 1.029212185667127),
                                   (1.8255795181493941, 0.35670152045003267, 0.49236445287257896),
                                   (0.8316232504383441, -0.17237677010554195, 0.07408303040014674),
                                   (-0.3984077539266504, -0.8264286491804446, -0.4419959054326186),
                                   (-0.5521797792409757, -2.1770606630404226, 0.1735709546328059),
                                   (-0.6817420649886716, -3.226292370004603, 0.659350777479965),
                                   (-1.5758163829370468, 0.017325153171285357, -0.10274607117911005),
                                   (-2.525721477833854, 0.7022847400058597, 0.1686034194076731),
                                   (-3.743156328351553, 1.5862887197990738, 0.512805600354128),
                                   (-4.656691387795396, 2.2531472900594345, 0.7690237088424039),
                                   (-0.30340884720170536, -0.9516992567958362, -1.924875998236527),
                                   (-0.22667696976693263, -1.051409247984332, -3.120848936012009),
                                   (4.972073168196665, 2.0317422776682306, 1.8211861714716269),
                                   (-0.156563000106284, -1.1418504673378997, -4.181348153119153))}
        cls.cj = {'symbols': ('C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'C', 'C', 'N', 'C', 'C',
                              'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
                              'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
                              'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
                              'H', 'H', 'H', 'H'),
                  'isotopes': (12, 16, 12, 12, 12, 12, 12, 12, 12, 14, 12, 12, 12, 12, 14, 12, 12, 12, 12, 12, 12,
                               12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                  'coords': ((5.675, 2.182, 1.81), (4.408, 1.923, 1.256), (4.269, 0.813, 0.479), (5.303, -0.068, 0.178),
                             (5.056, -1.172, -0.639), (3.794, -1.414, -1.169), (2.77, -0.511, -0.851),
                             (2.977, 0.59, -0.032), (1.872, 1.556, 0.318), (0.557, 1.029, -0.009),
                             (-0.537, 1.879, 0.448), (-0.535, 3.231, -0.298), (-1.831, 3.983, 0.033),
                             (-3.003, 3.199, -0.61), (-2.577, 1.854, -0.99), (-1.64, 1.962, -2.111),
                             (-0.501, 2.962, -1.805), (-1.939, 1.236, 0.178), (-1.971, -0.305, 0.069),
                             (-3.385, -0.794, -0.209), (-4.336, -0.893, 0.81), (-5.631, -1.324, 0.539),
                             (-5.997, -1.673, -0.759), (-5.056, -1.584, -1.781), (-3.764, -1.147, -1.505),
                             (-1.375, -1.024, 1.269), (-1.405, -0.508, 2.569), (-0.871, -1.226, 3.638),
                             (-0.296, -2.475, 3.429), (-0.259, -3.003, 2.14), (-0.794, -2.285, 1.078),
                             (3.533, -2.614, -2.056), (2.521, -3.574, -1.424), (3.087, -2.199, -3.461),
                             (5.569, 3.097, 2.395), (6.433, 2.338, 1.031), (6.003, 1.368, 2.47), (6.302, 0.091, 0.57),
                             (5.874, -1.854, -0.864), (1.772, -0.654, -1.257), (1.963, 1.832, 1.384),
                             (2.033, 2.489, -0.239), (0.469, 0.13, 0.461), (-0.445, 2.089, 1.532), (0.328, 3.83, 0.012),
                             (-1.953, 4.059, 1.122), (-1.779, 5.008, -0.352), (-3.365, 3.702, -1.515),
                             (-3.856, 3.118, 0.074), (-1.226, 0.969, -2.31), (-2.211, 2.259, -2.999),
                             (-0.639, 3.906, -2.348), (0.466, 2.546, -2.105), (-2.586, 1.501, 1.025),
                             (-1.36, -0.582, -0.799), (-4.057, -0.647, 1.831), (-6.355, -1.396, 1.347),
                             (-7.006, -2.015, -0.97), (-5.329, -1.854, -2.798), (-3.038, -1.07, -2.311),
                             (-1.843, 0.468, 2.759), (-0.904, -0.802, 4.638), (0.125, -3.032, 4.262),
                             (0.189, -3.977, 1.961), (-0.772, -2.708, 0.075), (4.484, -3.155, -2.156),
                             (1.543, -3.093, -1.308), (2.383, -4.464, -2.049), (2.851, -3.899, -0.431),
                             (3.826, -1.542, -3.932), (2.134, -1.659, -3.429), (2.951, -3.078, -4.102))}
        cls.ch3ch2chch = {'symbols': ('C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                          'isotopes': (12, 12, 12, 12, 1, 1, 1, 1, 1, 1, 1),
                          'coords': ((-1.398080601449053, -0.19895460404409393, -0.18721256770810532),
                                     (-0.1794760326757028, 0.5672842245028324, 0.3027634205042167),
                                     (1.0431850560931342, -0.30053449345532235, 0.3248699578545045),
                                     (2.079802698107963, -0.14467364775973113, -0.4469469893865143),
                                     (-1.6098170556179725, -1.0605078494964646, 0.455148689403637),
                                     (-2.279596151300165, 0.45013907560161287, -0.18265951563085903),
                                     (-1.2516766907755936, -0.5637021779115823, -1.2095557518359006),
                                     (-0.0198878111613216, 1.4439992825672767, -0.3360988623020301),
                                     (-0.3666944041136225, 0.93929612792765, 1.3165056205355823),
                                     (1.0539967067607323, -1.1163467004545098, 1.0431166714415472),
                                     (2.9282442861316, -0.01599923747767672, -1.0799306728760611))}

    def test_get_atom_connectivity_from_mol(self):
        """Test listing an atom's connectivity in a molecule"""
        mol = ARCSpecies(label='OC1CC1', smiles='OC1CC1').mol
        connectivity = dict()
        for i, atom in enumerate(mol.atoms):
            connectivity[i] = zmat.get_atom_connectivity_from_mol(mol, atom)
        expected_connectivity = {0: [1, 4], 1: [0, 2, 3, 5], 2: [1, 3, 6, 7], 3: [2, 1, 8, 9],
                                 4: [0], 5: [1], 6: [2], 7: [2], 8: [3], 9: [3]}
        self.assertEqual(connectivity, expected_connectivity)

    def test_get_connectivity(self):
        """Test get_connectivity()"""
        connectivity = zmat.get_connectivity(mol=ARCSpecies(label='CH4', smiles='C', xyz=self.ch4).mol)
        self.assertEqual(connectivity, {0: [1, 2, 3, 4], 1: [0], 2: [0], 3: [0], 4: [0]})

        connectivity = zmat.get_connectivity(mol=ARCSpecies(label='sonch', smiles='S1ONC1', xyz=self.sonch).mol)
        self.assertEqual(connectivity, {0: [3, 1], 3: [2, 0, 4, 5], 1: [2, 0], 2: [3, 1, 6], 4: [3], 5: [3], 6: [2]})

        connectivity = zmat.get_connectivity(mol=ARCSpecies(label='N3H5', smiles='NNN', xyz=self.n3h5).mol)
        self.assertEqual(connectivity, {0: [3, 1, 4], 3: [0, 5, 2], 5: [3, 6, 7],
                                        1: [0], 2: [3], 4: [0], 6: [5], 7: [5]})

        connectivity = zmat.get_connectivity(
            mol=ARCSpecies(label='phenanthrene', smiles='C1=CCC2=C3CC=CCC3=CC=C2C1', xyz=self.phenanthrene).mol)
        self.assertEqual(connectivity[2], [1, 3, 16, 17])
        self.assertEqual(len(list(connectivity.keys())), 28)

        connectivity = zmat.get_connectivity(
            mol=ARCSpecies(label='crazy', smiles='OCCC(C(COO)(O[CH2])C)(Cc1ccc(cc1)NO)SC', xyz=self.crazy).mol)
        self.assertEqual(len(list(connectivity.keys())), 46)

        connectivity = zmat.get_connectivity(mol=ARCSpecies(label='N', smiles='[N]').mol)
        self.assertEqual(connectivity, {0: []})

    def test_get_atom_order_from_mol(self):
        """Test getting the atom order from xyz"""
        atom_order = zmat.get_atom_order_from_mol(ARCSpecies(label='CH4', smiles='C', xyz=self.ch4).mol)
        self.assertEqual(atom_order, [0, 1, 2, 3, 4])
        symbols = [self.ch4['symbols'][atom_index] for atom_index in atom_order]
        self.assertEqual(symbols, ['C', 'H', 'H', 'H', 'H'])

        atom_order = zmat.get_atom_order_from_mol(
            ARCSpecies(label='sonch', smiles='S1ONC1', xyz=self.sonch).mol)
        self.assertEqual(atom_order, [0, 3, 1, 2, 4, 5, 6])
        symbols = [self.sonch['symbols'][atom_index] for atom_index in atom_order]
        self.assertEqual(symbols, ['S', 'C', 'O', 'N', 'H', 'H', 'H'])

        atom_order = zmat.get_atom_order_from_mol(
            ARCSpecies(label='N3H5', smiles='NNN', xyz=self.n3h5).mol)
        self.assertEqual(atom_order, [0, 3, 5, 1, 2, 4, 6, 7])
        symbols = [self.n3h5['symbols'][atom_index] for atom_index in atom_order]
        self.assertEqual(symbols, ['N', 'N', 'N', 'H', 'H', 'H', 'H', 'H'])

        atom_order = zmat.get_atom_order_from_mol(
            ARCSpecies(label='phenanthrene', smiles='C1=CCC2=C3CC=CCC3=CC=C2C1', xyz=self.phenanthrene).mol)
        self.assertEqual(atom_order, [0, 1, 13, 2, 12, 3, 11, 4, 10, 5, 9, 6, 8, 7, 14,
                                      15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])
        symbols = [self.phenanthrene['symbols'][atom_index] for atom_index in atom_order]
        self.assertEqual(symbols, ['C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
                                   'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'])

        atom_order = zmat.get_atom_order_from_mol(
            ARCSpecies(label='crazy', smiles='OCCC(C(COO)(O[CH2])C)(Cc1ccc(cc1)NO)SC', xyz=self.crazy).mol)
        self.assertEqual(atom_order, [0, 1, 2, 3, 6, 15, 4, 7, 23, 20, 16, 5, 8, 14, 21, 17, 9, 13, 22, 10, 11,
                                      12, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
                                      39, 40, 41, 42, 43, 44, 45])
        symbols = [self.crazy['symbols'][atom_index] for atom_index in atom_order]
        self.assertEqual(symbols, ['C', 'S', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'O', 'O', 'C', 'C', 'O', 'C', 'C',
                                   'C', 'O', 'C', 'N', 'O', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
                                   'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'])

        atom_order = zmat.get_atom_order_from_mol(
            ARCSpecies(label='crazy', smiles='OCCC(C(COO)(O[CH2])C)(Cc1ccc(cc1)NO)SC', xyz=self.crazy).mol,
            constraints_dict={})
        self.assertEqual(atom_order, [0, 1, 2, 3, 6, 15, 4, 7, 23, 20, 16, 5, 8, 14, 21, 17, 9, 13, 22, 10, 11,
                                      12, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
                                      39, 40, 41, 42, 43, 44, 45])
        symbols = [self.crazy['symbols'][atom_index] for atom_index in atom_order]
        self.assertEqual(symbols, ['C', 'S', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'O', 'O', 'C', 'C', 'O', 'C', 'C',
                                   'C', 'O', 'C', 'N', 'O', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
                                   'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'])

        # test the same molecule without and with constraints:

        atom_order = zmat.get_atom_order_from_mol(
            ARCSpecies(label='chiral_chlorine', smiles='CC(Cl)CC=C(O)C', xyz=self.chiral_chlorine).mol,
            constraints_dict={})
        self.assertEqual(atom_order, [0, 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])
        symbols = [self.chiral_chlorine['symbols'][atom_index] for atom_index in atom_order]
        self.assertEqual(symbols, ['C', 'C', 'C', 'Cl', 'C', 'C', 'C', 'O', 'H',
                                   'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'])

        atom_order = zmat.get_atom_order_from_mol(
            ARCSpecies(label='chiral_chlorine', smiles='CC(Cl)CC=C(O)C', xyz=self.chiral_chlorine).mol,
            constraints_dict={'R_atom': [(3, 2)]})
        self.assertEqual(atom_order, [2, 1, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])
        symbols = [self.chiral_chlorine['symbols'][atom_index] for atom_index in atom_order]
        self.assertEqual(symbols, ['Cl', 'C', 'C', 'C', 'C', 'C', 'C', 'O', 'H',
                                   'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'])

        atom_order = zmat.get_atom_order_from_mol(
            ARCSpecies(label='chiral_chlorine', smiles='CC(Cl)CC=C(O)C', xyz=self.chiral_chlorine).mol,
            constraints_dict={'R_atom': [(3, 4)]})
        self.assertEqual(atom_order, [6, 5, 4, 7, 3, 1, 0, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])
        symbols = [self.chiral_chlorine['symbols'][atom_index] for atom_index in atom_order]
        self.assertEqual(symbols, ['C', 'C', 'C', 'O', 'C', 'C', 'C', 'Cl', 'H',
                                   'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'])

        atom_order = zmat.get_atom_order_from_mol(
            ARCSpecies(label='chiral_chlorine', smiles='CC(Cl)CC=C(O)C', xyz=self.chiral_chlorine).mol,
            constraints_dict={'R_group': [(3, 4)]})
        self.assertEqual(atom_order, [6, 5, 4, 7, 3, 1, 0, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])
        symbols = [self.chiral_chlorine['symbols'][atom_index] for atom_index in atom_order]
        self.assertEqual(symbols, ['C', 'C', 'C', 'O', 'C', 'C', 'C', 'Cl', 'H',
                                   'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'])

        atom_order = zmat.get_atom_order_from_mol(
            ARCSpecies(label='chiral_chlorine', smiles='CC(Cl)CC=C(O)C', xyz=self.chiral_chlorine).mol,
            constraints_dict={'A_group': [(3, 4, 5)]})
        self.assertEqual(atom_order, [6, 5, 4, 7, 3, 1, 0, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])
        symbols = [self.chiral_chlorine['symbols'][atom_index] for atom_index in atom_order]
        self.assertEqual(symbols, ['C', 'C', 'C', 'O', 'C', 'C', 'C', 'Cl', 'H',
                                   'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'])

        atom_order = zmat.get_atom_order_from_mol(
            ARCSpecies(label='chiral_chlorine', smiles='CC(Cl)CC=C(O)C', xyz=self.chiral_chlorine).mol,
            constraints_dict={'D_group': [(3, 4, 5, 7)]})
        self.assertEqual(atom_order, [7, 5, 6, 4, 14, 15, 16, 17, 18, 3, 12, 13, 1, 11, 0, 8, 9, 10, 2])
        symbols = [self.chiral_chlorine['symbols'][atom_index] for atom_index in atom_order]
        self.assertEqual(symbols, ['O', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H',
                                   'C', 'H', 'H', 'C', 'H', 'C', 'H', 'H', 'H', 'Cl'])

    def test_order_fragments_by_constraints(self):
        """Test order_fragments_by_constraints()"""
        constraints_dict = {'R_atom': [(4, 7)],
                            'A_atom': [(8, 9, 10), (6, 1, 0)],
                            'D_group': [(5, 10, 3, 4)],
                            }
        fragments = [[3, 4, 5, 8, 9, 10], [0, 1, 2, 6, 7]]
        new_fragments = zmat.order_fragments_by_constraints(fragments=fragments, constraints_dict=constraints_dict)
        self.assertEqual(new_fragments, [[0, 1, 2, 6, 7], [3, 4, 5, 8, 9, 10]])

    def test_get_atom_order_from_xyz(self):
        """Test getting the atom order from xyz"""
        atom_order = zmat.get_atom_order_from_xyz(self.ch4)
        self.assertEqual(atom_order, [0, 1, 2, 3, 4])
        atom_order = zmat.get_atom_order_from_xyz(self.sonch)
        self.assertEqual(atom_order, [0, 1, 2, 3, 4, 5, 6])
        atom_order = zmat.get_atom_order_from_xyz(self.n3h5)
        self.assertEqual(atom_order, [0, 3, 5, 1, 2, 4, 6, 7])

    def test_check_atom_r_constraints(self):
        """Test R constraints"""
        constraints = {'R_atom': [(5, 7), (0, 3)]}
        self.assertEqual(zmat.check_atom_r_constraints(atom_index=5, constraints=constraints), ((5, 7), 'R_atom'))
        self.assertEqual(zmat.check_atom_r_constraints(atom_index=0, constraints=constraints), ((0, 3), 'R_atom'))
        self.assertIsNone(zmat.check_atom_r_constraints(atom_index=3, constraints=constraints)[0])
        self.assertIsNone(zmat.check_atom_r_constraints(atom_index=0, constraints={})[0])

    def test_check_atom_a_constraints(self):
        """Test A constraints"""
        constraints = {'A_atom': [(5, 7, 9), (0, 3, 6)]}
        self.assertEqual(zmat.check_atom_a_constraints(atom_index=5, constraints=constraints), ((5, 7, 9), 'A_atom'))
        self.assertEqual(zmat.check_atom_a_constraints(atom_index=0, constraints=constraints), ((0, 3, 6), 'A_atom'))
        self.assertIsNone(zmat.check_atom_a_constraints(atom_index=6, constraints=constraints)[0])
        self.assertIsNone(zmat.check_atom_a_constraints(atom_index=5, constraints={})[0])

    def test_check_atom_d_constraints(self):
        """Test D constraints"""
        constraints = {'D_group': [(5, 7, 9, 6), (0, 3, 6, 1)]}
        self.assertEqual(zmat.check_atom_d_constraints(atom_index=5, constraints=constraints),
                         ((5, 7, 9, 6), 'D_group'))
        self.assertEqual(zmat.check_atom_d_constraints(atom_index=0, constraints=constraints),
                         ((0, 3, 6, 1), 'D_group'))
        self.assertIsNone(zmat.check_atom_d_constraints(atom_index=3, constraints=constraints)[0])
        self.assertIsNone(zmat.check_atom_d_constraints(atom_index=0, constraints={})[0])

    def test_zmat_from_xyz(self):
        """Test creating a zmat from xyz"""
        z = zmat.xyz_to_zmat(self.o)  # Just one atom.
        expected_z = {'symbols': ('O',), 'coords': ((None, None, None),), 'vars': {}, 'map': {0: 0}}
        self.assertEqual(z, expected_z)

        z = zmat.xyz_to_zmat(self.h2)  # Just two atoms.
        expected_z = {'symbols': ('H', 'H'),
                      'coords': ((None, None, None),
                                 ('R_1_0', None, None)),
                      'vars': {'R_1_0': 0.6956932439857395},
                      'map': {0: 0, 1: 1}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        z = zmat.xyz_to_zmat(self.ch2, consolidate=False)  # Just the first three atoms.
        expected_z = {'symbols': ('C', 'H', 'H'),
                      'coords': ((None, None, None),
                                 ('R_1_0', None, None),
                                 ('R_2_1', 'A_2_1_0', None)),
                      'vars': {'R_1_0': 1.0730302929508322, 'R_2_1': 1.9756079619269422, 'A_2_1_0': 22.989828156538568},
                      'map': {0: 0, 1: 1, 2: 2}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        z = zmat.xyz_to_zmat(self.ch2, constraints={'R_atom': [(2, 1)]})  # Just the first three atoms w/ a constraint.
        expected_z = {'symbols': ('C', 'H', 'H'),
                      'coords': ((None, None, None),
                                 ('R_1_0', None, None),
                                 ('R_2_1', 'A_2_1_0', None)),
                      'vars': {'R_1_0': 1.0730302929508322, 'R_2_1': 1.9756079619269422, 'A_2_1_0': 22.989828156538568},
                      'map': {0: 0, 1: 1, 2: 2}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        ch3 = ARCSpecies(label='CH3', smiles='[CH3]')
        z = zmat.xyz_to_zmat(ch3.get_xyz(), consolidate=False)
        expected_z = {'symbols': ('C', 'H', 'H', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                 ('R_3_2', 'A_3_2_0', 'D_3_2_0_1')),
                      'vars': {'R_1_0': 1.0825497593356543, 'R_2_1': 1.8750311531021984, 'A_2_1_0': 29.999999704532275,
                               'R_3_2': 1.8750312166794287, 'A_3_2_0': 30.000000184635937,
                               'D_3_2_0_1': 179.99999829245272},
                      'map': {0: 0, 1: 1, 2: 2, 3: 3}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        z = zmat.xyz_to_zmat(self.ch4, consolidate=False)  # "simple" five atoms, no consolidation
        expected_z = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                 ('R_3_2', 'A_3_2_0', 'D_3_2_0_1'), ('R_4_3', 'A_4_3_2', 'D_4_3_2_1')),
                      'vars': {'R_1_0': 1.0912484581271156, 'R_2_1': 1.7820012700068855, 'A_2_1_0': 35.26438764560717,
                               'R_3_2': 1.7820012700068855, 'A_3_2_0': 35.26438764560717,
                               'D_3_2_0_1': 120.00000000000001, 'R_4_3': 1.7820012700068855,
                               'A_4_3_2': 59.99999916833805, 'D_4_3_2_1': 70.52877936550931},
                      'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        z = zmat.xyz_to_zmat(self.ch4, consolidate=True)  # "simple" five atoms, consolidation
        expected_z = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None), ('R_2|3|4_1|2|3', 'A_2|3_1|2_0|0', None),
                                 ('R_2|3|4_1|2|3', 'A_2|3_1|2_0|0', 'D_3_2_0_1'),
                                 ('R_2|3|4_1|2|3', 'A_4_3_2', 'D_4_3_2_1')),
                      'vars': {'R_1_0': 1.0912484581271156, 'D_3_2_0_1': 120.00000000000001,
                               'A_4_3_2': 59.99999916833805, 'D_4_3_2_1': 70.52877936550931,
                               'R_2|3|4_1|2|3': 1.7820012700068855, 'A_2|3_1|2_0|0': 35.26438764560717},
                      'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        # "simple" five atoms using connectivity, consolidation
        z = zmat.xyz_to_zmat(self.ch4, mol=ARCSpecies(label='CH4', xyz=self.ch4).mol, consolidate=True)
        expected_z = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                      'coords': ((None, None, None),
                                 ('R_1|2|3|4_0|0|0|0', None, None),
                                 ('R_1|2|3|4_0|0|0|0', 'A_2|3|4_0|0|0_1|1|1', None),
                                 ('R_1|2|3|4_0|0|0|0', 'A_2|3|4_0|0|0_1|1|1', 'D_3|4_0|0_1|1_2|3'),
                                 ('R_1|2|3|4_0|0|0|0', 'A_2|3|4_0|0|0_1|1|1', 'D_3|4_0|0_1|1_2|3')),
                      'vars': {'R_1|2|3|4_0|0|0|0': 1.0912484581271156, 'A_2|3|4_0|0|0_1|1|1': 109.47122114377756,
                               'D_3|4_0|0_1|1_2|3': 120.00000000000001},
                      'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        z = zmat.xyz_to_zmat(self.n2h2)  # only two heavy atoms, H on each side
        expected_z = {'symbols': ('N', 'N', 'H', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                 ('R_3_2', 'A_3_2_0', 'D_3_2_0_1')),
                      'vars': {'R_1_0': 1.2451214479859707, 'R_2_1': 1.8953164901754294, 'A_2_1_0': 30.18165946689929,
                               'R_3_2': 2.785552137148173, 'A_3_2_0': 24.405141545817347,
                               'D_3_2_0_1': 3.6222548091772e-06}, 'map': {0: 0, 1: 1, 2: 2, 3: 3}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        z = zmat.xyz_to_zmat(self.h2nn)  # only two heavy atoms, but H's only on one side
        expected_z = {'symbols': ('N', 'N', 'H', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                 ('R_3_2', 'A_3_2_0', 'D_3_2_0_1')),
                      'vars': {'R_1_0': 1.453439904003661, 'R_2_1': 1.0201432886642632, 'A_2_1_0': 121.26532344550412,
                               'R_3_2': 1.7439821177668233, 'A_3_2_0': 66.26220791342335,
                               'D_3_2_0_1': 359.99999758516344}, 'map': {0: 0, 1: 1, 2: 2, 3: 3}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        # only two heavy atoms, check H dihedrals make sense and represent "real" molecular torsions
        # also tests a case where the 'map' is not trivial
        z = zmat.xyz_to_zmat(self.ch3nh2, mol=ARCSpecies(label='CH3NH2', xyz=self.ch3nh2, smiles='CN').mol)
        expected_z = {'symbols': ('C', 'N', 'H', 'H', 'H', 'H', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None), ('R_2|4_0|0', 'A_2|4_0|0_1|1', None),
                                 ('R_3|6_1|1', 'A_3|6_1|1_0|0', 'D_3_1_0_2'),
                                 ('R_2|4_0|0', 'A_2|4_0|0_1|1', 'D_4_0_1_3'), ('R_5_0', 'A_5_0_1', 'D_5_0_1_4'),
                                 ('R_3|6_1|1', 'A_3|6_1|1_0|0', 'D_6_1_0_5')),
                      'vars': {'R_1_0': 1.451965854148702, 'D_3_1_0_2': 60.83821034525936,
                               'D_4_0_1_3': 301.30263742432356, 'R_5_0': 1.0936965384360282,
                               'A_5_0_1': 110.59878027260544, 'D_5_0_1_4': 239.76779188408136,
                               'D_6_1_0_5': 65.17113681053117, 'R_2|4_0|0': 1.0935188594180785,
                               'R_3|6_1|1': 1.019169330302324, 'A_2|4_0|0_1|1': 110.20495980110817,
                               'A_3|6_1|1_0|0': 109.41187648524644},
                      'map': {0: 0, 1: 1, 2: 2, 3: 5, 4: 3, 5: 4, 6: 6}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        # check a 3-member ring
        z = zmat.xyz_to_zmat(self.co3, mol=ARCSpecies(label='cO3', xyz=self.co3, smiles='O1OO1').mol)
        expected_z = {'symbols': ('O', 'O', 'O'),
                      'coords': ((None, None, None),
                                 ('R_1|2_0|0', None, None),
                                 ('R_1|2_0|0', 'A_2_0_1', None)),
                      'vars': {'A_2_0_1': 60.000001547447354, 'R_1|2_0|0': 1.4437053921236238},
                      'map': {0: 0, 1: 1, 2: 2}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        # check a linear molecule (with a dummy atom)
        z = zmat.xyz_to_zmat(self.co2, mol=ARCSpecies(label='CO2', xyz=self.co2, smiles='O=C=O').mol)
        expected_z = {'symbols': ('O', 'C', 'X', 'O'),
                      'coords': ((None, None, None),
                                 ('R_1|3_0|1', None, None),
                                 ('RX_2_1', 'AX_2|3_1|1_0|2', None),
                                 ('R_1|3_0|1', 'AX_2|3_1|1_0|2', 'DX_3_1_2_0')),
                      'vars': {'RX_2_1': 1.0, 'DX_3_1_2_0': 180.0, 'R_1|3_0|1': 1.404999961513641,
                               'AX_2|3_1|1_0|2': 90.0},
                      'map': {0: 0, 1: 1, 2: 'X3', 3: 2}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        # check a larger linear molecule (with several dummy atoms) with connectivity
        z = zmat.xyz_to_zmat(self.c4h2, mol=ARCSpecies(label='CtCCtC', xyz=self.c4h2, smiles='C#CC#C').mol)
        expected_z = {'symbols': ('C', 'C', 'X', 'C', 'X', 'C', 'X', 'H', 'X', 'H'),
                      'coords': ((None, None, None), ('R_1|5_0|3', None, None),
                                 ('RX_2|4|6|8_1|3|0|5', 'AX_2|3|4|5|6|7|8|9_1|1|3|3|0|0|5|5_0|2|1|4|1|6|3|8', None),
                                 ('R_3_1', 'AX_2|3|4|5|6|7|8|9_1|1|3|3|0|0|5|5_0|2|1|4|1|6|3|8', 'DX_3|4|5|6|7|8|9_1|3|3|0|0|5|5_2|1|4|1|6|3|8_0|2|1|4|1|6|3'),
                                 ('RX_2|4|6|8_1|3|0|5', 'AX_2|3|4|5|6|7|8|9_1|1|3|3|0|0|5|5_0|2|1|4|1|6|3|8', 'DX_3|4|5|6|7|8|9_1|3|3|0|0|5|5_2|1|4|1|6|3|8_0|2|1|4|1|6|3'),
                                 ('R_1|5_0|3', 'AX_2|3|4|5|6|7|8|9_1|1|3|3|0|0|5|5_0|2|1|4|1|6|3|8', 'DX_3|4|5|6|7|8|9_1|3|3|0|0|5|5_2|1|4|1|6|3|8_0|2|1|4|1|6|3'),
                                 ('RX_2|4|6|8_1|3|0|5', 'AX_2|3|4|5|6|7|8|9_1|1|3|3|0|0|5|5_0|2|1|4|1|6|3|8', 'DX_3|4|5|6|7|8|9_1|3|3|0|0|5|5_2|1|4|1|6|3|8_0|2|1|4|1|6|3'),
                                 ('R_7|9_0|5', 'AX_2|3|4|5|6|7|8|9_1|1|3|3|0|0|5|5_0|2|1|4|1|6|3|8', 'DX_3|4|5|6|7|8|9_1|3|3|0|0|5|5_2|1|4|1|6|3|8_0|2|1|4|1|6|3'),
                                 ('RX_2|4|6|8_1|3|0|5', 'AX_2|3|4|5|6|7|8|9_1|1|3|3|0|0|5|5_0|2|1|4|1|6|3|8', 'DX_3|4|5|6|7|8|9_1|3|3|0|0|5|5_2|1|4|1|6|3|8_0|2|1|4|1|6|3'),
                                 ('R_7|9_0|5', 'AX_2|3|4|5|6|7|8|9_1|1|3|3|0|0|5|5_0|2|1|4|1|6|3|8', 'DX_3|4|5|6|7|8|9_1|3|3|0|0|5|5_2|1|4|1|6|3|8_0|2|1|4|1|6|3')),
                      'vars': {'R_3_1': 1.5400497445828802, 'R_1|5_0|3': 1.2000142543661365, 'RX_2|4|6|8_1|3|0|5': 1.0,
                               'R_7|9_0|5': 1.064823863011001,
                               'AX_2|3|4|5|6|7|8|9_1|1|3|3|0|0|5|5_0|2|1|4|1|6|3|8': 90.0,
                               'DX_3|4|5|6|7|8|9_1|3|3|0|0|5|5_2|1|4|1|6|3|8_0|2|1|4|1|6|3': 180.0},
                      'map': {0: 0, 1: 1, 2: 'X6', 3: 2, 4: 'X7', 5: 3, 6: 'X8', 7: 4, 8: 'X9', 9: 5}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        # check a larger linear molecule (with several dummy atoms) without connectivity
        z = zmat.xyz_to_zmat(self.c4h2)
        expected_z = {'symbols': ('C', 'C', 'X', 'C', 'X', 'C', 'X', 'H', 'X', 'H'),
                      'coords': ((None, None, None), ('R_1|5_0|3', None, None),
                                 ('RX_2|4|6|8_1|3|5|7', 'AX_2|3|4|5|6|7|8|9_1|1|3|3|5|5|7|7_0|2|0|4|0|6|0|8', None),
                                 ('R_3_1', 'AX_2|3|4|5|6|7|8|9_1|1|3|3|5|5|7|7_0|2|0|4|0|6|0|8', 'DX_3|4|5|6|8_1|3|3|5|7_2|0|4|0|0_0|2|0|4|6'),
                                 ('RX_2|4|6|8_1|3|5|7', 'AX_2|3|4|5|6|7|8|9_1|1|3|3|5|5|7|7_0|2|0|4|0|6|0|8', 'DX_3|4|5|6|8_1|3|3|5|7_2|0|4|0|0_0|2|0|4|6'),
                                 ('R_1|5_0|3', 'AX_2|3|4|5|6|7|8|9_1|1|3|3|5|5|7|7_0|2|0|4|0|6|0|8', 'DX_3|4|5|6|8_1|3|3|5|7_2|0|4|0|0_0|2|0|4|6'),
                                 ('RX_2|4|6|8_1|3|5|7', 'AX_2|3|4|5|6|7|8|9_1|1|3|3|5|5|7|7_0|2|0|4|0|6|0|8', 'DX_3|4|5|6|8_1|3|3|5|7_2|0|4|0|0_0|2|0|4|6'),
                                 ('R_7_5', 'AX_2|3|4|5|6|7|8|9_1|1|3|3|5|5|7|7_0|2|0|4|0|6|0|8', 'DX_7|9_5|7_6|8_0|0'),
                                 ('RX_2|4|6|8_1|3|5|7', 'AX_2|3|4|5|6|7|8|9_1|1|3|3|5|5|7|7_0|2|0|4|0|6|0|8', 'DX_3|4|5|6|8_1|3|3|5|7_2|0|4|0|0_0|2|0|4|6'),
                                 ('R_9_7', 'AX_2|3|4|5|6|7|8|9_1|1|3|3|5|5|7|7_0|2|0|4|0|6|0|8', 'DX_7|9_5|7_6|8_0|0')),
                      'vars': {'R_3_1': 1.5400497445828802, 'R_7_5': 5.00490215316385, 'R_9_7': 6.069725842891203,
                               'R_1|5_0|3': 1.2000142543661365, 'RX_2|4|6|8_1|3|5|7': 1.0,
                               'AX_2|3|4|5|6|7|8|9_1|1|3|3|5|5|7|7_0|2|0|4|0|6|0|8': 90.0,
                               'DX_3|4|5|6|8_1|3|3|5|7_2|0|4|0|0_0|2|0|4|6': 180.0, 'DX_7|9_5|7_6|8_0|0': 0.0},
                      'map': {0: 0, 1: 1, 2: 'X6', 3: 2, 4: 'X7', 5: 3, 6: 'X8', 7: 4, 8: 'X9', 9: 5}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        z = zmat.xyz_to_zmat(self.c6h8, mol=ARCSpecies(label='c6h8', xyz=self.c6h8, smiles='C=CC=C=CC=C').mol,
                             consolidate=False)
        expected_z = {'symbols': ('C', 'C', 'C', 'C', 'X', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                 ('R_3_2', 'A_3_2_1', 'D_3_2_1_0'), ('RX_4_3', 'AX_4_3_2', 'DX_4_3_2_1'),
                                 ('R_5_3', 'AX_5_3_4', 'DX_5_3_4_2'), ('R_6_5', 'A_6_5_3', 'D_6_5_3_1'),
                                 ('R_7_6', 'A_7_6_5', 'D_7_6_5_3'), ('R_8_0', 'A_8_0_1', 'D_8_0_1_7'),
                                 ('R_9_0', 'A_9_0_1', 'D_9_0_1_8'), ('R_10_1', 'A_10_1_0', 'D_10_1_0_9'),
                                 ('R_11_2', 'A_11_2_1', 'D_11_2_1_0'), ('R_12_5', 'A_12_5_6', 'D_12_5_6_7'),
                                 ('R_13_6', 'A_13_6_7', 'D_13_6_7_12'), ('R_14_7', 'A_14_7_6', 'D_14_7_6_13'),
                                 ('R_15_7', 'A_15_7_6', 'D_15_7_6_14')),
                      'vars': {'R_1_0': 1.3381887284791203, 'R_2_1': 1.4407903911456557, 'A_2_1_0': 123.1957881224116,
                               'R_3_2': 1.3006574325513987, 'A_3_2_1': 121.52255536842965,
                               'D_3_2_1_0': 180.11367214338955, 'RX_4_3': 1.0, 'AX_4_3_2': 90.0, 'DX_4_3_2_1': 180,
                               'R_5_3': 1.3006577533372194, 'AX_5_3_4': 90.0, 'DX_5_3_4_2': 180.0,
                               'R_6_5': 1.4407904738844681, 'A_6_5_3': 121.5226200358072,
                               'D_6_5_3_1': 78.69721089515058, 'R_7_6': 1.338188683937835,
                               'A_7_6_5': 123.19591928237294, 'D_7_6_5_3': 180.11310466421452,
                               'R_8_0': 1.0853469120878136, 'A_8_0_1': 122.24053298004347,
                               'D_8_0_1_7': 303.5079357762497, 'R_9_0': 1.0856139435147458,
                               'A_9_0_1': 120.4180985984694, 'D_9_0_1_8': 179.99747417664557,
                               'R_10_1': 1.0886528591087101, 'A_10_1_0': 119.30832278135362,
                               'D_10_1_0_9': 0.011770727624287203, 'R_11_2': 1.085379642482355,
                               'A_11_2_1': 119.14546879028211, 'D_11_2_1_0': 359.8634289992383,
                               'R_12_5': 1.0853801367257143, 'A_12_5_6': 119.145571164723,
                               'D_12_5_6_7': 359.8630435421764, 'R_13_6': 1.0886528591087101,
                               'A_13_6_7': 119.30804017310328, 'D_13_6_7_12': 180.0829054665434,
                               'R_14_7': 1.0856143278433021, 'A_14_7_6': 120.41805456640041,
                               'D_14_7_6_13': 0.011890706022742024, 'R_15_7': 1.085346582582179,
                               'A_15_7_6': 122.24035799136644, 'D_15_7_6_14': 180.00215607227028},
                      'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 'X15', 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 12: 11,
                              13: 12, 14: 13, 15: 14}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        # test benzene
        adj = """1  C u0 p0 c0 {2,B} {6,B} {7,S}
2  C u0 p0 c0 {1,B} {3,B} {8,S}
3  C u0 p0 c0 {2,B} {4,B} {9,S}
4  C u0 p0 c0 {3,B} {5,B} {10,S}
5  C u0 p0 c0 {4,B} {6,B} {11,S}
6  C u0 p0 c0 {1,B} {5,B} {12,S}
7  H u0 p0 c0 {1,S}
8  H u0 p0 c0 {2,S}
9  H u0 p0 c0 {3,S}
10 H u0 p0 c0 {4,S}
11 H u0 p0 c0 {5,S}
12 H u0 p0 c0 {6,S}"""
        z = zmat.xyz_to_zmat(self.benzene, mol=ARCSpecies(label='benzene', xyz=self.benzene, adjlist=adj).mol)
        expected_z = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H'),
                      'coords': ((None, None, None), ('R_1|2|3|4|5_0|0|1|2|3', None, None),
                                 ('R_1|2|3|4|5_0|0|1|2|3', 'A_2|3|4|5_0|1|2|3_1|0|0|1', None),
                                 ('R_1|2|3|4|5_0|0|1|2|3', 'A_2|3|4|5_0|1|2|3_1|0|0|1', 'D_3|4_1|2_0|0_2|1'),
                                 ('R_1|2|3|4|5_0|0|1|2|3', 'A_2|3|4|5_0|1|2|3_1|0|0|1', 'D_3|4_1|2_0|0_2|1'),
                                 ('R_1|2|3|4|5_0|0|1|2|3', 'A_2|3|4|5_0|1|2|3_1|0|0|1', 'D_5_3_1_0'),
                                 ('R_6|7|8|9|10|11_0|1|3|5|4|2', 'A_6|7|8|9|10|11_0|1|3|5|4|2_1|0|1|3|2|0',
                                 'D_6|8|9|10|11_0|3|5|4|2_1|1|3|2|0_5|0|1|0|1'),
                                 ('R_6|7|8|9|10|11_0|1|3|5|4|2', 'A_6|7|8|9|10|11_0|1|3|5|4|2_1|0|1|3|2|0',
                                  'D_7_1_0_6'),
                                 ('R_6|7|8|9|10|11_0|1|3|5|4|2', 'A_6|7|8|9|10|11_0|1|3|5|4|2_1|0|1|3|2|0',
                                  'D_6|8|9|10|11_0|3|5|4|2_1|1|3|2|0_5|0|1|0|1'),
                                 ('R_6|7|8|9|10|11_0|1|3|5|4|2', 'A_6|7|8|9|10|11_0|1|3|5|4|2_1|0|1|3|2|0',
                                 'D_6|8|9|10|11_0|3|5|4|2_1|1|3|2|0_5|0|1|0|1'),
                                 ('R_6|7|8|9|10|11_0|1|3|5|4|2', 'A_6|7|8|9|10|11_0|1|3|5|4|2_1|0|1|3|2|0',
                                 'D_6|8|9|10|11_0|3|5|4|2_1|1|3|2|0_5|0|1|0|1'),
                                 ('R_6|7|8|9|10|11_0|1|3|5|4|2', 'A_6|7|8|9|10|11_0|1|3|5|4|2_1|0|1|3|2|0',
                                 'D_6|8|9|10|11_0|3|5|4|2_1|1|3|2|0_5|0|1|0|1')),
                      'vars': {'R_1|2|3|4|5_0|0|1|2|3': 1.3948258716509623,
                               'R_6|7|8|9|10|11_0|1|3|5|4|2': 1.0867300366186459,
                               'A_6|7|8|9|10|11_0|1|3|5|4|2_1|0|1|3|2|0': 120.00000092959549,
                               'A_2|3|4|5_0|1|2|3_1|0|0|1': 120.00000049544354, 'D_3|4_1|2_0|0_2|1': 359.99999914622634,
                               'D_5_3_1_0': 1.9090959104164224e-06, 'D_7_1_0_6': 0.0,
                               'D_6|8|9|10|11_0|3|5|4|2_1|1|3|2|0_5|0|1|0|1': 180.00000108126886},
                      'map': {0: 0, 1: 1, 2: 5, 3: 2, 4: 4, 5: 3, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        # test benzene with two linear groups
        z = zmat.xyz_to_zmat(self.benzene_linear, mol=ARCSpecies(
            label='benzene_linear', xyz=self.benzene_linear, smiles='c1ccc(C#N)cc1C#C').mol)
        expected_z = {'symbols': ('N', 'C', 'X', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'X', 'C', 'H', 'H', 'H', 'H', 'X', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None),
                                 ('RX_2|10|16_1|9|11', 'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|9|16', None),
                                 ('R_3_1', 'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|9|16', 'DX_3|10|11|16|17_1|9|9|11|11_2|7|10|9|16_0|8|7|15|9'),
                                 ('R_4_3', 'A_4_3_1', 'DX_4_3_1_2'), ('R_5_3', 'A_5_3_4', 'D_5|9_3|7_4|8_1|6'), ('R_6_4', 'A_6_4_3', 'D_6_4_3_5'),
                                 ('R_7_5', 'A_7_5_3', 'D_7|8_5|6_3|4_4|7'), ('R_8_6', 'A_8_6_4', 'D_7|8_5|6_3|4_4|7'),
                                 ('R_9_7', 'A_9_7_8', 'D_5|9_3|7_4|8_1|6'),
                                 ('RX_2|10|16_1|9|11', 'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|9|16', 'DX_3|10|11|16|17_1|9|9|11|11_2|7|10|9|16_0|8|7|15|9'),
                                 ('R_11_9', 'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|9|16', 'DX_3|10|11|16|17_1|9|9|11|11_2|7|10|9|16_0|8|7|15|9'),
                                 ('R_12_8', 'A_12_8_6', 'D_12_8_6_11'), ('R_13_6', 'A_13_6_8', 'D_13_6_8_12'), ('R_14|15_4|5', 'A_14_4_6', 'D_14_4_6_8'),
                                 ('R_14|15_4|5', 'A_15_5_7', 'D_15_5_7_9'),
                                 ('RX_2|10|16_1|9|11', 'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|9|16', 'DX_3|10|11|16|17_1|9|9|11|11_2|7|10|9|16_0|8|7|15|9'),
                                 ('R_17_11', 'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|9|16', 'DX_3|10|11|16|17_1|9|9|11|11_2|7|10|9|16_0|8|7|15|9')),
                      'vars': {'R_1_0': 1.160587988259717, 'R_3_1': 1.4334034806467013, 'R_4_3': 1.399627009160122,
                               'A_4_3_1': 120.07019183443934, 'DX_4_3_1_2': 4.34798777287889,
                               'R_5_3': 1.399473903784766, 'A_5_3_4': 119.881331942158, 'R_6_4': 1.3958533508611464,
                               'A_6_4_3': 120.08126334426318, 'R_7_5': 1.3971923740671386, 'A_7_5_3': 119.9563068700548,
                               'R_8_6': 1.3959594593665048, 'A_8_6_4': 119.9482566876851, 'R_9_7': 1.4305024039425962,
                               'A_9_7_8': 120.02391550399469, 'R_11_9': 1.2007843136670773,
                               'R_12_8': 1.0880998995721738, 'A_12_8_6': 119.53324669121744,
                               'R_13_6': 1.0875755415362989, 'A_13_6_8': 119.9515345136673,
                               'A_14_4_6': 119.41761055861897, 'A_15_5_7': 119.8756160539422,
                               'R_17_11': 1.065305092411802, 'RX_2|10|16_1|9|11': 1.0, 'R_14|15_4|5': 1.088721623781535,
                               'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|9|16': 90.0, 'D_14_4_6_8': 180.00000858031896,
                               'DX_3|10|11|16|17_1|9|9|11|11_2|7|10|9|16_0|8|7|15|9': 180.0,
                               'D_5|9_3|7_4|8_1|6': 180.0000026484778, 'D_12_8_6_11': 179.9999927053548,
                               'D_6_4_3_5': 359.9999896133953, 'D_13_6_8_12': 359.99999440143176,
                               'D_7|8_5|6_3|4_4|7': 1.8688260386968244e-06, 'D_15_5_7_9': 7.778248095798993e-06},
                      'map': {0: 5, 1: 4, 2: 'X15', 3: 3, 4: 2, 5: 6, 6: 1, 7: 7, 8: 0, 9: 8, 10: 'X16', 11: 9, 12: 10,
                              13: 11, 14: 12, 15: 13, 16: 'X17', 17: 14}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        # test linear alcohol
        z = zmat.xyz_to_zmat(self.c3h3oh, mol=ARCSpecies(label='c3h3oh', xyz=self.c3h3oh, smiles='C#CCO').mol)
        expected_z = {'symbols': ('C', 'C', 'X', 'C', 'O', 'X', 'H', 'H', 'H', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None), ('RX_2|5_1|0', 'AX_2|3|5|6_1|1|0|0_0|2|1|5', None),
                                 ('R_3_1', 'AX_2|3|5|6_1|1|0|0_0|2|1|5', 'DX_3|5|6_1|0|0_2|1|5_0|4|1'),
                                 ('R_4_3', 'A_4_3_1', 'DX_4_3_1_2'),
                                 ('RX_2|5_1|0', 'AX_2|3|5|6_1|1|0|0_0|2|1|5', 'DX_3|5|6_1|0|0_2|1|5_0|4|1'),
                                 ('R_6_0', 'AX_2|3|5|6_1|1|0|0_0|2|1|5', 'DX_3|5|6_1|0|0_2|1|5_0|4|1'),
                                 ('R_7_3', 'A_7_3_1', 'D_7_3_1_4'), ('R_8_3', 'A_8_3_1', 'D_8_3_1_7'),
                                 ('R_9_4', 'A_9_4_3', 'D_9_4_3_1')),
                      'vars': {'R_1_0': 1.2011188774512602, 'R_3_1': 1.4641354895832899, 'R_4_3': 1.42064429038864,
                               'A_4_3_1': 109.93394953160829, 'DX_4_3_1_2': 32.911326461882666,
                               'R_6_0': 1.0658290544612397, 'R_7_3': 1.0937325067483612, 'A_7_3_1': 111.0402513481093,
                               'D_7_3_1_4': 119.61675308969421, 'R_8_3': 1.094109067560515,
                               'A_8_3_1': 111.11671974231913, 'D_8_3_1_7': 120.4365176065243,
                               'R_9_4': 0.972193259231641, 'A_9_4_3': 106.5895030627396,
                               'D_9_4_3_1': 310.94886913928315, 'RX_2|5_1|0': 1.0, 'AX_2|3|5|6_1|1|0|0_0|2|1|5': 90.0,
                               'DX_3|5|6_1|0|0_2|1|5_0|4|1': 180.0},
                      'map': {0: 0, 1: 1, 2: 'X8', 3: 2, 4: 3, 5: 'X9', 6: 4, 7: 5, 8: 6, 9: 7}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        # test a long linear molecule with different edges, keeping the torsion across multiple  linear "pivotal" atoms
        z = zmat.xyz_to_zmat(self.linear_o_s, mol=ARCSpecies(label='linear_o_s', xyz=self.linear_o_s,
                                                             smiles='OC#CC#CC#CS').mol)
        expected_z = {'symbols': ('O', 'C', 'X', 'C', 'X', 'C', 'X', 'C', 'X', 'C', 'X', 'C', 'X', 'S', 'H', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None),
                                 ('RX_2|4|6|8|10|12_1|3|5|7|9|11', 'AX_2|3|4|5|6|7|8|9|10|11|12|13_1|1|3|3|5|5|7|7|9|9|11|11_0|2|1|4|3|6|5|8|7|10|9|12', None),
                                 ('R_3|7_1|5', 'AX_2|3|4|5|6|7|8|9|10|11|12|13_1|1|3|3|5|5|7|7|9|9|11|11_0|2|1|4|3|6|5|8|7|10|9|12',
                                  'DX_3|4|5|6|7|8|9|10|11|12|13_1|3|3|5|5|7|7|9|9|11|11_2|1|4|3|6|5|8|7|10|9|12_0|2|1|4|3|6|5|8|7|10|9'),
                                 ('RX_2|4|6|8|10|12_1|3|5|7|9|11', 'AX_2|3|4|5|6|7|8|9|10|11|12|13_1|1|3|3|5|5|7|7|9|9|11|11_0|2|1|4|3|6|5|8|7|10|9|12',
                                  'DX_3|4|5|6|7|8|9|10|11|12|13_1|3|3|5|5|7|7|9|9|11|11_2|1|4|3|6|5|8|7|10|9|12_0|2|1|4|3|6|5|8|7|10|9'),
                                 ('R_5|9_3|7', 'AX_2|3|4|5|6|7|8|9|10|11|12|13_1|1|3|3|5|5|7|7|9|9|11|11_0|2|1|4|3|6|5|8|7|10|9|12',
                                  'DX_3|4|5|6|7|8|9|10|11|12|13_1|3|3|5|5|7|7|9|9|11|11_2|1|4|3|6|5|8|7|10|9|12_0|2|1|4|3|6|5|8|7|10|9'),
                                 ('RX_2|4|6|8|10|12_1|3|5|7|9|11', 'AX_2|3|4|5|6|7|8|9|10|11|12|13_1|1|3|3|5|5|7|7|9|9|11|11_0|2|1|4|3|6|5|8|7|10|9|12',
                                  'DX_3|4|5|6|7|8|9|10|11|12|13_1|3|3|5|5|7|7|9|9|11|11_2|1|4|3|6|5|8|7|10|9|12_0|2|1|4|3|6|5|8|7|10|9'),
                                 ('R_3|7_1|5', 'AX_2|3|4|5|6|7|8|9|10|11|12|13_1|1|3|3|5|5|7|7|9|9|11|11_0|2|1|4|3|6|5|8|7|10|9|12',
                                  'DX_3|4|5|6|7|8|9|10|11|12|13_1|3|3|5|5|7|7|9|9|11|11_2|1|4|3|6|5|8|7|10|9|12_0|2|1|4|3|6|5|8|7|10|9'),
                                 ('RX_2|4|6|8|10|12_1|3|5|7|9|11', 'AX_2|3|4|5|6|7|8|9|10|11|12|13_1|1|3|3|5|5|7|7|9|9|11|11_0|2|1|4|3|6|5|8|7|10|9|12',
                                  'DX_3|4|5|6|7|8|9|10|11|12|13_1|3|3|5|5|7|7|9|9|11|11_2|1|4|3|6|5|8|7|10|9|12_0|2|1|4|3|6|5|8|7|10|9'),
                                 ('R_5|9_3|7', 'AX_2|3|4|5|6|7|8|9|10|11|12|13_1|1|3|3|5|5|7|7|9|9|11|11_0|2|1|4|3|6|5|8|7|10|9|12',
                                  'DX_3|4|5|6|7|8|9|10|11|12|13_1|3|3|5|5|7|7|9|9|11|11_2|1|4|3|6|5|8|7|10|9|12_0|2|1|4|3|6|5|8|7|10|9'),
                                 ('RX_2|4|6|8|10|12_1|3|5|7|9|11', 'AX_2|3|4|5|6|7|8|9|10|11|12|13_1|1|3|3|5|5|7|7|9|9|11|11_0|2|1|4|3|6|5|8|7|10|9|12',
                                  'DX_3|4|5|6|7|8|9|10|11|12|13_1|3|3|5|5|7|7|9|9|11|11_2|1|4|3|6|5|8|7|10|9|12_0|2|1|4|3|6|5|8|7|10|9'),
                                 ('R_11_9', 'AX_2|3|4|5|6|7|8|9|10|11|12|13_1|1|3|3|5|5|7|7|9|9|11|11_0|2|1|4|3|6|5|8|7|10|9|12',
                                  'DX_3|4|5|6|7|8|9|10|11|12|13_1|3|3|5|5|7|7|9|9|11|11_2|1|4|3|6|5|8|7|10|9|12_0|2|1|4|3|6|5|8|7|10|9'),
                                 ('RX_2|4|6|8|10|12_1|3|5|7|9|11', 'AX_2|3|4|5|6|7|8|9|10|11|12|13_1|1|3|3|5|5|7|7|9|9|11|11_0|2|1|4|3|6|5|8|7|10|9|12',
                                  'DX_3|4|5|6|7|8|9|10|11|12|13_1|3|3|5|5|7|7|9|9|11|11_2|1|4|3|6|5|8|7|10|9|12_0|2|1|4|3|6|5|8|7|10|9'),
                                 ('R_13_11', 'AX_2|3|4|5|6|7|8|9|10|11|12|13_1|1|3|3|5|5|7|7|9|9|11|11_0|2|1|4|3|6|5|8|7|10|9|12',
                                  'DX_3|4|5|6|7|8|9|10|11|12|13_1|3|3|5|5|7|7|9|9|11|11_2|1|4|3|6|5|8|7|10|9|12_0|2|1|4|3|6|5|8|7|10|9'),
                                 ('R_14_0', 'A_14_0_1', 'DX_14_0_1_12'), ('R_15_13', 'A_15_13_11', 'D_15_13_11_14')),
                      'vars': {'R_1_0': 1.3280952001482191, 'R_11_9': 1.1999728537508982, 'R_13_11': 1.689800107747744,
                               'R_14_0': 0.9721366076390169, 'A_14_0_1': 110.47038205347816,
                               'DX_14_0_1_12': 23.38932439442073, 'R_15_13': 1.3410220734118692,
                               'A_15_13_11': 97.88723623341478, 'D_15_13_11_14': 179.99850519058072,
                               'RX_2|4|6|8|10|12_1|3|5|7|9|11': 1.0, 'R_3|7_1|5': 1.2000592040351243,
                               'R_5|9_3|7': 1.5398025274560583,
                               'AX_2|3|4|5|6|7|8|9|10|11|12|13_1|1|3|3|5|5|7|7|9|9|11|11_0|2|1|4|3|6|5|8|7|10|9|12': 90.0,
                               'DX_3|4|5|6|7|8|9|10|11|12|13_1|3|3|5|5|7|7|9|9|11|11_2|1|4|3|6|5|8|7|10|9|12_0|2|1|4|3|6|5|8|7|10|9': 180.0},
                      'map': {0: 0, 1: 1, 2: 'X10', 3: 2, 4: 'X11', 5: 3, 6: 'X12', 7: 4, 8: 'X13', 9: 5, 10: 'X14',
                              11: 6, 12: 'X15', 13: 7, 14: 8, 15: 9}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        # test c4linear
        z = zmat.xyz_to_zmat(self.c4linear, mol=ARCSpecies(label='c4linear', xyz=self.c4linear,
                                                           smiles='C#CC#CC(C#N)(C#CC#N)(C#C)').mol, consolidate=True)
        expected_z = {'symbols': ('C', 'C', 'X', 'C', 'X', 'C', 'X', 'C', 'C', 'C', 'C', 'X', 'C', 'X', 'C', 'X',
                                  'N', 'X', 'C', 'X', 'N', 'X', 'H', 'X', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None),
                                 ('RX_2|4|6|11|13|15|17|19|21|23_1|3|5|8|9|10|14|18|0|12',
                                  'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23', None),
                                 ('R_3_1', 'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23',
                                  'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8'),
                                 ('RX_2|4|6|11|13|15|17|19|21|23_1|3|5|8|9|10|14|18|0|12',
                                  'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23',
                                  'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8'),
                                 ('R_5_3', 'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23',
                                  'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8'),
                                 ('RX_2|4|6|11|13|15|17|19|21|23_1|3|5|8|9|10|14|18|0|12',
                                  'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23',
                                  'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8'),
                                 ('R_7_5', 'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23',
                                  'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8'),
                                 ('R_8_7', 'A_8_7_5', 'DX_8_7_5_6'), ('R_9_7', 'A_9_7_8', 'D_9_7_8_5'), ('R_10_7', 'A_10_7_8', 'D_10_7_8_9'),
                                 ('RX_2|4|6|11|13|15|17|19|21|23_1|3|5|8|9|10|14|18|0|12',
                                  'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23',
                                  'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8'),
                                 ('R_12_8', 'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23',
                                  'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8'),
                                 ('RX_2|4|6|11|13|15|17|19|21|23_1|3|5|8|9|10|14|18|0|12',
                                  'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23',
                                  'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8'),
                                 ('R_14_9', 'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23',
                                  'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8'),
                                 ('RX_2|4|6|11|13|15|17|19|21|23_1|3|5|8|9|10|14|18|0|12',
                                  'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23',
                                  'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8'),
                                 ('R_16_10', 'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23',
                                  'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8'),
                                 ('RX_2|4|6|11|13|15|17|19|21|23_1|3|5|8|9|10|14|18|0|12',
                                  'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23',
                                  'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8'),
                                 ('R_18_14', 'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23',
                                  'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8'),
                                 ('RX_2|4|6|11|13|15|17|19|21|23_1|3|5|8|9|10|14|18|0|12',
                                  'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23',
                                  'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8'),
                                 ('R_20_18', 'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23',
                                  'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8'),
                                 ('RX_2|4|6|11|13|15|17|19|21|23_1|3|5|8|9|10|14|18|0|12',
                                  'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23',
                                  'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8'),
                                 ('R_22_0', 'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23',
                                  'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8'),
                                 ('RX_2|4|6|11|13|15|17|19|21|23_1|3|5|8|9|10|14|18|0|12',
                                  'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23',
                                  'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8'),
                                 ('R_24_12', 'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23',
                                  'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8')),
                      'vars': {'R_1_0': 1.1999039571792685, 'R_3_1': 1.5391607882489502, 'R_5_3': 1.2011795167757426,
                               'R_7_5': 1.4856303478204094, 'R_8_7': 1.4911911119343528, 'A_8_7_5': 109.24950793229806,
                               'DX_8_7_5_6': 239.31503477724704, 'R_9_7': 1.4877170885176823,
                               'A_9_7_8': 108.95503453082839, 'D_9_7_8_5': 119.04109342737685,
                               'R_10_7': 1.492238308505903, 'A_10_7_8': 109.92214660728605,
                               'D_10_7_8_9': 120.28320147006615, 'R_12_8': 1.2025727329741667,
                               'R_14_9': 1.2021314308333242, 'R_16_10': 1.163467101346326,
                               'R_18_14': 1.5434007257257911, 'R_20_18': 1.1596959289392486,
                               'R_22_0': 1.0651380662567689, 'R_24_12': 1.0666558389312817,
                               'RX_2|4|6|11|13|15|17|19|21|23_1|3|5|8|9|10|14|18|0|12': 1.0,
                               'AX_2|3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_0|2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23': 90.0,
                               'DX_3|4|5|6|7|11|12|13|14|15|16|17|18|19|20|21|22|23|24_1|3|3|5|5|8|8|9|9|10|10|14|14|18|18|0|0|12|12_2|1|4|3|6|7|11|7|13|7|15|9|17|14|19|1|21|8|23_0|2|1|4|3|10|7|8|7|8|7|16|9|16|14|20|1|22|8': 180.0},
                      'map': {0: 0, 1: 1, 2: 'X15', 3: 2, 4: 'X16', 5: 3, 6: 'X17', 7: 4, 8: 11, 9: 7, 10: 5, 11: 'X18',
                              12: 12, 13: 'X19', 14: 8, 15: 'X20', 16: 6, 17: 'X21', 18: 9, 19: 'X22', 20: 10,
                              21: 'X23', 22: 13, 23: 'X24', 24: 14}}
        self.assertTrue(zmat._compare_zmats(zmat.consolidate_zmat(z), expected_z, verbose=True))

        # test an API (CJ-11974)
        z = zmat.xyz_to_zmat(self.cj, mol=ARCSpecies(
            label='CJ', xyz=self.cj,
            smiles='COC1=C(CN[C@H]2C3CCN(CC3)[C@H]2C(C2=CC=CC=C2)C2=CC=CC=C2)C=C(C=C1)C(C)C').mol, consolidate=True)
        expected_z = {'symbols': ('C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
                                  'C', 'C', 'N', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
                                  'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
                                  'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
                                  'H', 'H', 'H', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                 ('R_3_2', 'A_3_2_1', 'D_3_2_1_0'), ('R_4_2', 'A_4_2_3', 'D_4_2_3_1'),
                                 ('R_5_3', 'A_5_3_2', 'D_5_3_2_4'), ('R_6_4', 'A_6_4_2', 'D_6_4_2_3'),
                                 ('R_7_4', 'A_7_4_6', 'D_7_4_6_5'), ('R_8_5', 'A_8_5_3', 'D_8_5_3_7'),
                                 ('R_9_7', 'A_9_7_4', 'D_9_7_4_6'), ('R_10_8', 'A_10_8_5', 'D_10_8_5_3'),
                                 ('R_11_9', 'A_11_9_7', 'D_11_9_7_4'), ('R_12|13_10|10', 'A_12_10_8', 'D_12_10_8_5'),
                                 ('R_12|13_10|10', 'A_13_10_12', 'D_13_10_12_11'),
                                 ('R_14_11', 'A_14_11_9', 'D_14_11_9_7'), ('R_15_11', 'A_15_11_14', 'D_15_11_14_13'),
                                 ('R_16_14', 'A_16_14_11', 'D_16_14_11_15'), ('R_17_14', 'A_17_14_16', 'D_17_14_16_15'),
                                 ('R_18_15', 'A_18_15_11', 'D_18_15_11_14'), ('R_19_15', 'A_19_15_18', 'D_19_15_18_17'),
                                 ('R_20_16', 'A_20_16_14', 'D_20_16_14_19'), ('R_21_17', 'A_21_17_14', 'D_21_17_14_16'),
                                 ('R_22_18', 'A_22_18_15', 'D_22_18_15_21'), ('R_23_18', 'A_23_18_22', 'D_23_18_22_21'),
                                 ('R_24_22', 'A_24_22_18', 'D_24_22_18_23'), ('R_25_22', 'A_25_22_24', 'D_25_22_24_23'),
                                 ('R_26_23', 'A_26_23_18', 'D_26_23_18_22'), ('R_27_23', 'A_27_23_26', 'D_27_23_26_25'),
                                 ('R_28|29_24|25', 'A_28_24_22', 'D_28_24_22_27'),
                                 ('R_28|29_24|25', 'A_29_25_22', 'D_29_25_22_24'),
                                 ('R_30_26', 'A_30_26_23', 'D_30_26_23_29'), ('R_31_27', 'A_31_27_23', 'D_31_27_23_26'),
                                 ('R_32_28', 'A_32_28_24', 'D_32_28_24_31'), ('R_33_30', 'A_33_30_26', 'D_33_30_26_32'),
                                 ('R_34_0', 'A_34_0_1', 'D_34_0_1_33'), ('R_35|36_0|0', 'A_35_0_1', 'D_35_0_1_34'),
                                 ('R_35|36_0|0', 'A_36_0_1', 'D_36_0_1_35'), ('R_37_3', 'A_37_3_5', 'D_37_3_5_36'),
                                 ('R_38_5', 'A_38_5_3', 'D_38_5_3_37'),
                                 ('R_39|62|63_6|33|31', 'A_39|61_6|30_8|33', 'D_39_6_8_5'),
                                 ('R_40_7', 'A_40_7_4', 'D_40_7_4_6'), ('R_41|45_7|16', 'A_41_7_4', 'D_41_7_4_6'),
                                 ('R_42_9', 'A_42_9_7', 'D_42_9_7_4'), ('R_43_11', 'A_43_11_14', 'D_43_11_14_16'),
                                 ('R_44|69_14|13', 'A_44_14_16', 'D_44_14_16_20'),
                                 ('R_41|45_7|16', 'A_45_16_20', 'D_45_16_20_44'),
                                 ('R_46|67_16|12', 'A_46_16_20', 'D_46_16_20_45'),
                                 ('R_47_20', 'A_47_20_16', 'D_47_20_16_46'),
                                 ('R_48|71_20|13', 'A_48_20_16', 'D_48_20_16_47'),
                                 ('R_49_21', 'A_49_21_17', 'D_49_21_17_48'), ('R_50_21', 'A_50_21_17', 'D_50_21_17_49'),
                                 ('R_51_17', 'A_51_17_21', 'D_51_17_21_50'), ('R_52_17', 'A_52_17_21', 'D_52_17_21_51'),
                                 ('R_53_15', 'A_53_15_18', 'D_53_15_18_22'), ('R_54_18', 'A_54_18_22', 'D_54_18_22_24'),
                                 ('R_55|61_24|30', 'A_55_24_28', 'D_55_24_28_32'),
                                 ('R_56_28', 'A_56_28_32', 'D_56_28_32_55'), ('R_57_32', 'A_57_32_28', 'D_57_32_28_56'),
                                 ('R_58_29', 'A_58_29_32', 'D_58_29_32_28'), ('R_59_25', 'A_59_25_29', 'D_59_25_29_32'),
                                 ('R_60_26', 'A_60_26_30', 'D_60_26_30_33'),
                                 ('R_55|61_24|30', 'A_39|61_6|30_8|33', 'D_61_30_33_60'),
                                 ('R_39|62|63_6|33|31', 'A_62_33_30', 'D_62_33_30_61'),
                                 ('R_39|62|63_6|33|31', 'A_63_31_33', 'D_63_31_33_30'),
                                 ('R_64_27', 'A_64_27_31', 'D_64_27_31_33'), ('R_65_10', 'A_65_10_12', 'D_65_10_12_64'),
                                 ('R_66_12', 'A_66_12_10', 'D_66_12_10_65'),
                                 ('R_46|67_16|12', 'A_67_12_10', 'D_67_12_10_66'),
                                 ('R_68_12', 'A_68_12_10', 'D_68_12_10_67'),
                                 ('R_44|69_14|13', 'A_69_13_10', 'D_69_13_10_12'),
                                 ('R_70_13', 'A_70_13_10', 'D_70_13_10_12'),
                                 ('R_48|71_20|13', 'A_71_13_10', 'D_71_13_10_12')),
                      'vars': {'R_1_0': 1.4068711074782032, 'R_2_1': 1.3620388633039997, 'A_2_1_0': 117.81232558560784,
                               'R_3_2': 1.391372651128763, 'A_3_2_1': 124.30442082983046,
                               'D_3_2_1_0': 358.80053488528563, 'R_4_2': 1.407165314230306,
                               'A_4_2_3': 120.22693948333985, 'D_4_2_3_1': 179.7643774197255,
                               'R_5_3': 1.395461939277298, 'A_5_3_2': 119.73931773168835,
                               'D_5_3_2_4': 0.30910214744821457, 'R_6_4': 1.3877359017886286,
                               'A_6_4_2': 118.48974827202117, 'D_6_4_2_3': 359.11497147002314,
                               'R_7_4': 1.5088674382960545, 'A_7_4_6': 122.38406068272145,
                               'D_7_4_6_5': 180.25417879927906, 'R_8_5': 1.3900031510324233,
                               'A_8_5_3': 121.44469623059197, 'D_8_5_3_7': 0.5027472760190826,
                               'R_9_7': 1.4539199623473884, 'A_9_7_4': 112.21823538125288,
                               'D_9_7_4_6': 14.242037171848425, 'R_10_8': 1.5148894107856192,
                               'A_10_8_5': 121.17080095438938, 'D_10_8_5_3': 179.9597843354432,
                               'R_11_9': 1.458829940527558, 'A_11_9_7': 113.36650018284135,
                               'D_11_9_7_4': 173.834760621422, 'A_12_10_8': 111.64086954581774,
                               'D_12_10_8_5': 116.98497014249006, 'A_13_10_12': 110.85810373139734,
                               'D_13_10_12_11': 274.0460801662506, 'R_14_11': 1.5441580908685246,
                               'A_14_11_9': 110.96750832787642, 'D_14_11_9_7': 65.76967583715182,
                               'R_15_11': 1.5658713019482593, 'A_15_11_14': 106.10459226441324,
                               'D_15_11_14_13': 257.4049853604813, 'R_16_14': 1.5344969908783297,
                               'A_16_14_11': 108.8913587403986, 'D_16_14_11_15': 48.05688175736311,
                               'R_17_14': 1.5311976054044314, 'A_17_14_16': 108.49034048752937,
                               'D_17_14_16_15': 91.23995113317, 'R_18_15': 1.5451815033749894,
                               'A_18_15_11': 116.11845152538739, 'D_18_15_11_14': 146.22047073574328,
                               'R_19_15': 1.4673758226459452, 'A_19_15_18': 110.7852411579366,
                               'D_19_15_18_17': 62.01563663336134, 'R_20_16': 1.5497385358243323,
                               'A_20_16_14': 107.53566674813322, 'D_20_16_14_19': 351.2483905859404,
                               'R_21_17': 1.5462718519857788, 'A_21_17_14': 106.97932503747639,
                               'D_21_17_14_16': 293.048840478175, 'R_22_18': 1.5217756548342598,
                               'A_22_18_15': 110.6461222572256, 'D_22_18_15_21': 272.8016532613752,
                               'R_23_18': 1.5205844867168337, 'A_23_18_22': 110.88052896008966,
                               'D_23_18_22_21': 176.9274014626608, 'R_24_22': 1.3973414212027988,
                               'A_24_22_18': 121.46148754423552, 'D_24_22_18_23': 48.483057110257214,
                               'R_25_22': 1.3956596873816258, 'A_25_22_24': 118.32252922839507,
                               'D_25_22_24_23': 155.19218465708076, 'R_26_23': 1.3989838539838766,
                               'A_26_23_18': 123.40300309756425, 'D_26_23_18_22': 264.6937408441694,
                               'R_27_23': 1.4014860627797747, 'A_27_23_26': 117.86550410924565,
                               'D_27_23_26_25': 222.36333363654833, 'A_28_24_22': 120.88443385017754,
                               'D_28_24_22_27': 227.76707495071304, 'A_29_25_22': 121.04662788690233,
                               'D_29_25_22_24': 0.15222637990797427, 'R_30_26': 1.394073496683031,
                               'A_30_26_23': 120.95614937868622, 'D_30_26_23_29': 126.53572469389098,
                               'R_31_27': 1.3890980255767607, 'A_31_27_23': 121.36857503495831,
                               'D_31_27_23_26': 359.77985644401133, 'R_32_28': 1.3930402205740813,
                               'A_32_28_24': 120.23752381147851, 'D_32_28_24_31': 268.62324089632773,
                               'R_33_30': 1.390793650826528, 'A_33_30_26': 120.37525896699913,
                               'D_33_30_26_32': 66.57244008197594, 'R_34_0': 1.0911855880062449,
                               'A_34_0_1': 106.14081893106686, 'D_34_0_1_33': 259.90390819354144,
                               'A_35_0_1': 111.62128410536447, 'D_35_0_1_34': 241.16372138544352,
                               'A_36_0_1': 111.66742192220599, 'D_36_0_1_35': 237.70696149500208,
                               'R_37_3': 1.0848714961586419, 'A_37_3_5': 119.37285834333473,
                               'D_37_3_5_36': 62.67906989420941, 'R_38_5': 1.088518492286195,
                               'A_38_5_3': 118.92620006821393, 'D_38_5_3_37': 0.16155928445680842,
                               'D_39_6_8_5': 179.0306314544242, 'R_40_7': 1.1049040845091331,
                               'A_40_7_4': 108.86879068201986, 'D_40_7_4_6': 139.3906437684841,
                               'A_41_7_4': 108.59126141516668, 'D_41_7_4_6': 253.62050153797705,
                               'R_42_9': 1.0182559049694069, 'A_42_9_7': 107.11973040523138,
                               'D_42_9_7_4': 55.10057236176582, 'R_43_11': 1.107980039165429,
                               'A_43_11_14': 107.85441775901623, 'D_43_11_14_16': 291.70546551063177,
                               'A_44_14_16': 109.65746800014512, 'D_44_14_16_20': 171.72368834876247,
                               'A_45_16_20': 111.24450807891851, 'D_45_16_20_44': 233.89755520678503,
                               'A_46_16_20': 111.29692848764192, 'D_46_16_20_45': 241.0468305740966,
                               'R_47_20': 1.096849083662209, 'A_47_20_16': 111.09616229392863,
                               'D_47_20_16_46': 16.449617902450537, 'A_48_20_16': 111.52503768612455,
                               'D_48_20_16_47': 240.7618062149115, 'R_49_21': 1.0940959928126268,
                               'A_49_21_17': 110.13443680950392, 'D_49_21_17_48': 217.77189854569497,
                               'R_50_21': 1.096719688440126, 'A_50_21_17': 111.62985686445653,
                               'D_50_21_17_49': 241.05422281949743, 'R_51_17': 1.0977381339703496,
                               'A_51_17_21': 111.44776831381952, 'D_51_17_21_50': 15.528289052443741,
                               'R_52_17': 1.094598059892181, 'A_52_17_21': 110.53147774341073,
                               'D_52_17_21_51': 240.39865996976488, 'R_53_15': 1.0982909624400494,
                               'A_53_15_18': 106.429357164818, 'D_53_15_18_22': 61.470751869183154,
                               'R_54_18': 1.0970296462720617, 'A_54_18_22': 106.96777284646672,
                               'D_54_18_22_24': 164.41040442499542, 'A_55_24_28': 119.47619426431699,
                               'D_55_24_28_32': 181.48222884297238, 'R_56_28': 1.08730126242135,
                               'A_56_28_32': 120.0587532127532, 'D_56_28_32_55': 181.72714726324057,
                               'R_57_32': 1.086078113261693, 'A_57_32_28': 120.2651297728285,
                               'D_57_32_28_56': 0.1885577391117047, 'R_58_29': 1.0870685313396384,
                               'A_58_29_32': 120.07908990555488, 'D_58_29_32_28': 179.96387750780062,
                               'R_59_25': 1.0874930019811209, 'A_59_25_29': 119.67416329184535,
                               'D_59_25_29_32': 180.66442828925082, 'R_60_26': 1.086517453558622,
                               'A_60_26_30': 118.87966199467574, 'D_60_26_30_33': 180.36117265862282,
                               'D_61_30_33_60': 180.46795995787124, 'A_62_33_30': 120.34351414488708,
                               'D_62_33_30_61': 359.8441625328373, 'A_63_31_33': 120.1876734578171,
                               'D_63_31_33_30': 179.8727443598017, 'R_64_27': 1.0887706765139673,
                               'A_64_27_31': 119.71596042006831, 'D_64_27_31_33': 180.68549262930415,
                               'R_65_10': 1.0986729593359108, 'A_65_10_12': 107.51123289481629,
                               'D_65_10_12_64': 165.62060869603135, 'R_66_12': 1.0960386581877504,
                               'A_66_12_10': 110.99193387843255, 'D_66_12_10_65': 180.6436999847381,
                               'A_67_12_10': 110.90607858329234, 'D_67_12_10_66': 119.70065256970501,
                               'R_68_12': 1.0957071504841942, 'A_68_12_10': 111.15695171088588,
                               'D_68_12_10_67': 120.53155191727633, 'A_69_13_10': 111.13656189059795,
                               'D_69_13_10_12': 182.12620964839553, 'R_70_13': 1.0958250253360018,
                               'A_70_13_10': 111.10194518361305, 'D_70_13_10_12': 62.241824998638606,
                               'A_71_13_10': 110.8095963043876, 'D_71_13_10_12': 302.5342816974694,
                               'R_12|13_10|10': 1.5313937839809675, 'R_28|29_24|25': 1.3915166242825472,
                               'R_35|36_0|0': 1.0980711183126348, 'R_39|62|63_6|33|31': 1.0869053245812599,
                               'R_41|45_7|16': 1.0984625788982956, 'R_44|69_14|13': 1.0952809653577469,
                               'R_46|67_16|12': 1.096203285865352, 'R_48|71_20|13': 1.096367755118811,
                               'R_55|61_24|30': 1.0866606245254218, 'A_39|61_6|30_8|33': 120.08274154017411},
                      'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 7, 5: 4, 6: 6, 7: 8, 8: 5, 9: 9, 10: 31, 11: 10, 12: 32,
                              13: 33, 14: 11, 15: 17, 16: 12, 17: 16, 18: 18, 19: 14, 20: 13, 21: 15, 22: 19, 23: 25,
                              24: 20, 25: 24, 26: 26, 27: 30, 28: 21, 29: 23, 30: 27, 31: 29, 32: 22, 33: 28, 34: 34,
                              35: 35, 36: 36, 37: 37, 38: 38, 39: 39, 40: 40, 41: 41, 42: 42, 43: 43, 44: 44, 45: 45,
                              46: 46, 47: 47, 48: 48, 49: 49, 50: 50, 51: 51, 52: 52, 53: 53, 54: 54, 55: 55, 56: 56,
                              57: 57, 58: 58, 59: 59, 60: 60, 61: 61, 62: 62, 63: 63, 64: 64, 65: 65, 66: 66, 67: 67,
                              68: 68, 69: 69, 70: 70, 71: 71}}
        self.assertTrue(zmat._compare_zmats(zmat.consolidate_zmat(z), expected_z, verbose=True))

        # test methylamine with a dihedral constraint
        z = zmat.xyz_to_zmat(self.ch3nh2, mol=ARCSpecies(label='CH3NH2', xyz=self.ch3nh2, smiles='CN').mol,
                             consolidate=True, constraints={'D_group': [(2, 0, 1, 5)]})
        expected_z = {'symbols': ('H', 'N', 'C', 'H', 'H', 'H', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                 ('R_3_2', 'A_3_2_1', 'D_3_2_1_0'), ('R_4_2', 'A_4_2_1', 'D_4_2_1_3'),
                                 ('R_5_2', 'A_5_2_1', 'D_5_2_1_4'), ('R_6_1', 'A_6_1_2', 'D_6_1_2_5')),
                      'vars': {'R_1_0': 1.019169359544101, 'R_2_1': 1.451965854148702, 'A_2_1_0': 109.41187480598941,
                               'R_3_2': 1.0935188594180785, 'A_3_2_1': 110.20496026605478,
                               'D_3_2_1_0': 60.83821034525936, 'R_4_2': 1.0935188594180785,
                               'A_4_2_1': 110.20495933616156, 'D_4_2_1_3': 240.4644263689792,
                               'R_5_2': 1.0936965384360282, 'A_5_2_1': 110.59878027260544,
                               'D_5_2_1_4': 239.76779188408136, 'R_6_1': 1.0191693010605467,
                               'A_6_1_2': 109.41187816450345, 'D_6_1_2_5': 65.17113681053117},
                      'map': {0: 5, 1: 1, 2: 0, 3: 2, 4: 3, 5: 4, 6: 6}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        # test H2O2 with a dihedral constraint
        z = zmat.xyz_to_zmat(self.h2o2, mol=ARCSpecies(label='H2O2', xyz=self.h2o2, smiles='OO').mol,
                             consolidate=True, constraints={'D_group': [(2, 0, 1, 3)]})
        expected_z = {'symbols': ('H', 'O', 'O', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                 ('R_3_2', 'A_3_2_1', 'D_3_2_1_0')),
                      'vars': {'R_1_0': 0.9760734554285878, 'R_2_1': 1.4540504052031973, 'A_2_1_0': 96.77288218589983,
                               'R_3_2': 0.9760734554285878, 'A_3_2_1': 96.7728795665803,
                               'D_3_2_1_0': 129.36732759202636},
                      'map': {0: 3, 1: 1, 2: 0, 3: 2}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

        # test CH3CH2CHCH which ends with a linear angle
        z = zmat.xyz_to_zmat(self.ch3ch2chch, mol=ARCSpecies(label='ch3ch2chch', xyz=self.ch3ch2chch).mol,
                             consolidate=True)
        expected_z = {'symbols': ('C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'X', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                 ('R_3_2', 'A_3_2_1', 'D_3_2_1_0'), ('R_4|6_0|0', 'A_4_0_1', 'D_4_0_1_3'),
                                 ('R_5_0', 'A_5_0_1', 'D_5_0_1_4'), ('R_4|6_0|0', 'A_6_0_1', 'D_6_0_1_5'),
                                 ('R_7_1', 'A_7_1_0', 'D_7_1_0_6'), ('R_8_1', 'A_8_1_0', 'D_8_1_0_7'),
                                 ('R_9_2', 'A_9_2_3', 'D_9_2_3_8'),
                                 ('RX_10_3', 'AX_10|11_3|3_2|10', 'DX_10|11_3|3_2|10_9|2'),
                                 ('R_11_3', 'AX_10|11_3|3_2|10', 'DX_10|11_3|3_2|10_9|2')),
                      'vars': {'R_1_0': 1.5205904448785375, 'R_2_1': 1.4994993168955562, 'A_2_1_0': 111.50398014437032,
                               'R_3_2': 1.301756576228431, 'A_3_2_1': 124.83889031151999,
                               'D_3_2_1_0': 112.97355118636564, 'A_4_0_1': 111.24196342481002,
                               'D_4_0_1_3': 86.53954689818224, 'R_5_0': 1.0947204644120967,
                               'A_5_0_1': 110.19399847826887, 'D_5_0_1_4': 119.69569259467396,
                               'A_6_0_1': 111.1895808054264, 'D_6_0_1_5': 119.71370103779755,
                               'R_7_1': 1.0964682996092658, 'A_7_1_0': 109.37870745299638,
                               'D_7_1_0_6': 61.701853794334504, 'R_8_1': 1.0959547437317965,
                               'A_8_1_0': 109.40248561345942, 'D_8_1_0_7': 116.90465388363415,
                               'R_9_2': 1.086988859524881, 'A_9_2_3': 118.27555128814738,
                               'D_9_2_3_8': 215.62763589876084, 'RX_10_3': 1.0, 'R_11_3': 1.0663388968077427,
                               'R_4|6_0|0': 1.0953070047327769, 'AX_10|11_3|3_2|10': 90.0,
                               'DX_10|11_3|3_2|10_9|2': 180.0},
                      'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 'X11', 11: 10}}
        self.assertTrue(zmat._compare_zmats(z, expected_z, verbose=True))

    def test_zmat_to_coords(self):
        """Test the zmat_to_coords() function."""
        zmat1 = {'symbols': ('C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'X', 'O', 'O', 'C', 'C', 'H', 'H', 'H', 'H', 'H'),
                 'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_0', 'A_2_0_1', None),
                            ('R_3_0', 'A_3_0_1', 'D_3_0_1_2'), ('R_4_1', 'A_4_1_0', 'D_4_1_0_3'),
                            ('R_5_1', 'A_5_1_0', 'D_5_1_0_4'), ('R_6_1', 'A_6_1_0', 'D_6_1_0_5'),
                            ('R_7_0', 'A_7_0_1', 'D_7_0_1_6'), ('RX_8_7', 'AX_8_7_0', 'DX_8_7_0_1'),
                            ('R_9_7', 'A_9_7_8', 'D_9_7_8_0'), ('R_10_9', 'A_10_9_8', 'D_10_9_7_0'),
                            ('R_11_10', 'A_11_10_9', 'D_11_10_9_8'), ('R_12_11', 'A_12_11_10', 'D_12_11_10_9'),
                            ('R_13_12', 'A_13_12_11', 'D_13_12_11_10'), ('R_14_12', 'A_14_12_11', 'D_14_12_11_13'),
                            ('R_15_12', 'A_15_12_11', 'D_15_12_11_14'), ('R_16_11', 'A_16_11_12', 'D_16_11_12_15'),
                            ('R_17_11', 'A_17_11_12', 'D_17_11_12_16')),
                 'vars': {'R_1_0': 1.5120487296562577, 'R_2_0': 1.0940775789443724, 'A_2_0_1': 110.56801921096591,
                          'R_3_0': 1.0940817193677925, 'A_3_0_1': 110.56754686774481, 'D_3_0_1_2': 119.99910067703652,
                          'R_4_1': 1.0940725668318991, 'A_4_1_0': 110.56890700195424, 'D_4_1_0_3': 59.99971758419434,
                          'R_5_1': 1.0940840619688397, 'A_5_1_0': 110.56790845138725, 'D_5_1_0_4': 239.99905123159166,
                          'R_6_1': 1.0940817193677925, 'A_6_1_0': 110.56754686774481, 'D_6_1_0_5': 240.00122783407815,
                          'R_7_0': 1.3128870801982788, 'A_7_0_1': 110.56890700195424, 'D_7_0_1_6': 300.00028241580566,
                          'RX_8_7': 1.0, 'AX_8_7_0': 90.0, 'DX_8_7_0_1': 0, 'R_9_7': 1.1689469645782498, 'A_9_7_8': 270,
                          'D_9_7_8_0': 0, 'R_10_9': 1.4559254886404387, 'A_10_9_8': 96.30065819269021, 'D_10_9_7_0': 320,
                          'R_11_10': 1.4265728986680748, 'A_11_10_9': 105.58023544826183, 'D_11_10_9_8': 242.3527063196313,
                          'R_12_11': 1.5147479951212197, 'A_12_11_10': 108.63387152978416, 'D_12_11_10_9': 179.9922243050821,
                          'R_13_12': 1.0950205915944824, 'A_13_12_11': 110.62463321031589, 'D_13_12_11_10': 59.1268942923763,
                          'R_14_12': 1.093567969297245, 'A_14_12_11': 110.91425998596507, 'D_14_12_11_13': 120.87266977773987,
                          'R_15_12': 1.0950091062890002, 'A_15_12_11': 110.62270362433773, 'D_15_12_11_14': 120.87301274044218,
                          'R_16_11': 1.0951433842986755, 'A_16_11_12': 110.20822115119915, 'D_16_11_12_15': 181.16392677464265,
                          'R_17_11': 1.0951410439636102, 'A_17_11_12': 110.20143800025897, 'D_17_11_12_16': 239.4199964284852},
                 'map': {0: 0, 1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 2, 8: 'X8', 9: 12, 10: 11, 11: 10, 12: 9, 13: 13,
                         14: 14, 15: 15, 16: 16, 17: 17}}
        ordered_coords, ordered_symbols = zmat.zmat_to_coords(zmat=zmat1, keep_dummy=False)
        expected_ordered_coords = [(0.0, 0.0, 0.0), (0.0, 0.0, 1.5120487296562577),
                                   (-1.0645040218858757, -0.6146068827996437, -0.46126137097708747),
                                   (0.0, 1.0243364541978242, -0.38437036481785164),
                                   (0.8871155316940229, -0.512157825466657, -0.38436337480993366),
                                   (0.8870866549577128, 0.5121724542017935, 1.8964332054704973),
                                   (-5.933069423924575e-06, -1.0243432669860233, 1.8964193919074686),
                                   (-0.8871155017476918, 0.5121578773371006, 1.8964121044661915),
                                   (-3.057282799958524, 0.4716164099437675, -3.9577807354027383),
                                   (-3.1415471826438788, -0.1149906603042059, -2.5637745848892264),
                                   (-1.85742424554931, -0.6217060421343723, -2.204082995526117),
                                   (-2.012299734047888, -1.1618305251779666, -0.8719517400219541),
                                   (-2.739203398660456, -0.289471719214607, -4.677947695308563),
                                   (-4.025113512076681, 0.872306258817358, -4.271854391036923),
                                   (-2.3136079874219595, 1.274535046779022, -3.994035096204675),
                                   (-3.871932295381926, -0.9306597576029849, -2.5400987960833166),
                                   (-3.440082669618663, 0.6565731451487455, -1.8462094217817948)]
        expected_ordered_symbols = ['C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'C', 'C', 'O', 'O', 'H', 'H', 'H', 'H', 'H']
        for coords1, coords2 in zip(expected_ordered_coords, ordered_coords):
            for coord1, coord2 in zip(coords1, coords2):
                self.assertAlmostEqual(coord1, coord2)
        self.assertEqual(ordered_symbols, expected_ordered_symbols)

        ordered_symbols = zmat.zmat_to_coords(zmat=zmat1, keep_dummy=True)[1]
        expected_ordered_symbols = ['C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'X', 'C', 'C', 'O', 'O', 'H', 'H', 'H', 'H', 'H']
        self.assertEqual(ordered_symbols, expected_ordered_symbols)

    def test_consolidate_zmat(self):
        """Test consolidating a zmat"""
        # test consolidating CH4
        z = {'symbols': ('C', 'H', 'H', 'H', 'H'),
             'coords': ((None, None, None),
                        ('R_0_1', None, None),
                        ('R_0_2', 'A_0_1_2', None),
                        ('R_0_3', 'A_0_1_3', 'D_0_1_2_3'),
                        ('R_0_4', 'A_0_1_4', 'D_0_1_2_4')),
             'vars': {'A_0_1_2': 35.26438764560717,
                      'A_0_1_3': 35.26438764560717,
                      'A_0_1_4': 35.26438764560717,
                      'D_0_1_2_3': 324.73561031724535,
                      'D_0_1_2_4': 35.26438968275465,
                      'R_0_1': 1.0912484581271156,
                      'R_0_2': 1.0912484581271156,
                      'R_0_3': 1.0912484581271156,
                      'R_0_4': 1.0912484581271156},
             'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}}
        expected_z = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                      'coords': ((None, None, None),
                                 ('R_0|0|0|0_1|2|3|4', None, None),
                                 ('R_0|0|0|0_1|2|3|4', 'A_0|0|0_1|1|1_2|3|4', None),
                                 ('R_0|0|0|0_1|2|3|4', 'A_0|0|0_1|1|1_2|3|4', 'D_0_1_2_3'),
                                 ('R_0|0|0|0_1|2|3|4', 'A_0|0|0_1|1|1_2|3|4', 'D_0_1_2_4')),
                      'vars': {'A_0|0|0_1|1|1_2|3|4': 35.26438764560717,
                               'D_0_1_2_3': 324.73561031724535,
                               'D_0_1_2_4': 35.26438968275465,
                               'R_0|0|0|0_1|2|3|4': 1.0912484581271156},
                      'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}}
        self.assertTrue(zmat._compare_zmats(zmat.consolidate_zmat(z), expected_z, verbose=True))

        # test consolidating the same coordinates as CH4 with replaced symbols, expect different consolidation
        # note that the values of 'R_0|0_1|2' and 'R_0|0_3|4' are the same, but they represent different elements,
        # so they were not consolidated
        z = {'symbols': ('C', 'O', 'O', 'H', 'H'),
             'coords': ((None, None, None),
                        ('R_0_1', None, None),
                        ('R_0_2', 'A_0_1_2', None),
                        ('R_0_3', 'A_0_1_3', 'D_0_1_2_3'),
                        ('R_0_4', 'A_0_1_4', 'D_0_1_2_4')),
             'vars': {'A_0_1_2': 35.26438764560717,
                      'A_0_1_3': 35.26438764560717,
                      'A_0_1_4': 35.26438764560717,
                      'D_0_1_2_3': 324.73561031724535,
                      'D_0_1_2_4': 35.26438968275465,
                      'R_0_1': 1.0912484581271156,
                      'R_0_2': 1.0912484581271156,
                      'R_0_3': 1.0912484581271156,
                      'R_0_4': 1.0912484581271156},
             'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}}
        expected_z = {'symbols': ('C', 'O', 'O', 'H', 'H'),
                      'coords': ((None, None, None),
                                 ('R_0|0_1|2', None, None),
                                 ('R_0|0_1|2', 'A_0_1_2', None),
                                 ('R_0|0_3|4', 'A_0|0_1|1_3|4', 'D_0_1_2_3'),
                                 ('R_0|0_3|4', 'A_0|0_1|1_3|4', 'D_0_1_2_4')),
                      'vars': {'A_0_1_2': 35.26438764560717,
                               'A_0|0_1|1_3|4': 35.26438764560717,
                               'D_0_1_2_3': 324.73561031724535,
                               'D_0_1_2_4': 35.26438968275465,
                               'R_0|0_1|2': 1.0912484581271156,
                               'R_0|0_3|4': 1.0912484581271156},
                      'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}}
        self.assertTrue(zmat._compare_zmats(zmat.consolidate_zmat(z), expected_z, verbose=True))

        # test consolidation while specifying a molecule (consolidate by atom types)
        z = zmat.xyz_to_zmat(self.c6h8, mol=ARCSpecies(label='c6h8', xyz=self.c6h8, smiles='C=CC=C=CC=C').mol,
                             consolidate=True)
        expected_z = {'symbols': ('C', 'C', 'C', 'C', 'X', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                      'coords': ((None, None, None), ('R_1|7_0|6', None, None), ('R_2|6_1|5', 'A_2|7_1|6_0|5', None),
                                 ('R_3|5_2|3', 'A_3|6_2|5_1|3', 'D_3|7_2|6_1|5_0|3'),
                                 ('RX_4_3', 'AX_4|5_3|3_2|4', 'DX_4|5_3|3_2|4_1|2'),
                                 ('R_3|5_2|3', 'AX_4|5_3|3_2|4', 'DX_4|5_3|3_2|4_1|2'),
                                 ('R_2|6_1|5', 'A_3|6_2|5_1|3', 'D_6_5_3_1'),
                                 ('R_1|7_0|6', 'A_2|7_1|6_0|5', 'D_3|7_2|6_1|5_0|3'),
                                 ('R_8|11|12|15_0|2|5|7', 'A_8|15_0|7_1|6', 'D_8_0_1_7'),
                                 ('R_9|14_0|7', 'A_9|14_0|7_1|6', 'D_9_0_1_8'),
                                 ('R_10|13_1|6', 'A_10|13_1|6_0|7', 'D_10|14_1|7_0|6_9|13'),
                                 ('R_8|11|12|15_0|2|5|7', 'A_11|12_2|5_1|6', 'D_11|12_2|5_1|6_0|7'),
                                 ('R_8|11|12|15_0|2|5|7', 'A_11|12_2|5_1|6', 'D_11|12_2|5_1|6_0|7'),
                                 ('R_10|13_1|6', 'A_10|13_1|6_0|7', 'D_13_6_7_12'),
                                 ('R_9|14_0|7', 'A_9|14_0|7_1|6', 'D_10|14_1|7_0|6_9|13'),
                                 ('R_8|11|12|15_0|2|5|7', 'A_8|15_0|7_1|6', 'D_15_7_6_14')),
                      'vars': {'RX_4_3': 1.0, 'D_6_5_3_1': 78.69721089515058, 'D_8_0_1_7': 303.5079357762497,
                               'D_9_0_1_8': 179.99747417664557, 'D_13_6_7_12': 180.0829054665434,
                               'D_15_7_6_14': 180.00215607227028, 'R_1|7_0|6': 1.3381887062084776,
                               'R_2|6_1|5': 1.4407904325150618, 'R_3|5_2|3': 1.300657592944309,
                               'R_8|11|12|15_0|2|5|7': 1.0853633184695155, 'R_9|14_0|7': 1.085614135679024,
                               'R_10|13_1|6': 1.0886528591087101, 'A_2|7_1|6_0|5': 123.19585370239227,
                               'A_3|6_2|5_1|3': 121.52258770211841, 'AX_4|5_3|3_2|4': 90.0,
                               'A_8|15_0|7_1|6': 122.24044548570495, 'A_9|14_0|7_1|6': 120.4180765824349,
                               'A_10|13_1|6_0|7': 119.30818147722846, 'A_11|12_2|5_1|6': 119.14551997750254,
                               'D_3|7_2|6_1|5_0|3': 180.11338840380205, 'DX_4|5_3|3_2|4_1|2': 180.0,
                               'D_10|14_1|7_0|6_9|13': 0.011830716823514614, 'D_11|12_2|5_1|6_0|7': 359.8632362707074},
                      'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 'X15', 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 12: 11,
                              13: 12, 14: 13, 15: 14}}
        self.assertTrue(zmat._compare_zmats(zmat.consolidate_zmat(z), expected_z, verbose=True))

        # test consolidation while specifying a molecule (consolidate by atom types)
        # this is a special case where the consolidation algorithm finds two different lists to consolidate
        # that need to be combined: {'R': [['R_8_0', 'R_11_1'], ['R_10_0', 'R_11_1']], 'A': [], 'D': []}
        # this unit test tests a fix that was added to zmat.consolidate_zmat()
        z = zmat.xyz_to_zmat(self.chiral_chlorine, mol=ARCSpecies(label='CC(Cl)CC=C(C)O', xyz=self.chiral_chlorine,
                                                                  smiles='CC(Cl)CC=C(C)O').mol,
                             consolidate=True, consolidation_tols={'R': 1e-4, 'A': 1e-3, 'D': 1e-3})
        expected_z = {'symbols': ('C', 'C', 'C', 'Cl', 'C', 'C', 'C', 'O', 'H', 'H',
                                  'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                 ('R_3_1', 'A_3_1_0', 'D_3_1_0_2'), ('R_4_2', 'A_4_2_1', 'D_4_2_1_0'),
                                 ('R_5_4', 'A_5_4_2', 'D_5_4_2_3'), ('R_6_5', 'A_6_5_4', 'D_6_5_4_2'),
                                 ('R_7_5', 'A_7_5_6', 'D_7_5_6_4'), ('R_10|11|8_0|1|0', 'A_8_0_1', 'D_8_0_1_7'),
                                 ('R_9_0', 'A_9_0_1', 'D_9_0_1_8'), ('R_10|11|8_0|1|0', 'A_10_0_1', 'D_10_0_1_9'),
                                 ('R_10|11|8_0|1|0', 'A_11_1_0', 'D_11_1_0_10'), ('R_12_2', 'A_12_2_4', 'D_12_2_4_11'),
                                 ('R_13_2', 'A_13_2_4', 'D_13_2_4_12'), ('R_14_4', 'A_14_4_2', 'D_14_4_2_13'),
                                 ('R_15_6', 'A_15_6_5', 'D_15_6_5_14'), ('R_16_6', 'A_16_6_5', 'D_16_6_5_15'),
                                 ('R_17_6', 'A_17_6_5', 'D_17_6_5_16'), ('R_18_7', 'A_18_7_5', 'D_18_7_5_6')),
                      'vars': {'R_1_0': 1.5249258742530907, 'R_2_1': 1.5349655227019885, 'A_2_1_0': 113.35804766559443,
                               'R_3_1': 1.7949732792812656, 'A_3_1_0': 108.69820970872881,
                               'D_3_1_0_2': 238.58140623218165, 'R_4_2': 1.5046685206720583,
                               'A_4_2_1': 113.1476675124234, 'D_4_2_1_0': 64.1925371839694, 'R_5_4': 1.3398328063339966,
                               'A_5_4_2': 127.46425790971907, 'D_5_4_2_3': 92.36188710122968,
                               'R_6_5': 1.4995392250611346, 'A_6_5_4': 126.53235614503166,
                               'D_6_5_4_2': 357.86732187724334, 'R_7_5': 1.3842941363895465,
                               'A_7_5_6': 115.7596429871978, 'D_7_5_6_4': 178.97193706610062,
                               'A_8_0_1': 110.94148181448273, 'D_8_0_1_7': 224.19133512738014,
                               'R_9_0': 1.0946588282596843, 'A_9_0_1': 111.19877135686912,
                               'D_9_0_1_8': 119.17313044976572, 'A_10_0_1': 111.4444431100448,
                               'D_10_0_1_9': 120.47389634775507, 'A_11_1_0': 109.33348853531417,
                               'D_11_1_0_10': 180.2738936659158, 'R_12_2': 1.0980651745379046,
                               'A_12_2_4': 107.92159905568944, 'D_12_2_4_11': 146.07631446310236,
                               'R_13_2': 1.0962083165281145, 'A_13_2_4': 110.15589482867654,
                               'D_13_2_4_12': 114.51889837350653, 'R_14_4': 1.0899863201122852,
                               'A_14_4_2': 115.25890908817688, 'D_14_4_2_13': 154.61577830012698,
                               'R_15_6': 1.095214626058828, 'A_15_6_5': 109.98277451676329,
                               'D_15_6_5_14': 233.25192831208074, 'R_16_6': 1.0927175826319746,
                               'A_16_6_5': 113.1212506294942, 'D_16_6_5_15': 119.67765964473202,
                               'R_17_6': 1.094536798042433, 'A_17_6_5': 110.02023254774934,
                               'D_17_6_5_16': 121.11431588204312, 'R_18_7': 0.9730026669990081,
                               'A_18_7_5': 108.72679486149468, 'D_18_7_5_6': 3.1674670001151974,
                               'R_10|11|8_0|1|0': 1.0956084664750403},
                      'map': {0: 0, 1: 1, 2: 3, 3: 2, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12,
                              13: 13, 14: 14, 15: 15, 16: 16, 17: 17, 18: 18}}
        self.assertTrue(zmat._compare_zmats(zmat.consolidate_zmat(z), expected_z, verbose=True))

    def test_get_atom_indices_from_zmat_parameter(self):
        """Test attaining atom indices from the zmat string parameter"""
        param = 'R_0_1'
        indices = zmat.get_atom_indices_from_zmat_parameter(param)
        self.assertEqual(indices, ((0, 1),))

        param = 'A_0_1_2'
        indices = zmat.get_atom_indices_from_zmat_parameter(param)
        self.assertEqual(indices, ((0, 1, 2),))

        param = 'D_0_1_2_4'
        indices = zmat.get_atom_indices_from_zmat_parameter(param)
        self.assertEqual(indices, ((0, 1, 2, 4),))

        param = 'R_0|0|0|0_1|2|3|4'
        indices = zmat.get_atom_indices_from_zmat_parameter(param)
        self.assertEqual(indices, ((0, 1), (0, 2), (0, 3), (0, 4)))

        param = 'A_0|0|0_1|1|1_2|3|4'
        indices = zmat.get_atom_indices_from_zmat_parameter(param)
        self.assertEqual(indices, ((0, 1, 2), (0, 1, 3), (0, 1, 4)))

        param = 'D_0|0|0_1|1|1_2|3|4_5|6|9'
        indices = zmat.get_atom_indices_from_zmat_parameter(param)
        self.assertEqual(indices, ((0, 1, 2, 5), (0, 1, 3, 6), (0, 1, 4, 9)))

        param = 'RX_2_1'
        indices = zmat.get_atom_indices_from_zmat_parameter(param)
        self.assertEqual(indices, ((2, 1),))

        param = 'AX_2|3_1|1_0|2'
        indices = zmat.get_atom_indices_from_zmat_parameter(param)
        self.assertEqual(indices, ((2, 1, 0), (3, 1, 2)))

        param = 'DX_3|4|5|6|7|8|9_1|3|3|0|0|5|5_2|1|4|1|6|3|8_0|0|1|3|1|1|3'
        indices = zmat.get_atom_indices_from_zmat_parameter(param)
        self.assertEqual(indices, ((3, 1, 2, 0), (4, 3, 1, 0), (5, 3, 4, 1), (6, 0, 1, 3),
                                   (7, 0, 6, 1), (8, 5, 3, 1), (9, 5, 8, 3)))

    def test_get_parameter_from_atom_indices(self):
        """Test attaining the zmat parameter corresponding to the given indices"""
        z = {'symbols': ('C', 'C', 'C', 'C', 'X', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
             'coords': ((None, None, None), ('R_1|7_0|6', None, None), ('R_2|6_1|5', 'A_2|7_1|6_0|5', None),
                        ('R_3|5_2|3', 'A_3|6_2|5_1|3', 'D_3|7_2|6_1|5_0|3'),
                        ('RX_4_3', 'AX_4|5_3|3_2|4', 'DX_4_3_2_1'),
                        ('R_3|5_2|3', 'AX_4|5_3|3_2|4', 'DX_5_3_4_2'),
                        ('R_2|6_1|5', 'A_3|6_2|5_1|3', 'D_6_5_3_1'),
                        ('R_1|7_0|6', 'A_2|7_1|6_0|5', 'D_3|7_2|6_1|5_0|3'),
                        ('R_8|11|12|15_0|2|5|7', 'A_8|15_0|7_1|6', 'D_8_0_1_7'),
                        ('R_9|14_0|7', 'A_9|14_0|7_1|6', 'D_9_0_1_8'),
                        ('R_10|13_1|6', 'A_10|13_1|6_0|7', 'D_10|14_1|7_0|6_9|13'),
                        ('R_8|11|12|15_0|2|5|7', 'A_11|12_2|5_1|6', 'D_11|12_2|5_1|6_0|7'),
                        ('R_8|11|12|15_0|2|5|7', 'A_11|12_2|5_1|6', 'D_11|12_2|5_1|6_0|7'),
                        ('R_10|13_1|6', 'A_10|13_1|6_0|7', 'D_13_6_7_12'),
                        ('R_9|14_0|7', 'A_9|14_0|7_1|6', 'D_10|14_1|7_0|6_9|13'),
                        ('R_8|11|12|15_0|2|5|7', 'A_8|15_0|7_1|6', 'D_15_7_6_14')),
             'vars': {'RX_4_3': 1.0, 'DX_4_3_2_1': 219.28799421779138, 'DX_5_3_4_2': 180.0,
                      'D_6_5_3_1': 78.69721089515058, 'D_8_0_1_7': 303.5079357762497,
                      'D_9_0_1_8': 179.99747417664557, 'D_13_6_7_12': 180.0829054665434,
                      'D_15_7_6_14': 180.00215607227028, 'R_1|7_0|6': 1.3381887062084776,
                      'R_2|6_1|5': 1.4407904325150618, 'R_3|5_2|3': 1.3006576158575789,
                      'R_8|11|12|15_0|2|5|7': 1.0853633184695155, 'R_9|14_0|7': 1.0856141082269883,
                      'R_10|13_1|6': 1.0886528591087101, 'A_2|7_1|6_0|5': 123.19585370239227,
                      'A_3|6_2|5_1|3': 121.52258708303276, 'AX_4|5_3|3_2|4': 90.0,
                      'A_8|15_0|7_1|6': 122.24044548570495, 'A_9|14_0|7_1|6': 120.41807743308047,
                      'A_10|13_1|6_0|7': 119.30818147722846, 'A_11|12_2|5_1|6': 119.14551997750254,
                      'D_3|7_2|6_1|5_0|3': 180.11338840380205, 'D_10|14_1|7_0|6_9|13': 0.011830716823514614,
                      'D_11|12_2|5_1|6_0|7': 359.8632362707074},
             'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 'X15', 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 12: 11,
                     13: 12, 14: 13, 15: 14}}

        indices = [4, 3]
        param = zmat.get_parameter_from_atom_indices(zmat=z, indices=indices, xyz_indexed=False)
        self.assertEqual(param, 'RX_4_3')

        indices = [3, 2]
        param = zmat.get_parameter_from_atom_indices(zmat=z, indices=indices, xyz_indexed=False)
        self.assertEqual(param, 'R_3|5_2|3')

        indices = [7, 6]
        param = zmat.get_parameter_from_atom_indices(zmat=z, indices=indices, xyz_indexed=False)
        self.assertEqual(param, 'R_1|7_0|6')

        indices = [6, 5]
        param = zmat.get_parameter_from_atom_indices(zmat=z, indices=indices, xyz_indexed=True)
        self.assertEqual(param, 'R_1|7_0|6')

        indices = [13, 6, 7]
        param = zmat.get_parameter_from_atom_indices(zmat=z, indices=indices, xyz_indexed=False)
        self.assertEqual(param, 'A_10|13_1|6_0|7')

        indices = [10, 1, 0, 9]
        param = zmat.get_parameter_from_atom_indices(zmat=z, indices=indices, xyz_indexed=False)
        self.assertEqual(param, 'D_10|14_1|7_0|6_9|13')

        with self.assertRaises(ZMatError):
            indices = [3, 4]
            zmat.get_parameter_from_atom_indices(zmat=z, indices=indices, xyz_indexed=False)

    def test_is_dummy(self):
        """Test identifying a dummy atom in a zmat"""
        z = {'symbols': ('O', 'C', 'X', 'O'),
             'coords': ((None, None, None),
                        ('R_1|3_0|1', None, None),
                        ('RX_2_1', 'AX_2|3_1|1_0|2', None),
                        ('R_1|3_0|1', 'AX_2|3_1|1_0|2', 'DX_3_1_2_0')),
             'vars': {'RX_2_1': 1.0, 'DX_3_1_2_0': 180.0, 'R_1|3_0|1': 1.404999961513641,
                      'AX_2|3_1|1_0|2': 90.0},
             'map': {0: 0, 1: 1, 2: 'X', 3: 2}}
        self.assertTrue(zmat.is_dummy(z, zmat_index=2))
        self.assertFalse(zmat.is_dummy(z, zmat_index=3))

    def test_compare_zmats(self):
        """Test zmats comparison"""
        # a simple case of two identical H2 zmats
        zmat1 = {'symbols': ('H', 'H'),
                 'coords': ((None, None, None),
                            ('R_1_0', None, None)),
                 'vars': {'R_1_0': 0.6956932439857395},
                 'map': {0: 0, 1: 1}}
        zmat2 = {'symbols': ('H', 'H'),
                 'coords': ((None, None, None),
                            ('R_1_0', None, None)),
                 'vars': {'R_1_0': 0.6956932439857395},
                 'map': {0: 0, 1: 1}}
        self.assertTrue(zmat._compare_zmats(zmat1, zmat2))

        # two identical complex zmats
        zmat1 = {'symbols': ('C', 'C', 'X', 'C', 'O', 'X', 'H', 'H', 'H', 'H'),
                 'coords': ((None, None, None), ('R_1_0', None, None),
                            ('RX_2|5_1|0', 'AX_2|3|5|6_1|1|0|0_0|2|3|5', None),
                            ('R_3_1', 'AX_2|3|5|6_1|1|0|0_0|2|3|5', 'DX_3|6_1|0_2|5_0|3'),
                            ('R_4_3', 'A_4_3_1', 'D_4_3_1_0'),
                            ('RX_2|5_1|0', 'AX_2|3|5|6_1|1|0|0_0|2|3|5', 'DX_5_0_3_1'),
                            ('R_6_0', 'AX_2|3|5|6_1|1|0|0_0|2|3|5', 'DX_3|6_1|0_2|5_0|3'),
                            ('R_7_3', 'A_7_3_1', 'D_7_3_1_0'), ('R_8_3', 'A_8_3_1', 'D_8_3_1_0'),
                            ('R_9_4', 'A_9_4_3', 'D_9_4_3_1')),
                 'vars': {'R_1_0': 1.2011188774512602, 'R_3_1': 1.4641354895832899, 'R_4_3': 1.42064429038864,
                          'A_4_3_1': 109.93394953160829, 'D_4_3_1_0': 14.37755107434315,
                          'DX_5_0_3_1': 104.03861831648466, 'R_6_0': 1.0658290544612397,
                          'R_7_3': 1.093732452251813, 'A_7_3_1': 111.04025244627829,
                          'D_7_3_1_0': 133.9943034704063, 'R_8_3': 1.094109067560515,
                          'A_8_3_1': 111.11671974231913, 'D_8_3_1_0': 254.43082150809525,
                          'R_9_4': 0.972193259231641, 'A_9_4_3': 106.5895030627396,
                          'D_9_4_3_1': 310.94886913928315, 'RX_2|5_1|0': 1.0, 'AX_2|3|5|6_1|1|0|0_0|2|3|5': 90.0,
                          'DX_3|6_1|0_2|5_0|3': 180.0},
                 'map': {0: 0, 1: 1, 2: 'X', 3: 2, 4: 3, 5: 'X', 6: 4, 7: 5, 8: 6, 9: 7}}
        zmat2 = {'symbols': ('C', 'C', 'X', 'C', 'O', 'X', 'H', 'H', 'H', 'H'),
                 'coords': ((None, None, None), ('R_1_0', None, None),
                            ('RX_2|5_1|0', 'AX_2|3|5|6_1|1|0|0_0|2|3|5', None),
                            ('R_3_1', 'AX_2|3|5|6_1|1|0|0_0|2|3|5', 'DX_3|6_1|0_2|5_0|3'),
                            ('R_4_3', 'A_4_3_1', 'D_4_3_1_0'),
                            ('RX_2|5_1|0', 'AX_2|3|5|6_1|1|0|0_0|2|3|5', 'DX_5_0_3_1'),
                            ('R_6_0', 'AX_2|3|5|6_1|1|0|0_0|2|3|5', 'DX_3|6_1|0_2|5_0|3'),
                            ('R_7_3', 'A_7_3_1', 'D_7_3_1_0'), ('R_8_3', 'A_8_3_1', 'D_8_3_1_0'),
                            ('R_9_4', 'A_9_4_3', 'D_9_4_3_1')),
                 'vars': {'R_1_0': 1.2011188774512602, 'R_3_1': 1.4641354895832899, 'R_4_3': 1.42064429038864,
                          'A_4_3_1': 109.93394953160829, 'D_4_3_1_0': 14.37755107434315,
                          'DX_5_0_3_1': 104.03861831648466, 'R_6_0': 1.0658290544612397,
                          'R_7_3': 1.093732452251813, 'A_7_3_1': 111.04025244627829,
                          'D_7_3_1_0': 133.9943034704063, 'R_8_3': 1.094109067560515,
                          'A_8_3_1': 111.11671974231913, 'D_8_3_1_0': 254.43082150809525,
                          'R_9_4': 0.972193259231641, 'A_9_4_3': 106.5895030627396,
                          'D_9_4_3_1': 310.94886913928315, 'RX_2|5_1|0': 1.0, 'AX_2|3|5|6_1|1|0|0_0|2|3|5': 90.0,
                          'DX_3|6_1|0_2|5_0|3': 180.0},
                 'map': {0: 0, 1: 1, 2: 'X', 3: 2, 4: 3, 5: 'X', 6: 4, 7: 5, 8: 6, 9: 7}}
        self.assertTrue(zmat._compare_zmats(zmat1, zmat2))

        # non-identical zmats (H2 and the above complex zmat)
        zmat1 = {'symbols': ('H', 'H'),
                 'coords': ((None, None, None),
                            ('R_1_0', None, None)),
                 'vars': {'R_1_0': 0.6956932439857395},
                 'map': {0: 0, 1: 1}}
        self.assertFalse(zmat._compare_zmats(zmat1, zmat2))

        # a simple case of two H2 zmats that differ within the tolerance
        zmat1 = {'symbols': ('H', 'H'),
                 'coords': ((None, None, None),
                            ('R_1_0', None, None)),
                 'vars': {'R_1_0': 0.695693243},
                 'map': {0: 0, 1: 1}}
        zmat2 = {'symbols': ('H', 'H'),
                 'coords': ((None, None, None),
                            ('R_1_0', None, None)),
                 'vars': {'R_1_0': 0.6956932439857395},
                 'map': {0: 0, 1: 1}}
        self.assertTrue(zmat._compare_zmats(zmat1, zmat2))

        # two zmats that differ within the tolerance
        zmat1 = {'symbols': ('C', 'N', 'H', 'H', 'H', 'H', 'H'),
                 'coords': ((None, None, None),
                            ('R_1_0', None, None),
                            ('R_2|4_0|0', 'A_2|4_0|0_1|1', None),
                            ('R_3|6_1|1', 'A_3|6_1|1_0|0', 'D_3_1_0_2'),
                            ('R_2|4_0|0', 'A_2|4_0|0_1|1', 'D_4_0_1_3'),
                            ('R_5_0', 'A_5_0_1', 'D_5_0_1_3'),
                            ('R_3|6_1|1', 'A_3|6_1|1_0|0', 'D_6_1_0_2')),
                 'vars': {'R_1_0': 1.45192, 'D_3_1_0_2': 60.8385, 'A_5_0_1': 110.5980,
                          'D_4_0_1_3': 301.30263742432356, 'R_5_0': 1.0936965384360282,
                          'D_5_0_1_3': 181.07042674873242, 'D_6_1_0_2': 304.93892040705833,
                          'R_2|4_0|0': 1.0935188594180785, 'R_3|6_1|1': 1.019169330302324,
                          'A_2|4_0|0_1|1': 110.20495980110817, 'A_3|6_1|1_0|0': 109.41187648524644},
                 'map': {0: 0, 1: 1, 2: 2, 3: 5, 4: 3, 5: 4, 6: 6}}
        zmat2 = {'symbols': ('C', 'N', 'H', 'H', 'H', 'H', 'H'),
                 'coords': ((None, None, None),
                            ('R_1_0', None, None),
                            ('R_2|4_0|0', 'A_2|4_0|0_1|1', None),
                            ('R_3|6_1|1', 'A_3|6_1|1_0|0', 'D_3_1_0_2'),
                            ('R_2|4_0|0', 'A_2|4_0|0_1|1', 'D_4_0_1_3'),
                            ('R_5_0', 'A_5_0_1', 'D_5_0_1_3'),
                            ('R_3|6_1|1', 'A_3|6_1|1_0|0', 'D_6_1_0_2')),
                 'vars': {'R_1_0': 1.45196, 'D_3_1_0_2': 60.8382, 'A_5_0_1': 110.5987,
                          'D_4_0_1_3': 301.30263742432356, 'R_5_0': 1.0936965384360282,
                          'D_5_0_1_3': 181.07042674873242, 'D_6_1_0_2': 304.93892040705833,
                          'R_2|4_0|0': 1.0935188594180785, 'R_3|6_1|1': 1.019169330302324,
                          'A_2|4_0|0_1|1': 110.20495980110817, 'A_3|6_1|1_0|0': 109.41187648524644},
                 'map': {0: 0, 1: 1, 2: 2, 3: 5, 4: 3, 5: 4, 6: 6}}
        self.assertTrue(zmat._compare_zmats(zmat1, zmat2))

        # two zmats that differ beyond the tolerance
        zmat1 = {'symbols': ('C', 'N', 'H', 'H', 'H', 'H', 'H'),
                 'coords': ((None, None, None),
                            ('R_1_0', None, None),
                            ('R_2|4_0|0', 'A_2|4_0|0_1|1', None),
                            ('R_3|6_1|1', 'A_3|6_1|1_0|0', 'D_3_1_0_2'),
                            ('R_2|4_0|0', 'A_2|4_0|0_1|1', 'D_4_0_1_3'),
                            ('R_5_0', 'A_5_0_1', 'D_5_0_1_3'),
                            ('R_3|6_1|1', 'A_3|6_1|1_0|0', 'D_6_1_0_2')),
                 'vars': {'R_1_0': 1.45192, 'D_3_1_0_2': 60.8385, 'A_5_0_1': 110.5980,
                          'D_4_0_1_3': 301.30263742432356, 'R_5_0': 1.0936965384360282,
                          'D_5_0_1_3': 181.07042674873242, 'D_6_1_0_2': 304.93892040705833,
                          'R_2|4_0|0': 1.0935188594180785, 'R_3|6_1|1': 1.019169330302324,
                          'A_2|4_0|0_1|1': 110.20495980110817, 'A_3|6_1|1_0|0': 109.41187648524644},
                 'map': {0: 0, 1: 1, 2: 2, 3: 5, 4: 3, 5: 4, 6: 6}}
        zmat2 = {'symbols': ('C', 'N', 'H', 'H', 'H', 'H', 'H'),
                 'coords': ((None, None, None),
                            ('R_1_0', None, None),
                            ('R_2|4_0|0', 'A_2|4_0|0_1|1', None),
                            ('R_3|6_1|1', 'A_3|6_1|1_0|0', 'D_3_1_0_2'),
                            ('R_2|4_0|0', 'A_2|4_0|0_1|1', 'D_4_0_1_3'),
                            ('R_5_0', 'A_5_0_1', 'D_5_0_1_3'),
                            ('R_3|6_1|1', 'A_3|6_1|1_0|0', 'D_6_1_0_2')),
                 'vars': {'R_1_0': 1.47, 'D_3_1_0_2': 63.8, 'A_5_0_1': 110.5987,
                          'D_4_0_1_3': 301.30263742432356, 'R_5_0': 1.0936965384360282,
                          'D_5_0_1_3': 181.07042674873242, 'D_6_1_0_2': 304.93892040705833,
                          'R_2|4_0|0': 1.0935188594180785, 'R_3|6_1|1': 1.019169330302324,
                          'A_2|4_0|0_1|1': 110.20495980110817, 'A_3|6_1|1_0|0': 109.41187648524644},
                 'map': {0: 0, 1: 1, 2: 2, 3: 5, 4: 3, 5: 4, 6: 6}}
        self.assertFalse(zmat._compare_zmats(zmat1, zmat2))

    def test_get_all_neighbors(self):
        """Test getting the neighbors of an atom in a molecule"""
        mol = ARCSpecies(label='chiral_chlorine', xyz=self.chiral_chlorine).mol
        neighbors = zmat.get_all_neighbors(mol, 3)
        self.assertEqual(neighbors, [4, 1, 12, 13])

    def test_is_atom_in_new_fragment(self):
        """Test is_atom_in_new_fragment()"""
        fragments = [[46, 47, 48, 49, 50, 51, 52],
                     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
                      25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]]
        zmat1 = {'map': {0: 0, 1: 1, 2: 2, 3: 6, 4: 3, 5: 7, 6: 8, 7: 12, 8: 13, 9: 9, 10: 14, 11: 17, 12: 16, 13: 21,
                         14: 24, 15: 23, 16: 25, 17: 32, 18: 4, 19: 5, 20: 10, 21: 11, 22: 15, 23: 19, 24: 20, 25: 22,
                         26: 26, 27: 27, 28: 28, 29: 29, 30: 33, 31: 34, 32: 35, 33: 36, 34: 37, 35: 44, 36: 18, 37: 30,
                         38: 38, 39: 39, 40: 40, 41: 31, 42: 41, 43: 42, 44: 43}}
        self.assertTrue(zmat.is_atom_in_new_fragment(atom_index=46, zmat=zmat1, fragments=fragments))
        self.assertFalse(zmat.is_atom_in_new_fragment(atom_index=44, zmat=zmat1, fragments=fragments))

    def test_up_param(self):
        """Test bumping up a zmat parameter"""
        param = 'R_1_2'
        new_param = zmat.up_param(param, 3)
        self.assertEqual(new_param, 'R_4_5')

        param = 'A_1_2_9'
        new_param = zmat.up_param(param, 8)
        self.assertEqual(new_param, 'A_9_10_17')

        param = 'D_17_0_5_2'
        new_param = zmat.up_param(param, 3)
        self.assertEqual(new_param, 'D_20_3_8_5')

        param = 'DX_1_0_5_2'
        new_param = zmat.up_param(param, 1)
        self.assertEqual(new_param, 'DX_2_1_6_3')

        param = 'A_5_8_9'
        new_param = zmat.up_param(param, -3)
        self.assertEqual(new_param, 'A_2_5_6')

        param = 'A_5_8_9'
        new_param = zmat.up_param(param, increment_list=[2, 5, -1])
        self.assertEqual(new_param, 'A_7_13_8')

        with self.assertRaises(ZMatError):
            param = 'A_1_2_9'
            zmat.up_param(param, -18)

    def test_remove_1st_atom(self):
        """Test removing the first atom in a zmat."""
        zmat_1 = {'symbols': ('O',), 'coords': ((None, None, None),), 'vars': {}, 'map': {0: 0}}
        expected_zmat_1 = {'symbols': (), 'coords': (), 'vars': {}, 'map': {}}
        self.assertEqual(zmat.remove_1st_atom(zmat_1), expected_zmat_1)

        zmat_2 = {'symbols': ('H', 'H'),
                  'coords': ((None, None, None),
                             ('R_1_0', None, None)),
                  'vars': {'R_1_0': 0.6956932439857395},
                  'map': {0: 0, 1: 1}}
        expected_zmat_2 = {'symbols': ('H',), 'coords': ((None, None, None),),
                           'vars': {}, 'map': {0: 0}}
        self.assertEqual(zmat.remove_1st_atom(zmat_2), expected_zmat_2)

        zmat_3 = {'symbols': ('H', 'C', 'C', 'H', 'H', 'H', 'H', 'H'),
                  'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                             ('R_3_1', 'A_3_1_2', 'D_3_1_2_0'), ('R_4_1', 'A_4_1_2', 'D_4_1_2_3'),
                             ('R_5_2', 'A_5_2_1', 'D_5_2_1_4'), ('R_6_2', 'A_6_2_1', 'D_6_2_1_5'),
                             ('R_7_2', 'A_7_2_1', 'D_7_2_1_6')),
                  'vars': {'R_1_0': 1.0940775789443724, 'R_2_1': 1.5120487296562577,
                           'A_2_1_0': 110.56801921096591, 'R_3_1': 1.0940725668318991,
                           'A_3_1_2': 110.56890700195424, 'D_3_1_2_0': 239.99938309284212,
                           'R_4_1': 1.0940817193677925, 'A_4_1_2': 110.56754686774481,
                           'D_4_1_2_3': 239.9997190582892, 'R_5_2': 1.0940725668318991,
                           'A_5_2_1': 110.56890700195424, 'D_5_2_1_4': 59.99971758419434,
                           'R_6_2': 1.0940840619688397, 'A_6_2_1': 110.56790845138725,
                           'D_6_2_1_5': 239.99905123159166, 'R_7_2': 1.0940817193677925,
                           'A_7_2_1': 110.56754686774481, 'D_7_2_1_6': 240.00122783407815},
                  'map': {0: 3, 1: 0, 2: 1, 3: 2, 4: 4, 5: 5, 6: 6, 7: 7}}
        expected_zmat_3 = {'symbols': ('C', 'C', 'H', 'H', 'H', 'H', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_0', 'A_2_0_1', None),
                                      ('R_3_0', 'A_3_0_1', 'D_3_0_1_2'), ('R_4_1', 'A_4_1_0', 'D_4_1_0_3'),
                                      ('R_5_1', 'A_5_1_0', 'D_5_1_0_4'), ('R_6_1', 'A_6_1_0', 'D_6_1_0_5')),
                           'vars': {'R_1_0': 1.5120487296562577, 'R_2_0': 1.0940725668318991, 'A_2_0_1': 110.56890700195424,
                                    'R_3_0': 1.0940817193677925, 'A_3_0_1': 110.56754686774481, 'D_3_0_1_2': 239.9997190582892,
                                    'R_4_1': 1.0940725668318991, 'A_4_1_0': 110.56890700195424, 'D_4_1_0_3': 59.99971758419434,
                                    'R_5_1': 1.0940840619688397, 'A_5_1_0': 110.56790845138725, 'D_5_1_0_4': 239.99905123159166,
                                    'R_6_1': 1.0940817193677925, 'A_6_1_0': 110.56754686774481, 'D_6_1_0_5': 240.00122783407815},
                           'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6}}
        self.assertEqual(zmat.remove_1st_atom(zmat_3), expected_zmat_3)

        zmat_4 = {'symbols': ('H', 'C', 'C', 'C', 'X', 'C', 'X', 'C', 'X', 'H', 'H', 'X', 'H'),
                  'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                             ('R_3_1', 'A_3_1_2', 'D_3_1_2_0'), ('RX_4_2', 'AX_4_2_1', 'DX_4_2_1_3'),
                             ('R_5_2', 'AX_5_2_4', 'DX_5_2_4_1'), ('RX_6_3', 'AX_6_3_1', 'DX_6_3_1_2'),
                             ('R_7_3', 'AX_7_3_6', 'DX_7_3_6_1'), ('RX_8_5', 'AX_8_5_2', 'DX_8_5_2_7'),
                             ('R_9_5', 'AX_9_5_8', 'DX_9_5_8_2'), ('R_10_1', 'A_10_1_2', 'D_10_1_2_7'),
                             ('RX_11_7', 'AX_11_7_3', 'DX_11_7_3_2'), ('R_12_7', 'AX_12_7_11', 'DX_12_7_11_3')),
                  'vars': {'R_1_0': 1.3155122903491134, 'R_2_1': 1.4707410587114869, 'A_2_1_0': 109.22799244788278,
                           'R_3_1': 1.4707410587114869, 'A_3_1_2': 113.21235050581743, 'D_3_1_2_0': 121.94357782706227,
                           'RX_4_2': 1.0, 'AX_4_2_1': 90.0, 'DX_4_2_1_3': 180, 'R_5_2': 1.2013089233618282,
                           'AX_5_2_4': 90.0, 'DX_5_2_4_1': 180.0, 'RX_6_3': 1.0, 'AX_6_3_1': 90.0, 'DX_6_3_1_2': 180,
                           'R_7_3': 1.2013088241289895, 'AX_7_3_6': 90.0, 'DX_7_3_6_1': 180.0, 'RX_8_5': 1.0,
                           'AX_8_5_2': 90.0, 'DX_8_5_2_7': 180, 'R_9_5': 1.06567033240585, 'AX_9_5_8': 90.0,
                           'DX_9_5_8_2': 180.0, 'R_10_1': 1.0962601875867035, 'A_10_1_2': 109.22799322222649,
                           'D_10_1_2_7': 121.94358050468233, 'RX_11_7': 1.0, 'AX_11_7_3': 90.0, 'DX_11_7_3_2': 180,
                           'R_12_7': 1.0656705002006313, 'AX_12_7_11': 90.0, 'DX_12_7_11_3': 180.0},
                  'map': {0: 7, 1: 2, 2: 1, 3: 3, 4: 'X9', 5: 0, 6: 'X10', 7: 4, 8: 'X11', 9: 5, 10: 6, 11: 'X12', 12: 8}}
        expected_zmat_4 = {'symbols': ('C', 'C', 'C', 'X', 'C', 'X', 'C', 'X', 'H', 'H', 'X', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_0', 'A_2_0_1', None),
                                      ('RX_3_1', 'AX_3_1_0', 'DX_3_1_0_2'), ('R_4_1', 'AX_4_1_3', 'DX_4_1_3_0'),
                                      ('RX_5_2', 'AX_5_2_0', 'DX_5_2_0_1'), ('R_6_2', 'AX_6_2_5', 'DX_6_2_5_0'),
                                      ('RX_7_4', 'AX_7_4_1', 'DX_7_4_1_6'), ('R_8_4', 'AX_8_4_7', 'DX_8_4_7_1'),
                                      ('R_9_0', 'A_9_0_1', 'D_9_0_1_6'), ('RX_10_6', 'AX_10_6_2', 'DX_10_6_2_1'),
                                      ('R_11_6', 'AX_11_6_10', 'DX_11_6_10_2')),
                           'vars': {'R_1_0': 1.4707410587114869, 'R_2_0': 1.4707410587114869,
                                    'A_2_0_1': 113.21235050581743, 'RX_3_1': 1.0, 'AX_3_1_0': 90.0, 'DX_3_1_0_2': 180,
                                    'R_4_1': 1.2013089233618282, 'AX_4_1_3': 90.0, 'DX_4_1_3_0': 180.0, 'RX_5_2': 1.0,
                                    'AX_5_2_0': 90.0, 'DX_5_2_0_1': 180, 'R_6_2': 1.2013088241289895, 'AX_6_2_5': 90.0,
                                    'DX_6_2_5_0': 180.0, 'RX_7_4': 1.0, 'AX_7_4_1': 90.0, 'DX_7_4_1_6': 180,
                                    'R_8_4': 1.06567033240585, 'AX_8_4_7': 90.0, 'DX_8_4_7_1': 180.0,
                                    'R_9_0': 1.0962601875867035, 'A_9_0_1': 109.22799322222649,
                                    'D_9_0_1_6': 121.94358050468233, 'RX_10_6': 1.0, 'AX_10_6_2': 90.0,
                                    'DX_10_6_2_1': 180, 'R_11_6': 1.0656705002006313, 'AX_11_6_10': 90.0,
                                    'DX_11_6_10_2': 180.0},
                           'map': {0: 2, 1: 1, 2: 3, 3: 'X8', 4: 0, 5: 'X9', 6: 4, 7: 'X10', 8: 5, 9: 6, 10: 'X11', 11: 7}}
        self.assertEqual(zmat.remove_1st_atom(zmat_4), expected_zmat_4)

        # An example where one of the atoms in the zmat refers to the 1st atom that is being removed
        zmat_5 = {'symbols': ('H', 'C', 'H', 'H', 'H'),
                  'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                             ('R_3_1', 'A_3_1_2', 'D_3_1_2_0'), ('R_4_1', 'A_4_1_0', 'D_4_1_0_3')),
                  'vars': {'R_1_0': 1.3106392449517583, 'R_2_1': 1.0921994253661749, 'A_2_1_0': 109.47121834780573,
                           'R_3_1': 1.092199370793132, 'A_3_1_2': 109.47122048587586, 'D_3_1_2_0': 120.0000002999208,
                           'R_4_1': 1.0921994253661749, 'A_4_1_0': 109.47122150322166, 'D_4_1_0_3': 239.99999891956398},
                  'map': {0: 4, 1: 0, 2: 1, 3: 2, 4: 3}}
        expected_zmat_5 = {'symbols': ('C', 'H', 'H', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_0', 'A_2_0_1', None),
                                      ('R_3_0', 'A_3_0_1', 'D_3_0_1_2')),
                           'vars': {'R_1_0': 1.0921994253661749, 'R_2_0': 1.092199370793132, 'A_2_0_1': 109.47122048587586,
                                    'R_3_0': 1.0921994253661749, 'A_3_0_0': 109.47122150322166, 'D_3_0_0_2': 239.99999891956398,
                                    'A_3_0_1': 63.024513203726876, 'D_3_0_1_2': 287.0894016092067},
                           'map': {0: 0, 1: 1, 2: 2, 3: 3}}
        self.assertEqual(zmat.remove_1st_atom(zmat_5), expected_zmat_5)

    def test_remove_1st_atom_references(self):
        """Test the remove_1st_atom_references() function."""
        zmat_1 = {'symbols': ('H', 'C', 'C', 'H', 'H', 'H', 'H', 'H'),
                  'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                             ('R_3_1', 'A_3_1_2', 'D_3_1_2_0'), ('R_4_1', 'A_4_1_2', 'D_4_1_2_3'),
                             ('R_5_2', 'A_5_2_1', 'D_5_2_1_4'), ('R_6_2', 'A_6_2_1', 'D_6_2_1_5'),
                             ('R_7_2', 'A_7_2_1', 'D_7_2_1_6')),
                  'vars': {'R_1_0': 1.0940775789443724, 'R_2_1': 1.5120487296562577,
                           'A_2_1_0': 110.56801921096591, 'R_3_1': 1.0940725668318991,
                           'A_3_1_2': 110.56890700195424, 'D_3_1_2_0': 239.99938309284212,
                           'R_4_1': 1.0940817193677925, 'A_4_1_2': 110.56754686774481,
                           'D_4_1_2_3': 239.9997190582892, 'R_5_2': 1.0940725668318991,
                           'A_5_2_1': 110.56890700195424, 'D_5_2_1_4': 59.99971758419434,
                           'R_6_2': 1.0940840619688397, 'A_6_2_1': 110.56790845138725,
                           'D_6_2_1_5': 239.99905123159166, 'R_7_2': 1.0940817193677925,
                           'A_7_2_1': 110.56754686774481, 'D_7_2_1_6': 240.00122783407815},
                  'map': {0: 3, 1: 0, 2: 1, 3: 2, 4: 4, 5: 5, 6: 6, 7: 7}}
        self.assertEqual(zmat.remove_1st_atom_references(zmat_1), zmat_1)

        zmat_2 = {'symbols': ('H', 'C', 'H', 'H', 'H'),
                  'coords': ((None, None, None),
                             ('R_1_0', None, None),
                             ('R_2_1', 'A_2_1_0', None),
                             ('R_3_1', 'A_3_1_2', 'D_3_1_2_0'),
                             ('R_4_1', 'A_4_1_0', 'D_4_1_0_3')),
                  'vars': {'R_1_0': 1.3106392449517583, 'R_2_1': 1.0921994253661749, 'A_2_1_0': 109.47121834780573,
                           'R_3_1': 1.092199370793132, 'A_3_1_2': 109.47122048587586, 'D_3_1_2_0': 120.0000002999208,
                           'R_4_1': 1.0921994253661749, 'A_4_1_0': 109.47122150322166, 'D_4_1_0_3': 239.99999891956398},
                  'map': {0: 4, 1: 0, 2: 1, 3: 2, 4: 3}}
        expected_zmat_2 = {'symbols': ('H', 'C', 'H', 'H', 'H'),
                           'coords': ((None, None, None),
                                      ('R_1_0', None, None),
                                      ('R_2_1', 'A_2_1_0', None),
                                      ('R_3_1', 'A_3_1_2', 'D_3_1_2_0'),
                                      ('R_4_1', 'A_4_1_2', 'D_4_1_2_3')),
                           'vars': {'R_1_0': 1.3106392449517583, 'R_2_1': 1.0921994253661749,
                                    'A_2_1_0': 109.47121834780573, 'R_3_1': 1.092199370793132,
                                    'A_3_1_2': 109.47122048587586, 'D_3_1_2_0': 120.0000002999208,
                                    'R_4_1': 1.0921994253661749, 'A_4_1_0': 109.47122150322166,
                                    'D_4_1_0_3': 239.99999891956398, 'A_4_1_2': 63.024513203726876,
                                    'D_4_1_2_3': 287.0894016092067},
                           'map': {0: 4, 1: 0, 2: 1, 3: 2, 4: 3}}
        self.assertEqual(zmat.remove_1st_atom_references(zmat_2)['coords'], expected_zmat_2['coords'])
        self.assertEqual(list(zmat.remove_1st_atom_references(zmat_2)['vars'].keys()),
                         list(expected_zmat_2['vars'].keys()))

        zmat_3 = {'symbols': ('C', 'C', 'C', 'X', 'C', 'X', 'C', 'X', 'H', 'H', 'X', 'H'),
                  'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_0', 'A_2_0_1', None),
                             ('RX_3_1', 'AX_3_1_0', 'DX_3_1_0_2'), ('R_4_1', 'AX_4_1_3', 'DX_4_1_3_0'),
                             ('RX_5_2', 'AX_5_2_0', 'DX_5_2_0_1'), ('R_6_2', 'AX_6_2_5', 'DX_6_2_5_0'),
                             ('RX_7_4', 'AX_7_4_1', 'DX_7_4_1_6'), ('R_8_4', 'AX_8_4_7', 'DX_8_4_7_1'),
                             ('R_9_0', 'A_9_0_1', 'D_9_0_1_6'), ('RX_10_6', 'AX_10_6_2', 'DX_10_6_2_1'),
                             ('R_11_6', 'AX_11_6_10', 'DX_11_6_10_2')),
                  'vars': {'R_1_0': 1.4707410587114869, 'R_2_0': 1.4707410587114869,
                           'A_2_0_1': 113.21235050581743, 'RX_3_1': 1.0, 'AX_3_1_0': 90.0, 'DX_3_1_0_2': 180,
                           'R_4_1': 1.2013089233618282, 'AX_4_1_3': 90.0, 'DX_4_1_3_0': 180.0, 'RX_5_2': 1.0,
                           'AX_5_2_0': 90.0, 'DX_5_2_0_1': 180, 'R_6_2': 1.2013088241289895, 'AX_6_2_5': 90.0,
                           'DX_6_2_5_0': 180.0, 'RX_7_4': 1.0, 'AX_7_4_1': 90.0, 'DX_7_4_1_6': 180,
                           'R_8_4': 1.06567033240585, 'AX_8_4_7': 90.0, 'DX_8_4_7_1': 180.0,
                           'R_9_0': 1.0962601875867035, 'A_9_0_1': 109.22799322222649,
                           'D_9_0_1_6': 121.94358050468233, 'RX_10_6': 1.0, 'AX_10_6_2': 90.0,
                           'DX_10_6_2_1': 180, 'R_11_6': 1.0656705002006313, 'AX_11_6_10': 90.0,
                           'DX_11_6_10_2': 180.0},
                  'map': {0: 2, 1: 1, 2: 3, 3: 'X8', 4: 0, 5: 'X9', 6: 4, 7: 'X10', 8: 5, 9: 6, 10: 'X11', 11: 7}}
        expected_zmat_3 = {'symbols': ('C', 'C', 'C', 'X', 'C', 'X', 'C', 'X', 'H', 'H', 'X', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_0', 'A_2_0_1', None),
                                      ('RX_3_1', 'AX_3_1_0', 'DX_3_1_0_2'), ('R_4_1', 'AX_4_1_3', 'DX_4_1_3_2'),
                                      ('RX_5_2', 'AX_5_2_1', 'DX_5_2_3_1'), ('R_6_2', 'AX_6_2_5', 'DX_6_2_5_1'),
                                      ('RX_7_4', 'AX_7_4_1', 'DX_7_4_1_6'), ('R_8_4', 'AX_8_4_7', 'DX_8_4_7_1'),
                                      ('R_9_1', 'A_9_2_1', 'D_9_2_1_6'), ('RX_10_6', 'AX_10_6_2', 'DX_10_6_2_1'),
                                      ('R_11_6', 'AX_11_6_10', 'DX_11_6_10_2')),
                           'vars': {'R_1_0': 1.4707410587114869, 'R_2_0': 1.4707410587114869,
                                    'A_2_0_1': 113.21235050581743, 'RX_3_1': 1.0, 'AX_3_1_0': 90.0, 'DX_3_1_0_2': 180,
                                    'R_4_1': 1.2013089233618282, 'AX_4_1_3': 90.0, 'DX_4_1_3_0': 180.0, 'RX_5_2': 1.0,
                                    'AX_5_2_0': 90.0, 'DX_5_2_0_1': 180, 'R_6_2': 1.2013088241289895, 'AX_6_2_5': 90.0,
                                    'DX_6_2_5_0': 180.0, 'RX_7_4': 1.0, 'AX_7_4_1': 90.0, 'DX_7_4_1_6': 180,
                                    'R_8_4': 1.06567033240585, 'AX_8_4_7': 90.0, 'DX_8_4_7_1': 180.0,
                                    'R_9_0': 1.0962601875867035, 'A_9_0_1': 109.22799322222649,
                                    'D_9_0_1_6': 121.94358050468233, 'RX_10_6': 1.0, 'AX_10_6_2': 90.0,
                                    'DX_10_6_2_1': 180, 'R_11_6': 1.0656705002006313, 'AX_11_6_10': 90.0,
                                    'DX_11_6_10_2': 180.0, 'DX_4_1_3_2': 180.0, 'AX_5_2_1': 0.007619013216077339,
                                    'DX_5_2_3_1': 0.0, 'DX_6_2_5_1': 50.7276048578378, 'R_9_1': 3.12003863359643,
                                    'A_9_2_1': 147.4252799529316, 'D_9_2_1_6': 238.05641967369294},
                           'map': {0: 2, 1: 1, 2: 3, 3: 'X8', 4: 0, 5: 'X9', 6: 4, 7: 'X10', 8: 5, 9: 6, 10: 'X11', 11: 7}}
        self.assertEqual(zmat.remove_1st_atom_references(zmat_3)['coords'], expected_zmat_3['coords'])
        self.assertEqual(list(zmat.remove_1st_atom_references(zmat_3)['vars'].keys()),
                         list(expected_zmat_3['vars'].keys()))

    def test_map_index_to_int(self):
        """Test the map_index_to_int() function."""
        self.assertEqual(zmat.map_index_to_int(9), 9)
        self.assertEqual(zmat.map_index_to_int('X2'), 2)
        self.assertIsInstance(zmat.map_index_to_int('X13'), int)
        self.assertEqual(zmat.map_index_to_int('X5486'), 5486)
        with self.assertRaises(TypeError):
            zmat.map_index_to_int('XY5486')

if __name__ == '__main__':
    unittest.main(testRunner=unittest.TextTestRunner(verbosity=2))
