#!/usr/bin/env python3
# encoding: utf-8

"""
This module contains unit tests of the arc.species.converter module
"""
import os

import numpy as np
import unittest

from ase import Atoms
from rdkit import Chem
from rdkit.Chem import rdMolTransforms as rdMT, rdchem

from rmgpy.molecule.molecule import Molecule
from rmgpy.quantity import ArrayQuantity
from rmgpy.species import Species
from rmgpy.statmech import Conformer

import arc.species.converter as converter
from arc.common import ARC_PATH, almost_equal_coords_lists, almost_equal_lists
from arc.exceptions import ConverterError
from arc.species.species import ARCSpecies
from arc.species.vectors import calculate_dihedral_angle
from arc.species.zmat import _compare_zmats, xyz_to_zmat


class TestConverter(unittest.TestCase):
    """
    Contains unit tests for the converter module
    """
    @classmethod
    def setUpClass(cls):
        """
        A method that is run before all unit tests in this class.
        """
        cls.maxDiff = None

        cls.xyz1 = {'str': """C       0.00000000    0.00000000    0.00000000
H       0.63003260    0.63003260    0.63003260
H      -0.63003260   -0.63003260    0.63003260
H      -0.63003260    0.63003260   -0.63003260
H       0.63003260   -0.63003260   -0.63003260""",  # no line break at the end on purpose
                    'file': """5
test methane xyz conversion
C       0.00000000    0.00000000    0.00000000
H       0.63003260    0.63003260    0.63003260
H      -0.63003260   -0.63003260    0.63003260
H      -0.63003260    0.63003260   -0.63003260
H       0.63003260   -0.63003260   -0.63003260
""",
                    'dict': {'symbols': ('C', 'H', 'H', 'H', 'H'),
                             'isotopes': (12, 1, 1, 1, 1),
                             'coords': ((0.0, 0.0, 0.0),
                                        (0.6300326, 0.6300326, 0.6300326),
                                        (-0.6300326, -0.6300326, 0.6300326),
                                        (-0.6300326, 0.6300326, -0.6300326),
                                        (0.6300326, -0.6300326, -0.6300326))},
                    'dict_diff_order': {'symbols': ('H', 'C', 'H', 'H', 'H'),
                                        'isotopes': (1, 12, 1, 1, 1),
                                        'coords': ((0.6300326, 0.6300326, 0.6300326),
                                                   (0.0, 0.0, 0.0),
                                                   (-0.6300326, -0.6300326, 0.6300326),
                                                   (-0.6300326, 0.6300326, -0.6300326),
                                                   (0.6300326, -0.6300326, -0.6300326))},
                    'zmat_str': """  C
  H       1      R1
  H       2      R2       1      A1
  H       3      R2       1      A1       2      D1
  H       4      R2       1      A1       3      D2
Variables:
A1=35.2644
D1=120.0000
D2=240.0000
R1=1.0912
R2=1.7820""",
                    'consolidated_zmat': {'symbols': ('C', 'H', 'H', 'H', 'H'),
                                          'coords': ((None, None, None), ('R_1_0', None, None),
                                                     ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', None),
                                                     ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_3_2_0_1'),
                                                     ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_4_3_0_2')),
                                          'vars': {'R_1_0': 1.0912484581271156, 'D_3_2_0_1': 120.00000000000001,
                                                   'D_4_3_0_2': 239.99999999999997,
                                                   'R_2|3|4_1|2|3': 1.7820012700068855,
                                                   'A_2|3|4_1|2|3_0|0|0': 35.26438764560717},
                                          'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}},
                    'zmat': {'symbols': ('C', 'H', 'H', 'H', 'H'),
                             'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                        ('R_3_2', 'A_3_2_0', 'D_3_2_0_1'), ('R_4_3', 'A_4_3_0', 'D_4_3_0_2')),
                             'vars': {'R_1_0': 1.0912, 'R_2_1': 1.782, 'A_2_1_0': 35.2644, 'R_3_2': 1.782,
                                      'A_3_2_0': 35.2644, 'D_3_2_0_1': 120.0, 'R_4_3': 1.782, 'A_4_3_0': 35.2644,
                                      'D_4_3_0_2': 240.0}, 'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}},
                    'dmat': [[0., 1.09124847, 1.09124847, 1.09124847, 1.09124847],
                             [1.09124847, 0., 1.7820013, 1.7820013, 1.7820013],
                             [1.09124847, 1.7820013, 0., 1.7820013, 1.7820013],
                             [1.09124847, 1.7820013, 1.7820013, 0., 1.7820013],
                             [1.09124847, 1.7820013, 1.7820013, 1.7820013, 0.]],
                    }

        cls.xyz2 = {'str': """S       1.02558264   -0.04344404   -0.07343859
O      -0.25448248    1.10710477    0.18359696
N      -1.30762173    0.15796567   -0.10489290
C      -0.49011438   -1.03704380    0.15365747
H      -0.64869950   -1.85796321   -0.54773423
H      -0.60359153   -1.37304859    1.18613964
H      -1.43009127    0.23517346   -1.11797908


""",  # extra line breaks added on purpose
                    'file': """7
test xyz2
S       1.02558264   -0.04344404   -0.07343859
O      -0.25448248    1.10710477    0.18359696
N      -1.30762173    0.15796567   -0.10489290
C      -0.49011438   -1.03704380    0.15365747
H      -0.64869950   -1.85796321   -0.54773423
H      -0.60359153   -1.37304859    1.18613964
H      -1.43009127    0.23517346   -1.11797908
""",
                    'dict': {'symbols': ('S', 'O', 'N', 'C', 'H', 'H', 'H'),
                             'isotopes': (32, 16, 14, 12, 1, 1, 1),
                             'coords': ((1.02558264, -0.04344404, -0.07343859),
                                        (-0.25448248, 1.10710477, 0.18359696),
                                        (-1.30762173, 0.15796567, -0.1048929),
                                        (-0.49011438, -1.0370438, 0.15365747),
                                        (-0.6486995, -1.85796321, -0.54773423),
                                        (-0.60359153, -1.37304859, 1.18613964),
                                        (-1.43009127, 0.23517346, -1.11797908))},
                    'dmat': [[0., 1.74022888, 2.34209263, 1.82651322, 2.51409166, 2.45124337, 2.68310024],
                             [1.74022888, 0., 1.44678738, 2.1572649, 3.07926623, 2.69780089, 1.95867823],
                             [2.34209263, 1.44678738, 0., 1.47078693, 2.16662322, 2.12283495, 1.02337844],
                             [1.82651322, 2.1572649, 1.47078693, 0., 1.09133324, 1.09169397, 2.02956962],
                             [2.51409166, 3.07926623, 2.16662322, 1.09133324, 0., 1.80097071, 2.30585633],
                             [2.45124337, 2.69780089, 2.12283495, 1.09169397, 1.80097071, 0., 2.92889793],
                             [2.68310024, 1.95867823, 1.02337844, 2.02956962, 2.30585633, 2.92889793, 0.]],
                    }

        cls.xyz3 = {'str': """O          -0.25448248    1.10710477    0.18359696
N          -1.30762173    0.15796567   -0.10489290
C(Iso=13)  -0.49011438   -1.03704380    0.15365747
H(Iso=2)   -0.64869950   -1.85796321   -0.54773423
H          -0.60359153   -1.37304859    1.18613964
S           1.02558264   -0.04344404   -0.07343859
H          -1.43009127    0.23517346   -1.11797908
""",  # one line break at the end on purpose
                    'dict': {'symbols': ('O', 'N', 'C', 'H', 'H', 'S', 'H'),
                             'isotopes': (16, 14, 13, 2, 1, 32, 1),
                             'coords': ((-0.25448248, 1.10710477, 0.18359696),
                                        (-1.30762173, 0.15796567, -0.1048929),
                                        (-0.49011438, -1.0370438, 0.15365747),
                                        (-0.6486995, -1.85796321, -0.54773423),
                                        (-0.60359153, -1.37304859, 1.18613964),
                                        (1.02558264, -0.04344404, -0.07343859),
                                        (-1.43009127, 0.23517346, -1.11797908))},
                    'dmat': [[0., 1.44678738, 2.1572649, 3.07926623, 2.69780089, 1.74022888, 1.95867823],
                             [1.44678738, 0., 1.47078693, 2.16662322, 2.12283495, 2.34209263, 1.02337844],
                             [2.1572649, 1.47078693, 0., 1.09133324, 1.09169397, 1.82651322, 2.02956962],
                             [3.07926623, 2.16662322, 1.09133324, 0., 1.80097071, 2.51409166, 2.30585633],
                             [2.69780089, 2.12283495, 1.09169397, 1.80097071, 0., 2.45124337, 2.92889793],
                             [1.74022888, 2.34209263, 1.82651322, 2.51409166, 2.45124337, 0., 2.68310024],
                             [1.95867823, 1.02337844, 2.02956962, 2.30585633, 2.92889793, 2.68310024, 0.]],
                    }

        cls.xyz4 = {'str': """B 0.0000000 0.0000000 0.0000000
Br 0.0000000 1.9155570 0.0000000
Br 1.6589210 -0.9577780 0.0000000
Br -1.6589210	-0.9577780	0.0000000
""",  # last line contains tabs
                    'dict': {'symbols': ('B', 'Br', 'Br', 'Br'),
                             'isotopes': (11, 79, 79, 79),
                             'coords': ((0.0, 0.0, 0.0),
                                        (0.0, 1.915557, 0.0),
                                        (1.658921, -0.957778, 0.0),
                                        (-1.658921, -0.957778, 0.0))}}

        cls.xyz5 = {'str': """O       1.17464110   -0.15309781    0.00000000
N       0.06304988    0.35149648    0.00000000
C      -1.12708952   -0.11333971    0.00000000
H      -1.93800144    0.60171738    0.00000000
H      -1.29769464   -1.18742971    0.00000000""",
                    'dict': {'symbols': ('O', 'N', 'C', 'H', 'H'),
                             'isotopes': (16, 14, 12, 1, 1),
                             'coords': ((1.1746411, -0.15309781, 0.0),
                                        (0.06304988, 0.35149648, 0.0),
                                        (-1.12708952, -0.11333971, 0.0),
                                        (-1.93800144, 0.60171738, 0.0),
                                        (-1.29769464, -1.18742971, 0.0))}}

        cls.xyz6 = {'str': """S      -0.06618943   -0.12360663   -0.07631983
O      -0.79539707    0.86755487    1.02675668
O      -0.68919931    0.25421823   -1.34830853
N       0.01546439   -1.54297548    0.44580391
C       1.59721519    0.47861334    0.00711000
H       1.94428095    0.40772394    1.03719428
H       2.20318015   -0.14715186   -0.64755729
H       1.59252246    1.51178950   -0.33908352
H      -0.87856890   -2.02453514    0.38494433
H      -1.34135876    1.49608206    0.53295071""",
                    'file': """10
test xyz6
S      -0.06618943   -0.12360663   -0.07631983
O      -0.79539707    0.86755487    1.02675668
O      -0.68919931    0.25421823   -1.34830853
N       0.01546439   -1.54297548    0.44580391
C       1.59721519    0.47861334    0.00711000
H       1.94428095    0.40772394    1.03719428
H       2.20318015   -0.14715186   -0.64755729
H       1.59252246    1.51178950   -0.33908352
H      -0.87856890   -2.02453514    0.38494433
H      -1.34135876    1.49608206    0.53295071
""",
                    'dict': {'symbols': ('S', 'O', 'O', 'N', 'C', 'H', 'H', 'H', 'H', 'H'),
                             'isotopes': (32, 16, 16, 14, 12, 1, 1, 1, 1, 1),
                             'coords': ((-0.06618943, -0.12360663, -0.07631983),
                                        (-0.79539707, 0.86755487, 1.02675668),
                                        (-0.68919931, 0.25421823, -1.34830853),
                                        (0.01546439, -1.54297548, 0.44580391),
                                        (1.59721519, 0.47861334, 0.00711),
                                        (1.94428095, 0.40772394, 1.03719428),
                                        (2.20318015, -0.14715186, -0.64755729),
                                        (1.59252246, 1.5117895, -0.33908352),
                                        (-0.8785689, -2.02453514, 0.38494433),
                                        (-1.34135876, 1.49608206, 0.53295071))}}

        cls.xyz7 = {'str': """O       2.64631000   -0.59546000    0.29327900
O       2.64275300    2.05718500   -0.72942300
C       1.71639100    1.97990400    0.33793200
C      -3.48200000    1.50082200    0.03091100
C      -3.85550400   -1.05695100   -0.03598300
C       3.23017500   -1.88003900    0.34527100
C      -2.91846400    0.11144600    0.02829400
C       0.76935400    0.80820200    0.23396500
C      -1.51123800   -0.09830700    0.09199100
C       1.28495500   -0.50051800    0.22531700
C      -0.59550400    0.98573400    0.16444900
C      -0.94480400   -1.39242500    0.08331900
C       0.42608700   -1.59172200    0.14650400
H       2.24536500    1.93452800    1.29979800
H       1.14735500    2.91082400    0.31665700
H      -3.24115200    2.03800800    0.95768700
H      -3.08546100    2.10616100   -0.79369800
H      -4.56858900    1.48636200   -0.06630800
H      -4.89652000   -0.73067200   -0.04282300
H      -3.69325500   -1.65970000   -0.93924100
H      -3.72742500   -1.73294900    0.81894100
H       3.02442400   -2.44854700   -0.56812500
H       4.30341500   -1.72127600    0.43646000
H       2.87318600   -2.44236600    1.21464900
H      -0.97434200    2.00182800    0.16800300
H      -1.58581300   -2.26344700    0.02264400
H       0.81122400   -2.60336100    0.13267800
H       3.16280800    1.25020800   -0.70346900
""",
                    'dict': {'symbols': ('O', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'H',
                                         'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                             'isotopes': (16, 16, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 1,
                                          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                             'coords': ((2.64631, -0.59546, 0.293279), (2.642753, 2.057185, -0.729423),
                                        (1.716391, 1.979904, 0.337932), (-3.482, 1.500822, 0.030911),
                                        (-3.855504, -1.056951, -0.035983), (3.230175, -1.880039, 0.345271),
                                        (-2.918464, 0.111446, 0.028294), (0.769354, 0.808202, 0.233965),
                                        (-1.511238, -0.098307, 0.091991), (1.284955, -0.500518, 0.225317),
                                        (-0.595504, 0.985734, 0.164449), (-0.944804, -1.392425, 0.083319),
                                        (0.426087, -1.591722, 0.146504), (2.245365, 1.934528, 1.299798),
                                        (1.147355, 2.910824, 0.316657), (-3.241152, 2.038008, 0.957687),
                                        (-3.085461, 2.106161, -0.793698), (-4.568589, 1.486362, -0.066308),
                                        (-4.89652, -0.730672, -0.042823), (-3.693255, -1.6597, -0.939241),
                                        (-3.727425, -1.732949, 0.818941), (3.024424, -2.448547, -0.568125),
                                        (4.303415, -1.721276, 0.43646), (2.873186, -2.442366, 1.214649),
                                        (-0.974342, 2.001828, 0.168003), (-1.585813, -2.263447, 0.022644),
                                        (0.811224, -2.603361, 0.132678), (3.162808, 1.250208, -0.703469))}}

        cls.xyz8 = {'str': """N      -1.1997440839    -0.1610052059     0.0274738287
H      -1.4016624407    -0.6229695533    -0.8487034080
H      -0.0000018759     1.2861082773     0.5926077870
N       0.0000008520     0.5651072858    -0.1124621525
H      -1.1294692206    -0.8709078271     0.7537518889
N       1.1997613019    -0.1609980472     0.0274604887
H       1.1294795781    -0.8708998550     0.7537444446
H       1.4015274689    -0.6230592706    -0.8487058662""",
                    'dict': {'symbols': ('N', 'H', 'H', 'N', 'H', 'N', 'H', 'H'),
                             'isotopes': (14, 1, 1, 14, 1, 14, 1, 1),
                             'coords': ((-1.1997440839, -0.1610052059, 0.0274738287),
                                        (-1.4016624407, -0.6229695533, -0.848703408),
                                        (-1.8759e-06, 1.2861082773, 0.592607787),
                                        (8.52e-07, 0.5651072858, -0.1124621525),
                                        (-1.1294692206, -0.8709078271, 0.7537518889),
                                        (1.1997613019, -0.1609980472, 0.0274604887),
                                        (1.1294795781, -0.870899855, 0.7537444446),
                                        (1.4015274689, -0.6230592706, -0.8487058662))}}

        cls.xyz9 = {'str': """O       3.13231900    0.76911100   -0.08086900
O       3.38743600   -2.11675900   -0.03858500
C      -2.36919300   -0.54695600    0.56682700
C      -3.15360600    0.17105900    1.66307400
C      -2.72802700   -2.02644500    0.45926800
C       2.33156000   -1.73423500   -0.92148100
C       3.65011300    2.04916900    0.27583500
C      -0.93121600   -0.18690000    0.42819300
C       1.35285800   -0.75515100   -0.30846400
C       1.79433800    0.52230200    0.09841000
C       0.01159300   -1.07956000   -0.13549700
C      -0.44828900    1.08210200    0.80429800
C       0.89316900    1.43644300    0.64990400
H      -2.89113500   -0.05394500   -0.49913900
H       2.74879900   -1.31147200   -1.84752800
H       1.80991500   -2.65831900   -1.18214800
H      -3.11220800    1.25882600    1.56763000
H      -4.20773200   -0.11655100    1.61916700
H      -2.76884700   -0.09784700    2.65693400
H      -2.29498600   -2.59841700    1.29217500
H      -3.81389700   -2.15150400    0.49848800
H      -2.38217200   -2.47865600   -0.47430600
H       3.52516600    2.24195700    1.34780100
H       4.71260700    2.01840000    0.03253700
H       3.16623600    2.84537400   -0.30166300
H      -0.30596000   -2.07000300   -0.44289400
H      -1.12238100    1.81600000    1.22939200
H       1.21751200    2.42129300    0.96452300
H       3.88922100   -1.31541600    0.16697100
O      -3.43304800    0.46172100   -1.53075600
O      -2.89487900    1.76177800   -1.59155700
H      -2.12457300    1.65249500   -2.17600500""",
                    'dict': {'symbols': ('O', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
                                         'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
                                         'H', 'H', 'H', 'O', 'O', 'H'),
                             'isotopes': (16, 16, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                          1, 1, 1, 1, 1, 1, 1, 16, 16, 1),
                             'coords': ((3.132319, 0.769111, -0.080869),
                                        (3.387436, -2.116759, -0.038585),
                                        (-2.369193, -0.546956, 0.566827),
                                        (-3.153606, 0.171059, 1.663074),
                                        (-2.728027, -2.026445, 0.459268),
                                        (2.33156, -1.734235, -0.921481),
                                        (3.650113, 2.049169, 0.275835),
                                        (-0.931216, -0.1869, 0.428193),
                                        (1.352858, -0.755151, -0.308464),
                                        (1.794338, 0.522302, 0.09841),
                                        (0.011593, -1.07956, -0.135497),
                                        (-0.448289, 1.082102, 0.804298),
                                        (0.893169, 1.436443, 0.649904),
                                        (-2.891135, -0.053945, -0.499139),
                                        (2.748799, -1.311472, -1.847528),
                                        (1.809915, -2.658319, -1.182148),
                                        (-3.112208, 1.258826, 1.56763),
                                        (-4.207732, -0.116551, 1.619167),
                                        (-2.768847, -0.097847, 2.656934),
                                        (-2.294986, -2.598417, 1.292175),
                                        (-3.813897, -2.151504, 0.498488),
                                        (-2.382172, -2.478656, -0.474306),
                                        (3.525166, 2.241957, 1.347801),
                                        (4.712607, 2.0184, 0.032537),
                                        (3.166236, 2.845374, -0.301663),
                                        (-0.30596, -2.070003, -0.442894),
                                        (-1.122381, 1.816, 1.229392),
                                        (1.217512, 2.421293, 0.964523),
                                        (3.889221, -1.315416, 0.166971),
                                        (-3.433048, 0.461721, -1.530756),
                                        (-2.894879, 1.761778, -1.591557),
                                        (-2.124573, 1.652495, -2.176005))},
                    'gaussian': """
              1          8           0        3.132319    0.769111   -0.080869
              2          8           0        3.387436   -2.116759   -0.038585
              3          6           0       -2.369193   -0.546956    0.566827
              4          6           0       -3.153606    0.171059    1.663074
              5          6           0       -2.728027   -2.026445    0.459268
              6          6           0        2.331560   -1.734235   -0.921481
              7          6           0        3.650113    2.049169    0.275835
              8          6           0       -0.931216   -0.186900    0.428193
              9          6           0        1.352858   -0.755151   -0.308464
             10          6           0        1.794338    0.522302    0.098410
             11          6           0        0.011593   -1.079560   -0.135497
             12          6           0       -0.448289    1.082102    0.804298
             13          6           0        0.893169    1.436443    0.649904
             14          1           0       -2.891135   -0.053945   -0.499139
             15          1           0        2.748799   -1.311472   -1.847528
             16          1           0        1.809915   -2.658319   -1.182148
             17          1           0       -3.112208    1.258826    1.567630
             18          1           0       -4.207732   -0.116551    1.619167
             19          1           0       -2.768847   -0.097847    2.656934
             20          1           0       -2.294986   -2.598417    1.292175
             21          1           0       -3.813897   -2.151504    0.498488
             22          1           0       -2.382172   -2.478656   -0.474306
             23          1           0        3.525166    2.241957    1.347801
             24          1           0        4.712607    2.018400    0.032537
             25          1           0        3.166236    2.845374   -0.301663
             26          1           0       -0.305960   -2.070003   -0.442894
             27          1           0       -1.122381    1.816000    1.229392
             28          1           0        1.217512    2.421293    0.964523
             29          1           0        3.889221   -1.315416    0.166971
             30          8           0       -3.433048    0.461721   -1.530756
             31          8           0       -2.894879    1.761778   -1.591557
             32          1           0       -2.124573    1.652495   -2.176005

        """,
                    }

        cls.xyz10 = {'str': """S       0.35915171    1.99254721    1.18490490
O       0.40385373   -0.65769862    1.03431374
O      -1.23178399   -0.59559801   -1.39114493
O       0.69015560   -1.65712867    0.01239391
C      -0.04261360    0.49595776    0.40364219
C      -0.80103934    0.51314044   -0.70610325
H      -1.17387862    1.41490429   -1.17716515
H       0.95726719    1.46882836    2.26423536
H      -0.83008868   -1.36939497   -0.94170868
H       1.65888059   -1.54205855    0.02674995
""",
                     'dict': {'symbols': ('S', 'O', 'O', 'O', 'C', 'C', 'H', 'H', 'H', 'H'),
                              'isotopes': (32, 16, 16, 16, 12, 12, 1, 1, 1, 1),
                              'coords': ((0.35915171, 1.99254721, 1.1849049),
                                         (0.40385373, -0.65769862, 1.03431374),
                                         (-1.23178399, -0.59559801, -1.39114493),
                                         (0.6901556, -1.65712867, 0.01239391),
                                         (-0.0426136, 0.49595776, 0.40364219),
                                         (-0.80103934, 0.51314044, -0.70610325),
                                         (-1.17387862, 1.41490429, -1.17716515),
                                         (0.95726719, 1.46882836, 2.26423536),
                                         (-0.83008868, -1.36939497, -0.94170868),
                                         (1.65888059, -1.54205855, 0.02674995))},
                     'dict_diff_order1': {'symbols': ('C', 'O', 'O', 'O', 'S', 'C', 'H', 'H', 'H', 'H'),
                                          'isotopes': (12, 16, 16, 16, 32, 12, 1, 1, 1, 1),
                                          'coords': ((-0.0426136, 0.49595776, 0.40364219),
                                                     (0.40385373, -0.65769862, 1.03431374),
                                                     (-1.23178399, -0.59559801, -1.39114493),
                                                     (0.6901556, -1.65712867, 0.01239391),
                                                     (0.35915171, 1.99254721, 1.1849049),
                                                     (-0.80103934, 0.51314044, -0.70610325),
                                                     (-1.17387862, 1.41490429, -1.17716515),
                                                     (0.95726719, 1.46882836, 2.26423536),
                                                     (-0.83008868, -1.36939497, -0.94170868),
                                                     (1.65888059, -1.54205855, 0.02674995))},
                     'dict_diff_order2': {'symbols': ('O', 'O', 'O', 'S', 'H', 'C', 'H', 'C', 'H', 'H'),
                                          'isotopes': (16, 16, 16, 32, 1, 12, 1, 12, 1, 1),
                                          'coords': ((0.6901556, -1.65712867, 0.01239391),
                                                     (0.40385373, -0.65769862, 1.03431374),
                                                     (-1.23178399, -0.59559801, -1.39114493),
                                                     (0.35915171, 1.99254721, 1.1849049),
                                                     (0.95726719, 1.46882836, 2.26423536),
                                                     (-0.80103934, 0.51314044, -0.70610325),
                                                     (-1.17387862, 1.41490429, -1.17716515),
                                                     (-0.0426136, 0.49595776, 0.40364219),
                                                     (-0.83008868, -1.36939497, -0.94170868),
                                                     (1.65888059, -1.54205855, 0.02674995))}}

        cls.xyz11 = {'str': """C       0.00000000    0.00000000    0.00000000
H       0.63003260    0.63003260    0.63003260
H      -0.63003260   -0.63003260    0.63003260
H      -0.63003260    0.63003260   -0.63003260
H       0.63003260   -0.63003260   -0.63003260""",  # no line break at the end on purpose
                     'file': """5
test methane xyz conversion
C       0.00000000    0.00000000    0.00000000
H       0.63003260    0.63003260    0.63003260
H      -0.63003260   -0.63003260    0.63003260
H      -0.63003260    0.63003260   -0.63003260
H       0.63003260   -0.63003260   -0.63003260
""",
                     'dict': {'symbols': ('C', 'H', 'H', 'H'),
                              'isotopes': (12, 1, 1, 1),
                              'coords': ((0.0, 0.0, 0.0),
                                         (0.6300326, 0.6300326, 0.6300326),
                                         (-0.6300326, -0.6300326, 0.6300326),
                                         (-0.6300326, 0.6300326, -0.6300326))},
                     'dict_diff_order': {'symbols': ('H', 'C', 'H', 'H'),
                                         'isotopes': (1, 12, 1, 1),
                                         'coords': ((0.6300326, 0.6300326, 0.6300326),
                                                    (0.0, 0.0, 0.0),
                                                    (-0.6300326, -0.6300326, 0.6300326),
                                                    (-0.6300326, 0.6300326, -0.6300326))}}

        cls.xyz_dict_12 = {'symbols': ('F', 'C', 'C', 'C', 'C', 'C', 'C', 'F', 'H', 'H', 'H', 'H'),
                           'isotopes': (19, 12, 12, 12, 12, 12, 12, 19, 1, 1, 1, 1),
                           'coords': ((1.34408, 0, 1.70183),
                                      (0.692492, 0, 0.530349),
                                      (1.393, 0, -0.657191),
                                      (0.693305, 0, -1.85652),
                                      (-0.693305, -5.15e-08, -1.85652),
                                      (-1.393, -3.87e-08, -0.657191),
                                      (-0.692492, 4.63e-08, 0.530349),
                                      (-1.34408, 4.48e-08, 1.70183),
                                      (2.47418, 0, -0.625387),
                                      (1.23765, 0, -2.79083),
                                      (-1.23765, -1.812e-07, -2.79083),
                                      (-2.47418, -6.81e-08, -0.625387)
                                      )
                           }

        cls.xyz_dict_13 = {'symbols': ('O', 'N', 'O', 'H'), 'isotopes': (16, 14, 16, 1),
                           'coords': ((1.082465, -0.311042, 0.517009), (-0.000538, 0.002628, 0.064162),
                                      (-0.872035, -0.717142, -0.381683), (-0.209893, 1.025557, 0.057233))}

        cls.conformer_12 = Conformer(number=ArrayQuantity([9, 6, 6, 6, 6, 6, 6, 9, 1, 1, 1, 1], ''),
                                     mass=ArrayQuantity([18.9984, 12, 12, 12, 12, 12, 12, 18.9984, 1.00783, 1.00783,
                                                         1.00783, 1.00783], 'amu'),
                                     coordinates=ArrayQuantity([[1.34408, 0, 1.70183],
                                                                [0.692492, 0, 0.530349],
                                                                [1.393, 0, -0.657191],
                                                                [0.693305, 0, -1.85652],
                                                                [-0.693305, -5.15e-08, -1.85652],
                                                                [-1.393, -3.87e-08, -0.657191],
                                                                [-0.692492, 4.63e-08, 0.530349],
                                                                [-1.34408, 4.48e-08, 1.70183],
                                                                [2.47418, 0, -0.625387],
                                                                [1.23765, 0, -2.79083],
                                                                [-1.23765, -1.812e-07, -2.79083],
                                                                [-2.47418, -6.81e-08, -0.625387]], 'angstroms')
                                     )

        nh_s_adj = """1 N u0 p2 c0 {2,S}
                          2 H u0 p0 c0 {1,S}"""
        nh_s_xyz = """N       0.50949998    0.00000000    0.00000000
                          H      -0.50949998    0.00000000    0.00000000"""
        cls.spc1 = ARCSpecies(label='NH2(S)', adjlist=nh_s_adj, xyz=nh_s_xyz, multiplicity=1, charge=0)
        spc = Species().from_adjacency_list(nh_s_adj)
        cls.spc2 = ARCSpecies(label='NH2(S)', rmg_species=spc, xyz=nh_s_xyz)

        cls.spc3 = ARCSpecies(label='NCN(S)', smiles='[N]=C=[N]', multiplicity=1, charge=0)

        cls.spc4 = ARCSpecies(label='NCN(T)', smiles='[N]=C=[N]', multiplicity=3, charge=0)

    def test_str_to_xyz(self):
        """Test converting a string xyz format to the ARC xyz format"""
        xyz1 = converter.str_to_xyz(xyz_str=self.xyz1['str'])
        xyz2 = converter.str_to_xyz(xyz_str=self.xyz2['str'])
        xyz3 = converter.str_to_xyz(xyz_str=self.xyz3['str'])
        xyz4 = converter.str_to_xyz(xyz_str=self.xyz4['str'])
        xyz9a = converter.str_to_xyz(xyz_str=self.xyz9['str'])
        xyz9b = converter.str_to_xyz(xyz_str=self.xyz9['gaussian'])  # check parsing a Gaussian output format

        self.assertEqual(xyz1, self.xyz1['dict'])
        self.assertEqual(xyz2, self.xyz2['dict'])
        self.assertEqual(xyz3, self.xyz3['dict'])
        self.assertEqual(xyz4, self.xyz4['dict'])
        self.assertEqual(xyz9a, self.xyz9['dict'])
        self.assertEqual(xyz9b, self.xyz9['dict'])

        # test a zmat input, important for defining a Species with a zmat
        zmat5 = """C
H       1      R1
H       1      R1       2      A1
H       1      R1       2      A1       3      D1
H       1      R1       2      A1       3      D2

A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912"""
        xyz5 = converter.str_to_xyz(xyz_str=zmat5)
        expected_xyz5 = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                         'isotopes': (12, 1, 1, 1, 1),
                         'coords': ((0.0, 0.0, -6.987742560341984e-08), (0.0, 0.0, 1.0911999301225743),
                                    (0.0, 1.0287933571691315, -0.3637330327013464),
                                    (0.8909611825531454, -0.5143966785845655, -0.3637330327013464),
                                    (-0.8909611825531449, -0.5143966785845662, -0.3637330327013464))}
        self.assertTrue(almost_equal_coords_lists(xyz5, expected_xyz5))

        # test processing commas in string input
        xyz_from_commas = converter.str_to_xyz(""" O,-3.77205932,0.72922606,-1.43980481
 H,-4.73205932,0.72922606,-1.43980481
 H,-3.45160473,-0.17570977,-1.43980481""")
        expected_xyz = {'symbols': ('O', 'H', 'H'), 'isotopes': (16, 1, 1),
                        'coords': ((-3.77205932, 0.72922606, -1.43980481),
                                   (-4.73205932, 0.72922606, -1.43980481),
                                   (-3.45160473, -0.17570977, -1.43980481))}
        self.assertTrue(almost_equal_coords_lists(xyz_from_commas, expected_xyz))

    def test_xyz_to_str(self):
        """Test converting an ARC xyz format to a string xyz format"""
        xyz_str1 = converter.xyz_to_str(xyz_dict=self.xyz1['dict'])
        xyz_str2 = converter.xyz_to_str(xyz_dict=self.xyz2['dict'])
        xyz_str3 = converter.xyz_to_str(xyz_dict=self.xyz3['dict'])
        xyz_str4 = converter.xyz_to_str(xyz_dict=self.xyz4['dict'])
        self.assertEqual(xyz_str1, converter.standardize_xyz_string(self.xyz1['str']))
        self.assertEqual(xyz_str2, converter.standardize_xyz_string(self.xyz2['str']))
        self.assertEqual(xyz_str3, converter.standardize_xyz_string(self.xyz3['str']))
        self.assertEqual(xyz_str4, converter.standardize_xyz_string(self.xyz4['str']))

    def test_xyz_to_x_y_z(self):
        """Test the xyz_to_x_y_z function"""
        x, y, z = converter.xyz_to_x_y_z(self.xyz1['dict'])
        self.assertEqual(x, (0.0, 0.6300326, -0.6300326, -0.6300326, 0.6300326))
        self.assertEqual(y, (0.0, 0.6300326, -0.6300326, 0.6300326, -0.6300326))
        self.assertEqual(z, (0.0, 0.6300326, 0.6300326, -0.6300326, -0.6300326))

    def test_xyz_to_np_array(self):
        """Test the xyz_to_np_array function"""
        xyz_dict = {'symbols': ('O', 'N', 'C', 'H', 'H'),
                    'isotopes': (16, 14, 12, 1, 1),
                    'coords': ((1.1746411, -0.15309781, 0.0),
                               (0.06304988, 0.35149648, 0.0),
                               (-1.12708952, -0.11333971, 0.0),
                               (-1.93800144, 0.60171738, 0.0),
                               (-1.29769464, -1.18742971, 0.0))}
        coords = converter.xyz_to_np_array(xyz_dict)
        expected_coords = [[1.1746411, -0.15309781, 0.0],
                           [0.06304988, 0.35149648, 0.0],
                           [-1.12708952, -0.11333971, 0.0],
                           [-1.93800144, 0.60171738, 0.0],
                           [-1.29769464, -1.18742971, 0.0]]
        self.assertIsInstance(coords, np.ndarray)
        np.testing.assert_array_equal(coords, expected_coords)

    def test_xyz_to_coords_list(self):
        """Test the xyz_to_coords_list function"""
        xyz_dict = {'symbols': ('O', 'N', 'C', 'H', 'H'),
                    'isotopes': (16, 14, 12, 1, 1),
                    'coords': ((1.1746411, -0.15309781, 0.0),
                               (0.06304988, 0.35149648, 0.0),
                               (-1.12708952, -0.11333971, 0.0),
                               (-1.93800144, 0.60171738, 0.0),
                               (-1.29769464, -1.18742971, 0.0))}
        coords = converter.xyz_to_coords_list(xyz_dict)
        expected_coords = [[1.1746411, -0.15309781, 0.0],
                           [0.06304988, 0.35149648, 0.0],
                           [-1.12708952, -0.11333971, 0.0],
                           [-1.93800144, 0.60171738, 0.0],
                           [-1.29769464, -1.18742971, 0.0]]
        self.assertEqual(coords, expected_coords)

    def test_xyz_to_kinbot_list(self):
        """Test the xyz_to_coords_list function"""
        xyz_dict = {'symbols': ('O', 'N', 'C', 'H', 'H'),
                    'isotopes': (16, 14, 12, 1, 1),
                    'coords': ((1.1746411, -0.15309781, 0.0),
                               (0.06304988, 0.35149648, 0.0),
                               (-1.12708952, -0.11333971, 0.0),
                               (-1.93800144, 0.60171738, 0.0),
                               (-1.29769464, -1.18742971, 0.0))}
        coords = converter.xyz_to_kinbot_list(xyz_dict)
        expected_coords = ['O', 1.1746411, -0.15309781, 0.0,
                           'N', 0.06304988, 0.35149648, 0.0,
                           'C', -1.12708952, -0.11333971, 0.0,
                           'H', -1.93800144, 0.60171738, 0.0,
                           'H', -1.29769464, -1.18742971, 0.0]
        self.assertEqual(coords, expected_coords)

    def test_xyz_to_xyz_file_format(self):
        """Test generating the XYZ file format from the xyz dictionary"""
        xyzf1 = converter.xyz_to_xyz_file_format(xyz_dict=self.xyz1['dict'], comment='test methane xyz conversion')
        xyzf2 = converter.xyz_to_xyz_file_format(xyz_dict=self.xyz2['dict'], comment='test xyz2')
        xyzf6 = converter.xyz_to_xyz_file_format(xyz_dict=self.xyz6['dict'], comment='test xyz6')
        self.assertEqual(xyzf1, self.xyz1['file'])
        self.assertEqual(xyzf2, self.xyz2['file'])
        self.assertEqual(xyzf6, self.xyz6['file'])

    def test_xyz_to_dmat(self):
        """Test converting xyz to dmat"""
        dmat1 = converter.xyz_to_dmat(xyz_dict=self.xyz1['dict'])
        dmat2 = converter.xyz_to_dmat(xyz_dict=self.xyz2['dict'])
        dmat3 = converter.xyz_to_dmat(xyz_dict=self.xyz3['dict'])
        self.assertTrue(almost_equal_lists(dmat1, self.xyz1['dmat']))
        self.assertTrue(almost_equal_lists(dmat2, self.xyz2['dmat']))
        self.assertTrue(almost_equal_lists(dmat3, self.xyz3['dmat']))

    def test_xyz_file_format_to_xyz(self):
        """Test getting the ARC xyz dictionary from an xyz file format"""
        xyz1 = converter.xyz_file_format_to_xyz(xyz_file=self.xyz1['file'])
        xyz2 = converter.xyz_file_format_to_xyz(xyz_file=self.xyz2['file'])
        xyz6 = converter.xyz_file_format_to_xyz(xyz_file=self.xyz6['file'])
        self.assertEqual(xyz1, self.xyz1['dict'])
        self.assertEqual(xyz2, self.xyz2['dict'])
        self.assertEqual(xyz6, self.xyz6['dict'])

    def test_xyz_from_data(self):
        """Test getting the ARC xyz dictionary from data"""
        symbols = ('C', 'H', 'H', 'H', 'H')
        isotopes = (12, 1, 1, 1, 1)
        coords = ((0.0, 0.0, 0.0),
                  (0.6300326, 0.6300326, 0.6300326),
                  (-0.6300326, -0.6300326, 0.6300326),
                  (-0.6300326, 0.6300326, -0.6300326),
                  (0.6300326, -0.6300326, -0.6300326))
        xyz_dict0 = converter.xyz_from_data(coords=coords, symbols=symbols, isotopes=isotopes)
        self.assertEqual(xyz_dict0, self.xyz1['dict'])
        xyz_dict1 = converter.xyz_from_data(coords=coords, symbols=symbols)  # no specifying isotopes
        self.assertEqual(xyz_dict1, self.xyz1['dict'])

        numbers = [6, 1, 1, 1, 1]
        coords = [[0.0, 0.0, 0.0],
                  [0.6300326, 0.6300326, 0.6300326],
                  [-0.6300326, -0.6300326, 0.6300326],
                  [-0.6300326, 0.6300326, -0.6300326],
                  [0.6300326, -0.6300326, -0.6300326]]
        xyz_dict2 = converter.xyz_from_data(coords=coords, numbers=numbers)
        self.assertEqual(xyz_dict2, self.xyz1['dict'])

        numbers = [6, 1, 1, 1, 1]
        coords = [[0.0, 0.0, 0.0],
                  [0.6300326, 0.6300326, 0.6300326],
                  [-0.6300326, -0.6300326, 0.6300326],
                  [-0.6300326, 0.6300326, -0.6300326],
                  [0.6300326, -0.6300326, -0.6300326]]
        coords = np.array([np.array(coord, np.float64) for coord in coords], np.float64)
        xyz_dict2 = converter.xyz_from_data(coords=coords, numbers=numbers)
        self.assertEqual(xyz_dict2, self.xyz1['dict'])
        self.assertIsInstance(xyz_dict2['coords'], tuple)
        self.assertIsInstance(xyz_dict2['coords'][0], tuple)

    def test_sort_xyz_using_indices(self):
        """Test the sort_xyz_using_indices() function."""
        xyz_1 = converter.sort_xyz_using_indices(self.xyz1['dict'], indices=[4, 3, 2, 1, 0])
        self.assertEqual(xyz_1['symbols'], ('H', 'H', 'H', 'H', 'C'))
        xyz_2 = converter.sort_xyz_using_indices(self.xyz2['dict'], indices=list(range(7)))
        self.assertEqual(xyz_2['symbols'], ('S', 'O', 'N', 'C', 'H', 'H', 'H'))
        xyz_2 = converter.sort_xyz_using_indices(self.xyz2['dict'], indices=[0, 6, 3, 1, 2, 4, 5])
        self.assertEqual(xyz_2['symbols'], ('S', 'H', 'C', 'O', 'N', 'H', 'H'))
        with self.assertRaises(ValueError):
            converter.sort_xyz_using_indices(self.xyz2['dict'], indices=[0, 6, 5])
        with self.assertRaises(ValueError):
            converter.sort_xyz_using_indices(self.xyz2['dict'], indices=[0, 6, 5, 35])

    def test_conformer_to_xyz_dict(self):
        """Test the rmg_conformer_to_xyz function"""
        xyz_dict = converter.rmg_conformer_to_xyz(self.conformer_12)
        self.assertTrue(almost_equal_coords_lists(xyz_dict, self.xyz_dict_12))
        self.assertEqual(xyz_dict['isotopes'], self.xyz_dict_12['isotopes'])

    def test_xyz_dict_to_conformer(self):
        """Test the xyz_to_rmg_conformer function"""
        conformer = converter.xyz_to_rmg_conformer(self.xyz_dict_12)
        self.assertTrue(np.array_equal(conformer.number.value, self.conformer_12.number.value))
        self.assertTrue(np.allclose(conformer.mass.value, self.conformer_12.mass.value))
        self.assertTrue(np.allclose(conformer.coordinates.value, self.conformer_12.coordinates.value))

    def test_get_most_common_isotope_for_element(self):
        """Test the get_most_common_isotope_for_element function"""
        common_isotopes = list()
        common_isotopes.append(converter.get_most_common_isotope_for_element('H'))
        common_isotopes.append(converter.get_most_common_isotope_for_element('B'))
        common_isotopes.append(converter.get_most_common_isotope_for_element('C'))
        common_isotopes.append(converter.get_most_common_isotope_for_element('Zn'))
        common_isotopes.append(converter.get_most_common_isotope_for_element('U'))
        common_isotopes.append(converter.get_most_common_isotope_for_element('Og'))
        self.assertEqual(common_isotopes, [1, 11, 12, 64, 238, 294])

    def test_standardize_xyz_string(self):
        """Test the standardize_xyz_string() function"""
        xyz = """
        
        
 C                 -0.67567701    1.18507660    0.04672449
 H                 -0.25592948    1.62415961    0.92757746
 H                 -2.26870864    1.38030564    0.05865317
 O                 -0.36671999   -0.21081064    0.01630374
 H                 -0.73553821   -0.63718986    0.79332805
 C                 -0.08400571    1.86907236   -1.19973252
 
 H                 -0.50375517    1.42998100   -2.08057962
 H                 -0.31518819    2.91354759   -1.17697025
 H                  0.97802159    1.73893214   -1.20769117
 O                 -3.69788377    1.55609096    0.07050345
 O                 -4.28667752    0.37487691    0.04916102
 H                 -4.01978712   -0.12970163    0.82103635
 
 """
        expected_xyz = """C                 -0.67567701    1.18507660    0.04672449
H                 -0.25592948    1.62415961    0.92757746
H                 -2.26870864    1.38030564    0.05865317
O                 -0.36671999   -0.21081064    0.01630374
H                 -0.73553821   -0.63718986    0.79332805
C                 -0.08400571    1.86907236   -1.19973252
H                 -0.50375517    1.42998100   -2.08057962
H                 -0.31518819    2.91354759   -1.17697025
H                  0.97802159    1.73893214   -1.20769117
O                 -3.69788377    1.55609096    0.07050345
O                 -4.28667752    0.37487691    0.04916102
H                 -4.01978712   -0.12970163    0.82103635"""
        new_xyz = converter.standardize_xyz_string(xyz)
        self.assertEqual(new_xyz, converter.standardize_xyz_string(expected_xyz))

    def test_check_xyz_dict(self):
        """Test the check_xyz_dict function"""
        xyz1 = converter.check_xyz_dict(self.xyz1['str'])
        self.assertEqual(xyz1, self.xyz1['dict'])

        xyz2 = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                'coords': ((0.0, 0.0, 0.0),
                           (0.6300326, 0.6300326, 0.6300326),
                           (-0.6300326, -0.6300326, 0.6300326),
                           (-0.6300326, 0.6300326, -0.6300326),
                           (0.6300326, -0.6300326, -0.6300326))}
        xyz2 = converter.check_xyz_dict(xyz2)
        expected_xyz2 = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                         'isotopes': (12, 1, 1, 1, 1),
                         'coords': ((0.0, 0.0, 0.0),
                                    (0.6300326, 0.6300326, 0.6300326),
                                    (-0.6300326, -0.6300326, 0.6300326),
                                    (-0.6300326, 0.6300326, -0.6300326),
                                    (0.6300326, -0.6300326, -0.6300326))}
        self.assertEqual(xyz2, expected_xyz2)

        xyz3 = 3.0
        with self.assertRaises(ConverterError):
            converter.check_xyz_dict(xyz3)

        xyz4 = {'coords': ((0.0, 0.0, 0.0),
                           (0.6300326, 0.6300326, 0.6300326),
                           (-0.6300326, -0.6300326, 0.6300326),
                           (-0.6300326, 0.6300326, -0.6300326),
                           (0.6300326, -0.6300326, -0.6300326))}
        with self.assertRaises(ConverterError):
            converter.check_xyz_dict(xyz4)

        xyz5 = {'symbols': ('C', 'H', 'H', 'H', 'H', 'S', 'S', 'S'),
                'coords': ((0.0, 0.0, 0.0),
                           (0.6300326, 0.6300326, 0.6300326),
                           (-0.6300326, -0.6300326, 0.6300326),
                           (-0.6300326, 0.6300326, -0.6300326),
                           (0.6300326, -0.6300326, -0.6300326))}
        with self.assertRaises(ConverterError):
            converter.check_xyz_dict(xyz5)

        # test a zmat input
        zmat6 = {'symbols': ('N', 'N', 'H', 'H'),
                 'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                            ('R_3_2', 'A_3_2_0', 'D_3_2_0_1')),
                 'vars': {'R_1_0': 1.2451214479859707, 'R_2_1': 1.8953164901754294, 'A_2_1_0': 30.18165946689929,
                          'R_3_2': 2.785552137148173, 'A_3_2_0': 24.405141545817347,
                          'D_3_2_0_1': 3.6222548091772e-06}, 'map': {0: 0, 1: 1, 2: 2, 3: 3}}
        xyz6 = converter.check_xyz_dict(zmat6)
        expected_xyz6 = {'symbols': ('N', 'N', 'H', 'H'),
                         'isotopes': (14, 14, 1, 1),
                         'coords': ((-2.4426534384901547e-09, -4.375090750708016e-09, -0.622560729110669),
                                    (-2.4426534384901547e-09, -4.375090750708016e-09, 0.6225607188753017),
                                    (-2.4426534384901547e-09, 0.9528575945413793, -1.015818661524137),
                                    (7.032081834243086e-08, -0.9528574729632926, 1.015818803737915))}

        self.assertEqual(xyz6, expected_xyz6)

    def test_remove_dummies(self):
        """Test removing dummy atoms from xyz"""
        xyz = {'symbols': ('C', 'H', 'H', 'H', 'H'),
               'isotopes': (12, 1, 1, 1, 1),
               'coords': ((0.0, 0.0, 0.0),
                          (0.6300326, 0.6300326, 0.6300326),
                          (-0.6300326, -0.6300326, 0.6300326),
                          (-0.6300326, 0.6300326, -0.6300326),
                          (0.6300326, -0.6300326, -0.6300326))}
        self.assertEqual(converter.remove_dummies(xyz), xyz)

        xyz = """C      -0.30700886   -0.24965365   -1.86620254
C      -0.30700886   -0.24965365   -0.66508366
C      -0.30700886   -0.24965365    0.79905183
O       0.70180431    0.62552152    1.28340152
X      -0.30700886    0.75034635   -0.66508366
H      -0.30700886   -0.24965365   -2.93203160
H      -1.26962070    0.09010325    1.19172774
H      -0.11233413   -1.25155362    1.19322545
H       1.51732567    0.40137314    0.80398296
X      -0.52389885    0.72654241   -1.86620254"""
        expected_xyz = {'symbols': ('C', 'C', 'C', 'O', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((-0.30700886, -0.24965365, -1.86620254), (-0.30700886, -0.24965365, -0.66508366),
                                   (-0.30700886, -0.24965365, 0.79905183), (0.70180431, 0.62552152, 1.28340152),
                                   (-0.30700886, -0.24965365, -2.9320316), (-1.2696207, 0.09010325, 1.19172774),
                                   (-0.11233413, -1.25155362, 1.19322545), (1.51732567, 0.40137314, 0.80398296))}
        self.assertEqual(converter.remove_dummies(xyz), expected_xyz)

        xyz = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'X'),
               'isotopes': (12, 12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, None),
               'coords': ((-0.13756116038658112, -0.4903980739180812, -3.4070002421611405),
                          (-0.13756116038658112, -0.4903980739180812, -2.068811535952663),
                          (-0.13756116038658112, 0.7152610317203273, -1.2799749296658276),
                          (-0.13536699409738112, 0.6772831991876102, 0.020126260072391933),
                          (-0.1331728278081811, 0.6393053666548932, 1.3202274498106115),
                          (0.42865067654033756, -0.4749909307528236, 2.040292659169325),
                          (0.4467895682142408, -0.5498499456820503, 3.376262764342561),
                          (-0.42345537766834657, 0.5739424129245821, -3.9821069340233026),
                          (-1.8714191723187001, -0.583636119043475, -3.934273994832548),
                          (-1.8262531967396876, -0.6225281951339621, -1.5142275656129123),
                          (0.6043039927461615, 1.3236094550456832, -1.7931815119572303),
                          (-0.5678376994686876, 1.4634507673105883, 1.8769577284974246),
                          (0.855037712371592, -1.2879840211437834, 1.4551669317123657),
                          (0.8820166269612573, -1.4116598437885965, 3.872635381883336),
                          (0.035099262340543336, 0.232696924337356, 4.0056654348243015),
                          (-0.7693852837602044, 1.4502395523398461, 0.04377545656241333))}
        expected_xyz = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((-0.13756116038658112, -0.4903980739180812, -3.4070002421611405),
                                   (-0.13756116038658112, -0.4903980739180812, -2.068811535952663),
                                   (-0.13756116038658112, 0.7152610317203273, -1.2799749296658276),
                                   (-0.13536699409738112, 0.6772831991876102, 0.020126260072391933),
                                   (-0.1331728278081811, 0.6393053666548932, 1.3202274498106115),
                                   (0.42865067654033756, -0.4749909307528236, 2.040292659169325),
                                   (0.4467895682142408, -0.5498499456820503, 3.376262764342561),
                                   (-0.42345537766834657, 0.5739424129245821, -3.9821069340233026),
                                   (-1.8714191723187001, -0.583636119043475, -3.934273994832548),
                                   (-1.8262531967396876, -0.6225281951339621, -1.5142275656129123),
                                   (0.6043039927461615, 1.3236094550456832, -1.7931815119572303),
                                   (-0.5678376994686876, 1.4634507673105883, 1.8769577284974246),
                                   (0.855037712371592, -1.2879840211437834, 1.4551669317123657),
                                   (0.8820166269612573, -1.4116598437885965, 3.872635381883336),
                                   (0.035099262340543336, 0.232696924337356, 4.0056654348243015))}
        self.assertEqual(converter.remove_dummies(xyz), expected_xyz)

    def test_zmat_from_xyz(self):
        """Test the zmat_from_xyz() function, specifically using constraints."""
        spc_1 = ARCSpecies(label='OSOHNHCH3', smiles='O=S(O)(C)=N', xyz=self.xyz6['str'])
        zmat_1 = converter.zmat_from_xyz(xyz=self.xyz6['str'],
                                         mol=spc_1.mol,
                                         )
        expected_zmat_1 = {'symbols': ('O', 'S', 'C', 'N', 'O', 'H', 'H', 'H', 'H', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                      ('R_3_1', 'A_3_1_2', 'D_3_1_2_0'), ('R_4_1', 'A_4_1_2', 'D_4_1_2_3'),
                                      ('R_5_2', 'A_5_2_1', 'D_5_2_1_4'), ('R_6|7_2|2', 'A_6_2_1', 'D_6_2_1_5'),
                                      ('R_6|7_2|2', 'A_7_2_1', 'D_7_2_1_6'), ('R_8_3', 'A_8_3_1', 'D_8_3_1_2'),
                                      ('R_9_0', 'A_9_0_1', 'D_9_0_1_2')),
                           'vars': {'R_1_0': 1.652550362008556, 'R_2_1': 1.7710292109444938,
                                    'A_2_1_0': 100.31467408653526, 'R_3_1': 1.5145587906910694,
                                    'A_3_1_2': 104.58356819461952, 'D_3_1_2_0': 245.10279731686472,
                                    'R_4_1': 1.465895049180463, 'A_4_1_2': 110.63476765151398,
                                    'D_4_1_2_3': 223.9248565937303, 'R_5_2': 1.0892903553419386,
                                    'A_5_2_1': 108.76410838938024, 'D_5_2_1_4': 165.89320777051094,
                                    'A_6_2_1': 107.38137788937368, 'D_6_2_1_5': 119.8443357556924,
                                    'A_7_2_1': 107.66229556882213, 'D_7_2_1_6': 119.41883832162475,
                                    'R_8_3': 1.017299914264441, 'A_8_3_1': 112.06235395175872,
                                    'D_8_3_1_2': 184.09219767912742, 'R_9_0': 0.9679695492695732,
                                    'A_9_0_1': 107.32623991181818, 'D_9_0_1_2': 107.32362341795498,
                                    'R_6|7_2|2': 1.089653518060009},
                           'map': {0: 1, 1: 0, 2: 4, 3: 3, 4: 2, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9}}
        self.assertTrue(_compare_zmats(zmat_1, expected_zmat_1))

        zmat_2 = converter.zmat_from_xyz(xyz=self.xyz6['str'],
                                         mol=spc_1.mol,
                                         constraints={'R_atom': [(0, 4)]},  # S -- C
                                         )
        expected_zmat_2 = {'symbols': ('C', 'N', 'O', 'O', 'H', 'H', 'H', 'H', 'H', 'S'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                      ('R_3_2', 'A_3_2_0', 'D_3_2_0_1'), ('R_4_0', 'A_4_0_3', 'D_4_0_3_2'),
                                      ('R_5_0', 'A_5_0_4', 'D_5_0_4_3'), ('R_6_0', 'A_6_0_4', 'D_6_0_4_5'),
                                      ('R_7_1', 'A_7_1_6', 'D_7_1_6_0'), ('R_8_2', 'A_8_2_7', 'D_8_2_7_1'),
                                      ('R_9_0', 'A_9_0_4', 'D_9_0_4_2')),
                           'vars': {'R_1_0': 2.6040754582009322, 'R_2_1': 2.608765856516912,
                                    'A_2_1_0': 60.592805804753674, 'R_3_2': 2.4552790423766173,
                                    'A_3_2_0': 63.168534968185966, 'D_3_2_0_1': 287.49247912008303,
                                    'R_4_0': 1.0892903553419386, 'A_4_0_3': 138.43014547739153,
                                    'D_4_0_3_2': 25.011271482009754, 'R_5_0': 1.089662707752105,
                                    'A_5_0_4': 110.70683722060217, 'D_5_0_4_3': 231.35473645946473,
                                    'R_6_0': 1.0896443283679131, 'A_6_0_4': 111.31664958800597,
                                    'D_6_0_4_5': 236.21548371611914, 'R_7_1': 1.017299914264441,
                                    'A_7_1_6': 142.16625128428694, 'D_7_1_6_0': 187.58796051999715,
                                    'R_8_2': 0.9679695492695732, 'A_8_2_7': 120.48718550438511,
                                    'D_8_2_7_1': 129.2465666795397, 'R_9_0': 1.7710292109444938,
                                    'A_9_0_4': 108.76410838938024, 'D_9_0_4_2': 328.74221522832823},
                           'map': {0: 4, 1: 3, 2: 1, 3: 2, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 0}}
        self.assertTrue(_compare_zmats(zmat_2, expected_zmat_2))

        zmat_3 = converter.zmat_from_xyz(xyz=self.xyz6['str'],
                                         mol=spc_1.mol,
                                         constraints={'R_group': [(0, 4)]},  # S -- C
                                         )
        expected_zmat_3 = {'symbols': ('C', 'S', 'N', 'O', 'O', 'H', 'H', 'H', 'H', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                      ('R_3_1', 'A_3_1_0', 'D_3_1_0_2'), ('R_4_1', 'A_4_1_0', 'D_4_1_0_3'),
                                      ('R_5_0', 'A_5_0_1', 'D_5_0_1_4'), ('R_6_0', 'A_6_0_1', 'D_6_0_1_5'),
                                      ('R_7_0', 'A_7_0_1', 'D_7_0_1_6'), ('R_8_2', 'A_8_2_1', 'D_8_2_1_0'),
                                      ('R_9_3', 'A_9_3_1', 'D_9_3_1_0')),
                           'vars': {'R_1_0': 1.7710292109444938, 'R_2_1': 1.5145587906910694,
                                    'A_2_1_0': 104.58356819461952, 'R_3_1': 1.652550362008556,
                                    'A_3_1_0': 100.31467408653526, 'D_3_1_0_2': 114.89720378377247,
                                    'R_4_1': 1.465895049180463, 'A_4_1_0': 110.63476765151398,
                                    'D_4_1_0_3': 109.02765249927636, 'R_5_0': 1.0892903553419386,
                                    'A_5_0_1': 108.76410838938024, 'D_5_0_1_4': 165.89320777051094,
                                    'R_6_0': 1.089662707752105, 'A_6_0_1': 107.38137788937368,
                                    'D_6_0_1_5': 119.8443357556924, 'R_7_0': 1.0896443283679131,
                                    'A_7_0_1': 107.66229556882213, 'D_7_0_1_6': 119.41883832162475,
                                    'R_8_2': 1.017299914264441, 'A_8_2_1': 112.06235395175872,
                                    'D_8_2_1_0': 184.09219767912742, 'R_9_3': 0.9679695492695732,
                                    'A_9_3_1': 107.32623991181818, 'D_9_3_1_0': 107.32362341795498},
                           'map': {0: 4, 1: 0, 2: 3, 3: 1, 4: 2, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9}}
        self.assertTrue(_compare_zmats(zmat_3, expected_zmat_3))

        zmat_4 = converter.zmat_from_xyz(xyz=self.xyz6['str'],
                                         mol=spc_1.mol,
                                         constraints={'A_atom': [(4, 0, 1)]},  # C -- S -- O
                                         )
        expected_zmat_4 = {'symbols': ('O', 'S', 'N', 'O', 'H', 'H', 'H', 'H', 'H', 'C'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                      ('R_3_1', 'A_3_1_2', 'D_3_1_2_0'), ('R_4_3', 'A_4_3_1', 'D_4_3_1_2'),
                                      ('R_5_4', 'A_5_4_3', 'D_5_4_3_1'), ('R_6_5', 'A_6_5_4', 'D_6_5_4_3'),
                                      ('R_7_2', 'A_7_2_1', 'D_7_2_1_6'), ('R_8_0', 'A_8_0_1', 'D_8_0_1_2'),
                                      ('R_9_1', 'A_9_1_0', 'D_9_1_0_5')),
                           'vars': {'R_1_0': 1.652550362008556, 'R_2_1': 1.5145587906910694,
                                    'A_2_1_0': 110.83996941701696, 'R_3_1': 1.465895049180463,
                                    'A_3_1_2': 124.30461742387706, 'D_3_1_2_0': 235.47216838490237,
                                    'R_4_3': 3.5566004039117844, 'A_4_3_1': 27.67805168991244,
                                    'D_4_3_1_2': 225.61189549782407, 'R_5_4': 1.792568984998626,
                                    'A_5_4_3': 57.533849200580754, 'D_5_4_3_1': 120.5140278873366,
                                    'R_6_5': 1.7944762431156127, 'A_6_5_4': 60.20657979151368,
                                    'D_6_5_4_3': 60.234495378503816, 'R_7_2': 1.017299914264441,
                                    'A_7_2_1': 112.06235395175872, 'D_7_2_1_6': 183.37091898647907,
                                    'R_8_0': 0.9679695492695732, 'A_8_0_1': 107.32623991181818,
                                    'D_8_0_1_2': 217.3908316329194, 'R_9_1': 1.7710292109444938,
                                    'A_9_1_0': 100.31467408653526, 'D_9_1_0_5': 358.17858835324444},
                           'map': {0: 1, 1: 0, 2: 3, 3: 2, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 4}}
        self.assertTrue(_compare_zmats(zmat_4, expected_zmat_4))

        zmat_5 = converter.zmat_from_xyz(xyz=self.xyz6['str'],
                                         mol=spc_1.mol,
                                         constraints={'A_group': [(4, 0, 1)]},  # C -- S -- OH
                                         )
        expected_zmat_5 = {'symbols': ('O', 'S', 'C', 'N', 'O', 'H', 'H', 'H', 'H', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                      ('R_3_1', 'A_3_1_2', 'D_3_1_2_0'), ('R_4_1', 'A_4_1_2', 'D_4_1_2_3'),
                                      ('R_5_2', 'A_5_2_1', 'D_5_2_1_4'), ('R_6_2', 'A_6_2_1', 'D_6_2_1_5'),
                                      ('R_7_2', 'A_7_2_1', 'D_7_2_1_6'), ('R_8_3', 'A_8_3_1', 'D_8_3_1_2'),
                                      ('R_9_0', 'A_9_0_1', 'D_9_0_1_2')),
                           'vars': {'R_1_0': 1.652550362008556, 'R_2_1': 1.7710292109444938,
                                    'A_2_1_0': 100.31467408653526, 'R_3_1': 1.5145587906910694,
                                    'A_3_1_2': 104.58356819461952, 'D_3_1_2_0': 245.10279731686472,
                                    'R_4_1': 1.465895049180463, 'A_4_1_2': 110.63476765151398,
                                    'D_4_1_2_3': 223.9248565937303, 'R_5_2': 1.0892903553419386,
                                    'A_5_2_1': 108.76410838938024, 'D_5_2_1_4': 165.89320777051094,
                                    'R_6_2': 1.089662707752105, 'A_6_2_1': 107.38137788937368,
                                    'D_6_2_1_5': 119.8443357556924, 'R_7_2': 1.0896443283679131,
                                    'A_7_2_1': 107.66229556882213, 'D_7_2_1_6': 119.41883832162475,
                                    'R_8_3': 1.017299914264441, 'A_8_3_1': 112.06235395175872,
                                    'D_8_3_1_2': 184.09219767912742, 'R_9_0': 0.9679695492695732,
                                    'A_9_0_1': 107.32623991181818, 'D_9_0_1_2': 107.32362341795498},
                           'map': {0: 1, 1: 0, 2: 4, 3: 3, 4: 2, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9}}
        self.assertTrue(_compare_zmats(zmat_5, expected_zmat_5))

        zmat_6 = converter.zmat_from_xyz(xyz=self.xyz6['str'],
                                         mol=spc_1.mol,
                                         constraints={'D_atom': [(8, 3, 0, 4)]},  # H -- N -- S -- C
                                         )
        expected_zmat_6 = {'symbols': ('C', 'S', 'N', 'O', 'O', 'H', 'H', 'H', 'H', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                      ('R_3_1', 'A_3_1_0', 'D_3_1_0_2'), ('R_4_1', 'A_4_1_0', 'D_4_1_0_3'),
                                      ('R_5_0', 'A_5_0_1', 'D_5_0_1_4'), ('R_6_0', 'A_6_0_1', 'D_6_0_1_5'),
                                      ('R_7_0', 'A_7_0_1', 'D_7_0_1_6'), ('R_8_3', 'A_8_3_1', 'D_8_3_1_0'),
                                      ('R_9_2', 'A_9_2_1', 'D_9_2_1_0')),
                           'vars': {'R_1_0': 1.7710292109444938, 'R_2_1': 1.5145587906910694,
                                    'A_2_1_0': 104.58356819461952, 'R_3_1': 1.652550362008556,
                                    'A_3_1_0': 100.31467408653526, 'D_3_1_0_2': 114.89720378377247,
                                    'R_4_1': 1.465895049180463, 'A_4_1_0': 110.63476765151398,
                                    'D_4_1_0_3': 109.02765249927636, 'R_5_0': 1.0892903553419386,
                                    'A_5_0_1': 108.76410838938024, 'D_5_0_1_4': 165.89320777051094,
                                    'R_6_0': 1.089662707752105, 'A_6_0_1': 107.38137788937368,
                                    'D_6_0_1_5': 119.8443357556924, 'R_7_0': 1.0896443283679131,
                                    'A_7_0_1': 107.66229556882213, 'D_7_0_1_6': 119.41883832162475,
                                    'R_8_3': 0.9679695492695732, 'A_8_3_1': 107.32623991181818,
                                    'D_8_3_1_0': 107.32362341795498, 'R_9_2': 1.017299914264441,
                                    'A_9_2_1': 112.06235395175872, 'D_9_2_1_0': 184.09219767912742},
                           'map': {0: 4, 1: 0, 2: 3, 3: 1, 4: 2, 5: 5, 6: 6, 7: 7, 8: 9, 9: 8}}
        self.assertTrue(_compare_zmats(zmat_6, expected_zmat_6))

        zmat_7 = converter.zmat_from_xyz(xyz=self.xyz6['str'],
                                         mol=spc_1.mol,
                                         constraints={'D_group': [(8, 3, 0, 4)]},  # H -- N -- S -- CH3
                                         )
        expected_zmat_7 = {'symbols': ('C', 'S', 'N', 'O', 'O', 'H', 'H', 'H', 'H', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                      ('R_3_1', 'A_3_1_0', 'D_3_1_0_2'), ('R_4_1', 'A_4_1_0', 'D_4_1_0_3'),
                                      ('R_5_0', 'A_5_0_1', 'D_5_0_1_4'), ('R_6_0', 'A_6_0_1', 'D_6_0_1_5'),
                                      ('R_7_0', 'A_7_0_1', 'D_7_0_1_6'), ('R_8_3', 'A_8_3_1', 'D_8_3_1_0'),
                                      ('R_9_2', 'A_9_2_1', 'D_9_2_1_0')),
                           'vars': {'R_1_0': 1.7710292109444938, 'R_2_1': 1.5145587906910694,
                                    'A_2_1_0': 104.58356819461952, 'R_3_1': 1.652550362008556,
                                    'A_3_1_0': 100.31467408653526, 'D_3_1_0_2': 114.89720378377247,
                                    'R_4_1': 1.465895049180463, 'A_4_1_0': 110.63476765151398,
                                    'D_4_1_0_3': 109.02765249927636, 'R_5_0': 1.0892903553419386,
                                    'A_5_0_1': 108.76410838938024, 'D_5_0_1_4': 165.89320777051094,
                                    'R_6_0': 1.089662707752105, 'A_6_0_1': 107.38137788937368,
                                    'D_6_0_1_5': 119.8443357556924, 'R_7_0': 1.0896443283679131,
                                    'A_7_0_1': 107.66229556882213, 'D_7_0_1_6': 119.41883832162475,
                                    'R_8_3': 0.9679695492695732, 'A_8_3_1': 107.32623991181818,
                                    'D_8_3_1_0': 107.32362341795498, 'R_9_2': 1.017299914264441,
                                    'A_9_2_1': 112.06235395175872, 'D_9_2_1_0': 184.09219767912742},
                           'map': {0: 4, 1: 0, 2: 3, 3: 1, 4: 2, 5: 5, 6: 6, 7: 7, 8: 9, 9: 8}}
        self.assertTrue(_compare_zmats(zmat_7, expected_zmat_7))

        zmat_8 = converter.zmat_from_xyz(xyz={'symbols': ('C', 'C', 'O', 'O', 'H', 'H', 'H', 'H', 'H', 'H'),
                                              'isotopes': (12, 12, 16, 16, 1, 1, 1, 1, 1, 1),
                                              'coords': ((-1.34047, -0.03188, 0.16703), (0.07658, -0.19298, -0.34334),
                                                         (0.27374, 0.70670, -1.43275), (1.64704, 0.49781, -1.86879),
                                                         (-2.06314, -0.24194, -0.62839), (-1.53242, -0.70687, 1.00574),
                                                         (-1.51781, 0.99794, 0.49424), (0.24018, -1.21958, -0.68782),
                                                         (0.79344, 0.03863, 0.45152), (1.95991, 1.39912, -1.67215))})
        expected_zmat_8 = {'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                      ('R_3_2', 'A_3_2_1', 'D_3_2_1_0'), ('R_4|6_0|0', 'A_4_0_1', 'D_4_0_1_3'),
                                      ('R_5_0', 'A_5_0_1', 'D_5|6_0|0_1|1_4|5'),
                                      ('R_4|6_0|0', 'A_6_0_1', 'D_5|6_0|0_1|1_4|5'),
                                      ('R_7|8_1|1', 'A_7_1_0', 'D_7_1_0_6'), ('R_7|8_1|1', 'A_8_1_0', 'D_8_1_0_7'),
                                      ('R_9_3', 'A_9_3_2', 'D_9_3_2_1')),
                           'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9},
                           'symbols': ('C', 'C', 'O', 'O', 'H', 'H', 'H', 'H', 'H', 'H'),
                           'vars': {'A_2_1_0': 108.63387152978416, 'A_3_2_1': 105.58023544826183,
                                    'A_4_0_1': 110.62463321031589, 'A_5_0_1': 110.91425998596507,
                                    'A_6_0_1': 110.62270362433773, 'A_7_1_0': 110.20822115119915,
                                    'A_8_1_0': 110.20143800025897, 'A_9_3_2': 96.30065819269021,
                                    'D_3_2_1_0': 179.9922243050821, 'D_4_0_1_3': 59.13545080998071,
                                    'D_5|6_0|0_1|1_4|5': 120.87284125909102, 'D_7_1_0_6': 181.16392677464265,
                                    'D_8_1_0_7': 239.4199964284852, 'D_9_3_2_1': 242.3527063196313,
                                    'R_1_0': 1.5147479951212197, 'R_2_1': 1.4265728986680748,
                                    'R_3_2': 1.4559254886404387, 'R_4|6_0|0': 1.0950148489417413,
                                    'R_5_0': 1.093567969297245, 'R_7|8_1|1': 1.0951422141311429,
                                    'R_9_3': 0.9741224704818748}}
        self.assertTrue(_compare_zmats(zmat_8, expected_zmat_8))

    def test_zmat_to_xyz(self):
        """Check refolding a zmat into cartesian coordinates"""
        co3 = {'symbols': ('O', 'O', 'O'), 'isotopes': (16, 16, 16),
               'coords': ((-0.7218511965026766, -0.41676098261567357, 0.0),
                          (0.7218512230346665, -0.41676098261567357, 0.0),
                          (-2.6531989605338424e-08, 0.8335219652313473, 0.0))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(co3))
        expected_xyz = {'symbols': ('O', 'O', 'O'), 'isotopes': (16, 16, 16),
                        'coords': ((0.0, -0.41676098261567357, -0.7218511965026766),
                                   (0.0, -0.41676098261567357, 0.7218512230346665),
                                   (0.0, 0.8335219652313473, -2.653198949431612e-08))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        # test defining the 3rd atom relative to atom A
        co3_zmat_1 = {'symbols': ('O', 'O', 'O'),
                      'coords': ((None, None, None),
                                 ('R_1|2_0|0', None, None),
                                 ('R_1|2_0|0', 'A_2_0_1', None)),
                      'vars': {'A_2_0_1': 60.0, 'R_1|2_0|0': 1.44370},
                      'map': {0: 0, 1: 1, 2: 2}}
        xyz = converter.zmat_to_xyz(co3_zmat_1)
        expected_xyz = {'symbols': ('O', 'O', 'O'), 'isotopes': (16, 16, 16),
                        'coords': (
                        (0.0, -0.4167602918145313, -0.7218499999999999), (0.0, -0.4167602918145313, 0.7218500000000001),
                        (0.0, 0.8335205836290627, 0.0))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        # test defining the 3rd atom relative to atom B
        co3_zmat_2 = {'symbols': ('O', 'O', 'O'),
                      'coords': ((None, None, None),
                                 ('R_1|2_0|1', None, None),
                                 ('R_1|2_0|1', 'A_2_1_0', None)),
                      'vars': {'A_2_1_0': 60.0, 'R_1|2_0|1': 1.44370},
                      'map': {0: 0, 1: 1, 2: 2}}
        xyz = converter.zmat_to_xyz(co3_zmat_2)
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))  # same expected_xyz as above

        ch4 = {'symbols': ('C', 'H', 'H', 'H', 'H'), 'isotopes': (12, 1, 1, 1, 1),
               'coords': ((0.0, 0.0, 0.0),
                          (0.6300326, 0.6300326, 0.6300326),
                          (-0.6300326, -0.6300326, 0.6300326),
                          (-0.6300326, 0.6300326, -0.6300326),
                          (0.6300326, -0.6300326, -0.6300326))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(ch4))
        expected_xyz = {'symbols': ('C', 'H', 'H', 'H', 'H'), 'isotopes': (12, 1, 1, 1, 1),
                        'coords': ((0.0, 0.0, 1.7247449281419015e-09), (0.0, 0.0, 1.0912484598518606),
                                   (0.0, 1.0288389097014583, -0.363749493462701),
                                   (0.8910006322033469, -0.5144194548507294, -0.363749493462701),
                                   (-0.8910006322033468, -0.5144194548507296, -0.363749493462701))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        n2h2 = {'symbols': ('N', 'N', 'H', 'H'),
                'isotopes': (14, 14, 1, 1),
                'coords': ((-0.5092886779079191, 0.35793982922935974, -0.009272171569141162),
                           (0.509288673134674, -0.3579398256646019, 0.009272133629072029),
                           (-1.3789597692428337, -0.1947244046215175, 0.019430178519009387),
                           (1.3789597740160853, 0.19472440105675842, -0.0194301405789408))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(n2h2))
        expected_xyz = {'symbols': ('N', 'N', 'H', 'H'), 'isotopes': (14, 14, 1, 1),
                        'coords': ((-2.5668207844061266e-09, -2.6770271428814674e-09, -0.6225607242852181),
                                   (-2.5668207844061266e-09, -2.6770271428814674e-09, 0.6225607237007525),
                                   (-2.5668207844061266e-09, 0.9528576592978217, -1.0158186576982358),
                                   (7.389543487977147e-08, -0.9528575849067161, 1.0158186658190074))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        h2nn = {'symbols': ('N', 'N', 'H', 'H'),
                'isotopes': (14, 14, 1, 1),
                'coords': ((1.3546347608168492, -0.015322539977107492, -0.015327345703300993),
                           (-0.0986192196858452, 0.0011155018627852027, 0.0011158328655407426),
                           (-0.6378749227822363, -0.8648316328267205, 0.0067050159766062715),
                           (-0.6181406183487707, 0.8790386709410358, 0.007506496861156013))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(h2nn))
        expected_xyz = {'symbols': ('N', 'N', 'H', 'H'), 'isotopes': (14, 14, 1, 1),
                        'coords': ((2.2665346650049726e-09, 0.0, -0.811059071806946),
                                   (2.2665346650049726e-09, 0.0, 0.6423808321967149),
                                   (2.2665346650049726e-09, 0.8719908550360964, 1.1718372716686782),
                                   (-6.525058771462697e-08, -0.871990855036094, 1.1718372716686782))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        ch3nh2 = {'symbols': ('C', 'N', 'H', 'H', 'H', 'H', 'H'),
                  'isotopes': (12, 14, 1, 1, 1, 1, 1),
                  'coords': ((-0.5742286697040887, -0.016697712230008085, 0.012292129335517637),
                             (0.8208404422996248, 0.0827910406364399, -0.37769346207107873),
                             (-1.0573700464459694, -0.8406777190695487, -0.5200749387254854),
                             (-1.1021146811862017, 0.9087986699874372, -0.233830111412309),
                             (-0.6613312758198031, -0.19490561834917827, 1.0878511105273783),
                             (0.8805462585895368, 0.2662583233797538, -1.3784337589325522),
                             (1.2797264656423253, -0.8145252774119457, -0.22619079977298262))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(ch3nh2))
        expected_xyz = {'symbols': ('C', 'N', 'H', 'H', 'H', 'H', 'H'), 'isotopes': (12, 14, 1, 1, 1, 1, 1),
                        'coords': ((0.001939789401803491, -0.03323727019980954, -0.7342369835009073),
                                   (0.001939789401803491, -0.03323727019980954, 0.7177288706477947),
                                   (0.001939789401803491, 0.9929898597416031, -1.1119159128512566),
                                   (-0.8909289133409809, -0.5391301461035987, -1.1119159128512566),
                                   (0.886471529131673, -0.5487130707054766, -1.119023182175499),
                                   (-0.837454777168941, 0.4351501262113398, 1.0564563288179245),
                                   (0.7899235185003657, 0.5172639870024125, 1.0564563288179245))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        co2 = {'symbols': ('O', 'C', 'O'), 'isotopes': (16, 12, 16),
               'coords': ((-1.4050000037154526, 0.0, 0.0), (7.654677848880926e-10, 0.0, 0.0),
                          (1.4050000029499874, 0.0, 0.0))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(co2))
        expected_xyz = {'symbols': ('O', 'C', 'O'), 'isotopes': (16, 12, 16),
                        'coords': ((0.0, 0.0, -1.404999961513641), (0.0, 0.0, 0.0), (0.0, 0.0, 1.404999961513641))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        xyz = converter.zmat_to_xyz(xyz_to_zmat(co2), keep_dummy=True)
        expected_xyz = {'symbols': ('O', 'C', 'O', 'X'), 'isotopes': (16, 12, 16, None),
                        'coords': ((0.0, 0.0, -1.404999961513641), (0.0, 0.0, 0.0),
                                   (0.0, 0.0, 1.404999961513641), (0.0, 1.0, 0.0))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        c4h2 = {'symbols': ('C', 'C', 'C', 'C', 'H', 'H'),
                'isotopes': (12, 12, 12, 12, 1, 1),
                'coords': ((1.9347068234896196, 0.14242236392968965, -0.7789155813431534),
                           (0.7562146287478744, 0.0556682378383746, -0.5699560840680622),
                           (-0.7562146066837767, -0.05566842139925123, -0.30178597715544486),
                           (-1.934706835483623, -0.14242232018660442, -0.09282659654307752),
                           (2.980433323377626, 0.21940305800927, -0.964334055207275),
                           (-2.9804333334477184, -0.2194029181914813, 0.09259194953859241))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(c4h2))
        expected_xyz = {'symbols': ('C', 'C', 'C', 'C', 'H', 'H'), 'isotopes': (12, 12, 12, 12, 1, 1),
                        'coords': ((0.0, 0.0, -1.9700391224235911), (0.0, 0.0, -0.7700248680574546),
                                   (0.0, 0.0, 0.7700248765254258), (0.0, 0.0, 1.9700391308915624),
                                   (0.0, 0.0, -3.0348630222722885), (0.0, 0.0, 3.0348628206189163))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        xyz = converter.zmat_to_xyz(xyz_to_zmat(c4h2), keep_dummy=True)
        expected_xyz = {'symbols': ('C', 'C', 'C', 'C', 'H', 'H', 'X', 'X', 'X', 'X'),
                        'isotopes': (12, 12, 12, 12, 1, 1, None, None, None, None),
                        'coords': ((0.0, 0.0, -1.9700391224235911), (0.0, 0.0, -0.7700248680574546),
                                   (0.0, 0.0, 0.7700248765254258), (0.0, 0.0, 1.9700391308915624),
                                   (0.0, 0.0, -3.0348630222722877), (0.0, 0.0, 3.0348628206189154),
                                   (0.0, 1.0, -0.7700248680574546), (0.0, -0.9999999999999999, 0.7700248765254258),
                                   (0.0, 1.0, 1.9700391308915624), (0.0, -0.9999999999999997, -3.0348630222722877))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        benzene = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H'),
                   'isotopes': (12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1),
                   'coords': ((-1.2216577, 0.66078741, -0.12826463), (-1.19107395, -0.72551307, 0.0226491),
                              (0.03058375, -1.38630048, 0.15091368), (1.22165769, -0.66078741, 0.12826459),
                              (1.19107394, 0.72551306, -0.02264913), (-0.03058375, 1.38630047, -0.15091376),
                              (-2.17346972, 1.17561691, -0.22819747), (-2.1190577, -1.2907713, 0.04029543),
                              (0.05441202, -2.46638819, 0.26849287), (2.17346971, -1.17561688, 0.22819756),
                              (2.1190577, 1.29077128, -0.04029534), (-0.054412, 2.46638819, -0.26849291))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(benzene))
        expected_xyz = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1),
                        'coords': ((2.8802002460017624e-08, -1.2079546929724265, -0.6974129612047755),
                                   (2.8802002460017624e-08, -1.2079546929724265, 0.6974128933531158),
                                   (2.8802002460017624e-08, -1.060647629724798e-07, 1.3948258847089468),
                                   (-1.2767047161392347e-08, 1.2079545449585916, 0.6974130044047506),
                                   (-4.533613514615403e-08, 1.2079546731899735, -0.6974128501531349),
                                   (-2.733621427172375e-08, 1.5039801248839524e-07, -1.3948259525605944),
                                   (-9.25425083412892e-08, -2.149090234269196, -1.2407783150313003),
                                   (-4.732096529568059e-08, -2.1490905040349153, 1.2407775836937787),
                                   (4.3303326526144725e-08, -2.446953808465935e-07, 2.4815558619164566),
                                   (1.3603280232379253e-08, 2.149090449363762, 1.2407783366502623),
                                   (4.34845437808648e-08, 2.1490910490372905, -1.2407775620747585),
                                   (2.79630538907893e-08, 9.546517221181716e-07, -2.481556126005945))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz, rtol=1e-4, atol=1e-6))

        c8h16 = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H',
                             'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                 'isotopes': (12, 12, 12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                 'coords': ((-3.73804162, 1.02185982, -0.62471855), (-3.2959048, -0.29941353, -0.0153832),
                            (-4.1802739, -1.42923989, -0.45733859), (-4.92681853, -2.16702002, 0.37927323),
                            (-5.80381366, -3.30445522, -0.06153101), (-7.27503241, -3.02330579, 0.2501747),
                            (-8.1665309, -4.18607038, -0.18659165), (-9.63004684, -3.91231246, 0.12122189),
                            (-4.71816645, 0.90998677, -1.09931319), (-3.81976065, 1.80347272, 0.13824996),
                            (-3.02940465, 1.36240671, -1.38730862), (-3.28992409, -0.20865728, 1.07707644),
                            (-2.26691171, -0.51693974, -0.32353365), (-4.19188582, -1.64644738, -1.52378216),
                            (-4.90893783, -1.95532479, 1.44672557), (-5.48010458, -4.21353093, 0.45929995),
                            (-5.68375, -3.4933649, -1.13530057), (-7.40094036, -2.85022075, 1.32657917),
                            (-7.59322772, -2.10566607, -0.26086886), (-7.85727263, -5.10495013, 0.32499636),
                            (-8.05202084, -4.3593735, -1.26295702), (-9.78445799, -3.76628373, 1.19507643),
                            (-10.24903818, -4.75613294, -0.19928843), (-9.97996487, -3.01641183, -0.40151446))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(c8h16))
        expected_xyz = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H',
                                    'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 12, 12, 12, 12, 12, 12, 12,
                                     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((-1.2185042029813413, -2.854169880482862, -2.347297733645527),
                                   (-1.2185042029813413, -2.854169880482862, -0.8265947152571576),
                                   (-1.2185042029813413, -1.4562260361596158, -0.27915172387566844),
                                   (-0.23443980140093146, -0.9494656527307501, 0.4800443784609385),
                                   (-0.23917949622704926, 0.4459896884150232, 1.0367036378511556),
                                   (0.9313890665572648, 1.2652021910731794, 0.4895738849394964),
                                   (0.9344056763522759, 2.681426599905939, 1.0656420180199948),
                                   (2.096115725209919, 3.500189210885019, 0.5256143682143488),
                                   (-1.0223320167279955, -1.8456639125970216, -2.72522919271524),
                                   (-0.4446536349728971, -3.519859524519952, -2.7444505448749257),
                                   (-2.1859800894571935, -3.1817622025062153, -2.7427161963994187),
                                   (-0.3502337131089073, -3.4179039165088367, -0.4659688085495364),
                                   (-2.1113186101853003, -3.3747248183142418, -0.4618946157043686),
                                   (-2.083421408663313, -0.8414219024563088, -0.5211220735721738),
                                   (0.6266266043696853, -1.5668466873566844, 0.7290310074390094),
                                   (-0.1711427309037492, 0.38337109671863834, 2.129370614217813),
                                   (-1.184084429186584, 0.9527245229608097, 0.8054947005674014),
                                   (1.8793029255790965, 0.768989055138829, 0.7338884411975255),
                                   (0.8691153649492929, 1.3150676425573447, -0.6050092086901158),
                                   (1.0022553011184483, 2.638555685599051, 2.1589216960168716),
                                   (-0.006690536312293105, 3.186232055763592, 0.8182182827567788),
                                   (3.054717550512243, 3.039120773978961, 0.784128069435635),
                                   (2.0787767471283862, 4.5087491545869, 0.950379236234153),
                                   (2.04013969542135, 3.589446382557107, -0.5639843498420027))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        c6h8 = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                'isotopes': (12, 12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1),
                'coords': ((3.484414, -0.21032486, -0.274436), (2.16607832, -0.08689715, -0.46809924),
                           (1.27407619, 0.47709453, 0.51277922), (-0.00343262, 0.57953734, 0.29099902),
                           (-1.28096118, 0.6854582, 0.07097112), (-2.1633229, -0.44663594, 0.19618165),
                           (-3.48135896, -0.37616688, -0.02419077), (3.96738638, 0.1104313, 0.64307756),
                           (4.11508134, -0.64262981, -1.04510384), (1.73146925, -0.42487761, -1.40727399),
                           (1.67852166, 0.82026228, 1.45972638), (-1.69282248, 1.64730262, -0.2176039),
                           (-1.72138262, -1.39887451, 0.48444475), (-4.10455181, -1.25858029, 0.08321349),
                           (-3.97140753, 0.54797717, -0.31365155))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(c6h8), keep_dummy=True)
        expected_xyz = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'X'),
                        'isotopes': (12, 12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, None),
                        'coords': ((-0.3621064367349868, -0.7287027660302037, -3.4140332548131025),
                                   (-0.3621064367349868, -0.7287027660302037, -2.075844548604625),
                                   (-0.3621064367349868, 0.4769563396082048, -1.2870079423177896),
                                   (-0.35990678066973236, 0.43897858598454254, 0.01309321752577386),
                                   (-0.35770712460447773, 0.4010008323608807, 1.3131943773693373),
                                   (0.8468310446043401, 0.13739804890372742, 2.0584986386610926),
                                   (0.885447126570404, 0.08878773353195912, 3.3952465015271476),
                                   (-0.36339405404817077, 0.19736180237274592, -3.993559053235566),
                                   (-0.36085035842616375, -1.6568818415107303, -3.9680789218875843),
                                   (-0.35887221837083655, -1.6750535615952973, -1.5473676801976308),
                                   (-0.36086231299063115, 1.4417716267389882, -1.7887638149585727),
                                   (-1.2859313146636486, 0.567819315367837, 1.850446055763649),
                                   (1.7618655694783711, -0.028607515234623015, 1.4925571096632306),
                                   (1.8188875316521547, -0.11379755005221837, 3.911165840708964),
                                   (0.00234149408062595, 0.24678189746276213, 4.006129801115895),
                                   (-0.3609440592089569, 1.4385516174073205, 0.0422938837084188))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        sonch = {'symbols': ('S', 'O', 'N', 'C', 'H', 'H', 'H'),
                 'isotopes': (32, 16, 14, 12, 1, 1, 1),
                 'coords': ((1.02558264, -0.04344404, -0.07343859),
                            (-0.25448248, 1.10710477, 0.18359696),
                            (-1.30762173, 0.15796567, -0.1048929),
                            (-0.49011438, -1.0370438, 0.15365747),
                            (-0.6486995, -1.85796321, -0.54773423),
                            (-0.60359153, -1.37304859, 1.18613964),
                            (-1.43009127, 0.23517346, -1.11797908))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(sonch))
        expected_xyz = {'symbols': ('S', 'O', 'N', 'C', 'H', 'H', 'H'), 'isotopes': (32, 16, 14, 12, 1, 1, 1),
                        'coords': ((0.09086497971009742, -0.6022696064891687, -0.8037939484344221),
                                   (0.09086497971009742, -0.6022696064891687, 0.9364349464082398),
                                   (0.09086497971009742, 0.8407366190318651, 1.040963589014531),
                                   (-0.4349019294429647, 1.076454954019503, -0.3122622455141109),
                                   (0.028114748189396924, 1.910749041545842, -0.8419575371101325),
                                   (-1.52224280623178, 1.1728628343239977, -0.2984404834134725),
                                   (1.0852425276009905, 1.0824893634517299, 1.0324597287345518))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        n3h5 = {'symbols': ('N', 'H', 'H', 'N', 'H', 'N', 'H', 'H'),
                'isotopes': (14, 1, 1, 14, 1, 14, 1, 1),
                'coords': ((-1.1997440839, -0.1610052059, 0.0274738287),
                           (-1.4016624407, -0.6229695533, -0.848703408),
                           (-1.8759e-06, 1.2861082773, 0.592607787),
                           (8.52e-07, 0.5651072858, -0.1124621525),
                           (-1.1294692206, -0.8709078271, 0.7537518889),
                           (1.1997613019, -0.1609980472, 0.0274604887),
                           (1.1294795781, -0.870899855, 0.7537444446),
                           (1.4015274689, -0.6230592706, -0.8487058662))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(n3h5))
        expected_xyz = {'symbols': ('N', 'H', 'H', 'N', 'H', 'N', 'H', 'H'), 'isotopes': (14, 1, 1, 14, 1, 14, 1, 1),
                        'coords': ((-0.0019467239104149596, -0.4591148546119658, -1.1263518730257214),
                                   (-0.9497121922031914, -0.3200415794960789, -1.4492571653337563),
                                   (0.8268192568185732, -0.9482297291967061, 0.584440004586354),
                                   (-0.0019467239104149596, -0.4591148546119658, 0.2829774970430068),
                                   (0.5768754160530515, 0.2881649184586983, -1.5043967428680436),
                                   (-0.0019467239104149596, 0.7998950714993157, 0.9163228594327795),
                                   (0.5768807305811304, 1.4734254062731509, 0.41862373428428445),
                                   (-0.9497178196041145, 1.1508638890652452, 0.9370183889281745))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        phenanthrene = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
                                    'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
                                     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((3.032666557133464, -2.31946773410356, -0.2005909214711227),
                                   (1.7965966323727525, -2.726769481545662, 0.1131944823160859),
                                   (0.6001022450168033, -1.823716095575642, 0.09610348164662497),
                                   (0.8656212227956182, -0.38322721155806344, -0.3059007396686369),
                                   (-0.20384687365076506, 0.5538578830402723, -0.35330127405658207),
                                   (-1.615850257373334, 0.11793810515744706, -0.0021083813167320125),
                                   (-2.666631210484685, 1.1839819667026763, -0.08462331623575792),
                                   (-2.408432554722245, 2.448108762765795, -0.44175285637152395),
                                   (-1.0384672839219615, 2.9343382425800866, -0.7981390069853233),
                                   (0.05354493654580599, 1.8901268527378152, -0.7281328101572656),
                                   (1.360345163459102, 2.2800367851044663, -1.0498125324207495),
                                   (2.4062888753907306, 1.3635648690195294, -1.0034533310613403),
                                   (2.1741200125893454, 0.03204590442949366, -0.6341438700725668),
                                   (3.3537347060642184, -0.9141772130421169, -0.6034663330286769),
                                   (3.857416971199899, -3.0258691251257033, -0.1680561641739474),
                                   (1.6284948936766175, -3.761751698143623, 0.3981237205775182),
                                   (-0.12876728204316892, -2.2546376246861692, -0.6003879601412826),
                                   (0.1647188432433128, -1.8335631217240267, 1.1022788475462293),
                                   (-1.6193441692533277, -0.27033274566077425, 1.0232110277361828),
                                   (-1.9128335130279017, -0.6914121934743168, -0.6794549801644719),
                                   (-3.683901780650125, 0.8930548728345359, 0.16266783139886437),
                                   (-3.216883510106505, 3.172742016232346, -0.48160893631158447),
                                   (-1.072894198165549, 3.336201536383572, -1.818157150389412),
                                   (-0.7800775196988431, 3.75631208054777, -0.11938284836659853),
                                   (1.568722832673161, 3.307517543615306, -1.3398308108979469),
                                   (3.4111451729908047, 1.6931590170230992, -1.2581692640326767),
                                   (4.100057564417453, -0.5197380000819599, 0.09691660839857347),
                                   (3.8072448171754303, -0.9398527056749205, -1.60185770224936))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(phenanthrene))
        expected_xyz = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
                                    'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
                                     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((7.911382125423709e-07, -3.338152939760946, -1.4438267167522898),
                                   (7.911382125423709e-07, -3.338152939760946, -0.10508685882766478),
                                   (7.911382125423709e-07, -2.087091658207869, 0.7208932933542134),
                                   (7.334316814434194e-07, -0.7823338854702322, -0.056746049599103676),
                                   (7.756132275357522e-07, 0.461180486740155, 0.6344912658123898),
                                   (3.1023082899735583e-06, 0.4894876520167424, 2.153146755914322),
                                   (2.8951933029195698e-06, 1.851424741030327, 2.7796648383100226),
                                   (1.8063564462576765e-06, 2.98843484152714, 2.072959497617675),
                                   (1.7834310789025551e-06, 3.022001897674605, 0.5765945339210672),
                                   (7.723853138415003e-07, 1.6680168246650164, -0.09756732834220494),
                                   (7.462490583939202e-07, 1.6287702377915214, -1.4981722440874858),
                                   (-2.0718994220754048e-07, 0.4126091483231842, -2.1742050699809354),
                                   (-3.2007433136130587e-06, -0.7976618982687378, -1.4681750292862097),
                                   (-4.042876952122207e-06, -2.0849895975401944, -2.2622513412058103),
                                   (-1.0445215285855445e-05, -4.28144538194839, -1.982783692188394),
                                   (-1.6388260652294144e-05, -4.28281753326838, 0.4317912365380152),
                                   (-0.8891840742814868, -2.1146368541531095, 1.3617171347386894),
                                   (0.8891617447563548, -2.1146411813757275, 1.3617204659698767),
                                   (0.8891641687716763, -0.04023411780879327, 2.5148279607524477),
                                   (-0.889181650273688, -0.040232370878044765, 2.5148278414886533),
                                   (-8.620800751545502e-06, 1.8941224070789455, 3.865395027507038),
                                   (-2.472625954141286e-06, 3.9441300169529963, 2.589603991055773),
                                   (-0.887136350554352, 3.576522992360744, 0.2470351937727544),
                                   (0.8871435437193286, 3.576514991315934, 0.2470379221750163),
                                   (1.327490168244476e-07, 2.553402480625905, -2.0711487345389674),
                                   (-2.9920951513460036e-06, 0.411143774705224, -3.261976167653983),
                                   (0.8871317748977916, -2.0978164781507203, -2.9071771100077357),
                                   (-0.8871481193751964, -2.097812158260123, -2.907184543451197))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz, rtol=1e-4, atol=1e-6))

        ts_zmat = {'symbols': ('C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'X', 'O', 'O', 'C', 'C', 'H', 'H', 'H', 'H', 'H'),
                   'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                              ('R_3_0', 'A_3_0_1', 'D_3_0_1_2'), ('R_4_0', 'A_4_0_1', 'D_4_0_1_3'),
                              ('R_5_0', 'A_5_0_1', 'D_5_0_1_4'), ('R_6_1', 'A_6_1_0', 'D_6_1_0_5'),
                              ('R_7_1', 'A_7_1_0', 'D_7_1_0_6'), ('RX_8_7', 'AX_8_7_1', 'DX_8_7_1_0'),
                              ('R_9_7', 'A_9_7_8', 'D_9_7_8_1'), ('R_10_9', 'A_10_9_8', 'D_10_9_7_8'),
                              ('R_11_10', 'A_11_10_9', 'D_11_10_9_8'), ('R_12_11', 'A_12_11_10', 'D_12_11_10_9'),
                              ('R_13_12', 'A_13_12_11', 'D_13_12_11_10'), ('R_14_12', 'A_14_12_11', 'D_14_12_11_13'),
                              ('R_15_12', 'A_15_12_11', 'D_15_12_11_14'), ('R_16_11', 'A_16_11_12', 'D_16_11_12_15'),
                              ('R_17_11', 'A_17_11_12', 'D_17_11_12_16')),
                   'vars': {'R_1_0': 1.5120487296562577, 'R_2_1': 1.3128870801982788, 'A_2_1_0': 110.56890700195424,
                            'R_3_0': 1.0940725668318991, 'A_3_0_1': 110.56890700195424, 'D_3_0_1_2': 180.0,
                            'R_4_0': 1.0940775789443724, 'A_4_0_1': 110.56801921096591, 'D_4_0_1_3': 120.00061587714492,
                            'R_5_0': 1.0940817193677925, 'A_5_0_1': 110.56754686774481, 'D_5_0_1_4': 119.99910067703652,
                            'R_6_1': 1.0940840619688397, 'A_6_1_0': 110.56790845138725, 'D_6_1_0_5': 299.9987702898809,
                            'R_7_1': 1.0940817193677925, 'A_7_1_0': 110.56754686774481, 'D_7_1_0_6': 240.00122783407815,
                            'RX_8_7': 1.0, 'AX_8_7_1': 90.0, 'DX_8_7_1_0': 0, 'R_9_7': 1.1689469645782498,
                            'A_9_7_8': 270, 'D_9_7_8_1': 0, 'R_10_9': 1.4559254886404387, 'A_10_9_8': 96.30065819269021,
                            'D_10_9_7_8': 0, 'R_11_10': 1.4265728986680748, 'A_11_10_9': 105.58023544826183,
                            'D_11_10_9_8': 242.3527063196313, 'R_12_11': 1.5147479951212197, 'A_12_11_10': 108.63387152978416,
                            'D_12_11_10_9': 179.9922243050821, 'R_13_12': 1.0950205915944824, 'A_13_12_11': 110.62463321031589,
                            'D_13_12_11_10': 59.1268942923763, 'R_14_12': 1.093567969297245, 'A_14_12_11': 110.91425998596507,
                            'D_14_12_11_13': 120.87266977773987, 'R_15_12': 1.0950091062890002, 'A_15_12_11': 110.62270362433773,
                            'D_15_12_11_14': 120.87301274044218, 'R_16_11': 1.0951433842986755, 'A_16_11_12': 110.20822115119915,
                            'D_16_11_12_15': 181.16392677464265, 'R_17_11': 1.0951410439636102, 'A_17_11_12': 110.20143800025897,
                            'D_17_11_12_16': 239.4199964284852},
                   'map': {0: 9, 1: 10, 2: 14, 3: 11, 4: 12, 5: 13, 6: 15, 7: 16, 8: 'X17',
                           9: 3, 10: 2, 11: 1, 12: 0, 13: 5, 14: 6, 15: 4, 16: 7, 17: 8}}
        xyz = converter.zmat_to_xyz(ts_zmat)
        expected_xyz = {'symbols': ('C', 'C', 'O', 'O', 'H', 'H', 'H', 'H', 'H', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 12, 16, 16, 1, 1, 1, 1, 1, 12, 12, 1, 1, 1, 1, 1, 1),
                        'coords': ((-2.283504013805817, -0.30566249188560224, -1.2937625219125146),
                                   (-1.6269106869428391, -0.009214706824826169, 0.03870338856149114),
                                   (-0.37571073085970363, -0.6923939001811211, 0.09232329975905462),
                                   (0.19412423827798664, -0.3633957935436055, 1.3910793901200116),
                                   (-1.6429139821748646, 0.019456951274311796, -2.120192616905598),
                                   (-2.4386959531612455, -1.3826986268882928, -1.4161501106357897),
                                   (-3.2489164805877784, 0.20160784417768263, -1.374672834018642),
                                   (-2.2636882380086116, -0.3556003332050194, 0.8595994724046505),
                                   (-1.456241122281976, 1.0673098348842238, 0.14500821897994687),
                                   (2.0290365397344643, 0.6960033408033045, -0.9159971028698723),
                                   (2.0290365397344643, 0.6960033408033045, 0.5960516267863853),
                                   (2.0290365397344643, -0.32832246490850736, -1.300381578684112),
                                   (1.1419406537672003, 1.2081811033999703, -1.300367467687724),
                                   (2.9161414986581624, 1.208179479072638, -1.300360477679806),
                                   (2.0290365397344643, 1.925194307657479, 1.0573129977634728),
                                   (2.916135372300252, 0.18381705641527246, 0.9804222890375962),
                                   (1.1419315640405359, 0.1838272315805306, 0.9804150015963191))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz, rtol=1e-4, atol=1e-6))

        crazy = {'symbols': ('C', 'S', 'C', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'N', 'O', 'C', 'C', 'C', 'O',
                             'C', 'H', 'H', 'C', 'O', 'O', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
                             'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                 'isotopes': (12, 32, 12, 12, 12, 16, 12, 12, 12, 12, 12, 14, 16, 12, 12, 12, 16, 12, 1, 1, 12, 16,
                              16, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                 'coords': ((0.3274026, -2.26751349, 1.63049586), (-0.45583669, -0.69403507, 2.07966011),
                            (-0.74998553, 0.1674721, 0.40294571), (-1.00035074, -0.91486831, -0.69963969),
                            (-1.36275248, -0.4211373, -2.10180028), (-1.2751424, -1.51271695, -3.01524455),
                            (0.52137932, 1.03702992, 0.05827308), (1.87071211, 0.36242919, -0.0942956),
                            (2.27157054, -0.19914345, -1.31148631), (3.52325995, -0.81277227, -1.43688167),
                            (4.40522429, -0.88047028, -0.3550893), (5.67765022, -1.44973252, -0.47213753),
                            (6.14232632, -2.01780812, -1.64786894), (4.01787295, -0.28926955, 0.85080026),
                            (2.76727967, 0.32378873, 0.98226698), (-2.03762393, 1.15227615, 0.57400664),
                            (-2.08528422, 1.91614517, -0.66817021), (-3.07850461, 2.79943864, -0.89330921),
                            (-3.01406475, 3.29649809, -1.84791173), (-3.82602922, 2.99925098, -0.14930564),
                            (-3.34048249, 0.30576028, 0.76061402), (-4.43606057, 1.09150052, 1.25094611),
                            (-5.5667201, 0.17784882, 1.34169192), (-1.87366601, 2.15813122, 1.74584475),
                            (-0.38980918, -2.92765906, 1.13662409), (0.64993945, -2.7631856, 2.55083355),
                            (1.20742139, -2.132265, 1.00223888), (-1.7923623, -1.60504973, -0.3796867),
                            (-0.1173514, -1.55329785, -0.81227132), (-2.38336335, -0.03585664, -2.15575528),
                            (-0.67883648, 0.35169141, -2.45761307), (-2.10902199, -1.54645788, -3.51490053),
                            (0.34538583, 1.60264434, -0.86560486), (0.65096478, 1.81353001, 0.82157824),
                            (1.62059278, -0.16895436, -2.18187181), (3.79727304, -1.2511092, -2.39297007),
                            (6.19600818, -1.66693258, 0.37451698), (6.3095366, -1.24260293, -2.21706522),
                            (4.68937879, -0.29721399, 1.70527737), (2.49834754, 0.7695989, 1.93797335),
                            (-3.65415206, -0.1279457, -0.19458068), (-3.18902405, -0.502595, 1.48133547),
                            (-5.67928065, 0.23893607, 2.30792673), (-1.02113438, 2.82848721, 1.61108522),
                            (-2.77629877, 2.75649408, 1.89754068), (-1.71528969, 1.64716863, 2.70183805))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(crazy))
        expected_xyz = {'symbols': ('C', 'S', 'C', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'N', 'O', 'C', 'C', 'C',
                                    'O', 'C', 'H', 'H', 'C', 'O', 'O', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
                                    'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 32, 12, 12, 12, 16, 12, 12, 12, 12, 12, 14, 16, 12, 12, 12, 16, 12, 1, 1, 12,
                                     16, 16, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((-0.6137613955258476, -2.092311904610491, -1.6459978544252085),
                                   (-0.6137613955258476, -2.092311904610491, 0.16812634733587362),
                                   (-0.6137613955258476, -0.24046592013457468, 0.6272083175363872),
                                   (-1.3744410794571005, 0.5676974847189897, -0.4764567253986083),
                                   (-1.576816124415619, 2.065622526905396, -0.23891950314015964),
                                   (-2.025190225605998, 2.671101216252729, -1.4496874000267845),
                                   (0.8834881106130998, 0.2444573623215347, 0.7471743004372355),
                                   (1.798704697910799, 0.15327239878541876, -0.45828272093245137),
                                   (1.8412826700558853, 1.1687915694678015, -1.4197983902742346),
                                   (2.696517599561571, 1.071648823004712, -2.52348642559127),
                                   (3.5298496061242695, -0.03686840789055568, -2.6951439334968432),
                                   (4.423373009638812, -0.13205514440246935, -3.767236952726962),
                                   (4.523236688341723, 0.8384474222891809, -4.751680994042289),
                                   (3.511469016392926, -1.0347484394367652, -1.716559885862223),
                                   (2.657358563251665, -0.9436752250316995, -0.6123368746056645),
                                   (-1.338792530764695, -0.09274456106632356, 2.07966211118939),
                                   (-1.1314238325662234, 1.301787660973408, 2.45522578499296),
                                   (-1.6599975634752346, 1.7919075757535974, 3.594424622566481),
                                   (-1.4483334346743875, 2.8358488118002603, 3.761374099341869),
                                   (-2.2002460843848084, 1.1613198743500677, 4.27468181936708),
                                   (-2.864460143178646, -0.4174523564397583, 1.9541430391331691),
                                   (-3.4820446576733506, -0.6381600608865727, 3.2300669820564156),
                                   (-4.887577843599055, -0.895906763881511, 2.948237024310359),
                                   (-0.6844618373997587, -0.9825215524467403, 3.171440103795841),
                                   (-1.5747931925417271, -1.7428397486104807, -2.031200759873655),
                                   (-0.47851528451203795, -3.122826979089325, -1.9873030382824364),
                                   (0.1972579054460767, -1.49666229793525, -2.0641861008321203),
                                   (-2.3644138336938254, 0.12671752515424606, -0.6539195456410438),
                                   (-0.8610790571374175, 0.47111108633342047, -1.4393152104393672),
                                   (-2.33352246536131, 2.2670589205027083, 0.522538000766746),
                                   (-0.6508878081124041, 2.56755037989058, 0.04801849591442919),
                                   (-2.8221411069091884, 3.1889330661762916, -1.242640339415089),
                                   (0.9100740029207297, 1.2883022196596166, 1.0849977910110213),
                                   (1.3824162217067886, -0.3059494367909472, 1.5537114671384973),
                                   (1.213154280456347, 2.0515673316718077, -1.328058873102219),
                                   (2.694363444641115, 1.8721370140641351, -3.2587020993340285),
                                   (4.850119585093404, -1.031805706706496, -3.9697979209049263),
                                   (4.971429560211808, 1.5740410344579128, -4.29242878794834),
                                   (4.166650269981901, -1.897641680977177, -1.8018074558240567),
                                   (2.667279713926132, -1.742187297217789, 0.12707241523730084),
                                   (-3.393777896948052, 0.41377747747947247, 1.4768945402149385),
                                   (-3.0303934678157933, -1.32434535167179, 1.3660710625604848),
                                   (-4.90170334683976, -1.8089549635496402, 3.289051481285635),
                                   (0.36316277686315934, -0.7286838416760149, 3.351430520457394),
                                   (-1.2302772946188338, -0.9327113437321211, 4.117695570883975),
                                   (-0.7013695841551866, -2.042831211415979, 2.8965760870233277))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

    def test_zmat_to_str(self):
        """Test converting a zmat to xyz"""
        zmat0 = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                 'coords': ((None, None, None),
                            ('R_1|2|3|4_0|0|0|0', None, None),
                            ('R_1|2|3|4_0|0|0|0', 'A_2|3|4_0|0|0_1|1|1', None),
                            ('R_1|2|3|4_0|0|0|0', 'A_2|3|4_0|0|0_1|1|1', 'D_3_0_1_2'),
                            ('R_1|2|3|4_0|0|0|0', 'A_2|3|4_0|0|0_1|1|1', 'D_4_0_1_2')),
                 'vars': {'R_1|2|3|4_0|0|0|0': 1.0912484581271156,
                          'A_2|3|4_0|0|0_1|1|1': 109.47122114377756,
                          'D_3_0_1_2': 120.00000000000001,
                          'D_4_0_1_2': 239.99999999999997},
                 'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}}
        expected_zmat_str_01 = """  C
  H       1    1.0912
  H       1    1.0912       2  109.4712
  H       1    1.0912       2  109.4712       3  120.0000
  H       1    1.0912       2  109.4712       3  240.0000
"""
        expected_zmat_str_02 = """  C
  H,       1,    1.0912
  H,       1,    1.0912,       2,  109.4712
  H,       1,    1.0912,       2,  109.4712,       3,  120.0000
  H,       1,    1.0912,       2,  109.4712,       3,  240.0000
"""
        expected_zmat_str_03 = """  C
  H       1      R1
  H       1      R1       2      A1
  H       1      R1       2      A1       3      D1
  H       1      R1       2      A1       3      D2
Variables:
A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912
"""
        expected_zmat_str_04 = """A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912

  C
  H,       1,      R1
  H,       1,      R1,       2,      A1
  H,       1,      R1,       2,      A1,       3,      D1
  H,       1,      R1,       2,      A1,       3,      D2
"""
        expected_zmat_str_05 = """  C
  H       1      R1
  H       1      R1       2      A1
  H       1      R1       2      A1       3      D1
  H       1      R1       2      A1       3      D2

A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912
"""

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='gaussian', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_01)

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='molpro', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_02)

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='orca', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_01)

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='qchem', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_01)

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='psi4', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_01)

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='gaussian', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_03)

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='molpro', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_04)

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='orca', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_01)

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='qchem', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_05)

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='psi4', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_05)

        zmat1 = {'symbols': ('N', 'C', 'X', 'C', 'C', 'C', 'C', 'C', 'C',
                             'C', 'X', 'C', 'H', 'H', 'H', 'H', 'X', 'H'),
                 'coords': ((None, None, None),
                            ('R_1_0', None, None),
                            ('RX_2|10|16_1|9|11', 'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|7|16', None),
                            ('R_3_1', 'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|7|16',
                             'DX_3|11|17_1|9|11_2|10|16_0|7|7'),
                            ('R_4_3', 'A_4_3_1', 'D_4_3_1_0'),
                            ('R_5_3', 'A_5_3_4', 'D_5|9_3|7_4|8_1|6'),
                            ('R_6_4', 'A_6_4_3', 'D_6_4_3_5'),
                            ('R_7_5', 'A_7_5_3', 'D_7|8_5|6_3|4_4|3'),
                            ('R_8_6', 'A_8_6_4', 'D_7|8_5|6_3|4_4|3'),
                            ('R_9_7', 'A_9_7_8', 'D_5|9_3|7_4|8_1|6'),
                            ('RX_2|10|16_1|9|11', 'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|7|16', 'DX_10_9_7_8'),
                            ('R_11_9', 'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|7|16',
                             'DX_3|11|17_1|9|11_2|10|16_0|7|7'),
                            ('R_12_8', 'A_12_8_6', 'D_12|13|14_8|6|4_6|8|6_4|7|8'),
                            ('R_13_6', 'A_13_6_8', 'D_12|13|14_8|6|4_6|8|6_4|7|8'),
                            ('R_14|15_4|5', 'A_14_4_6', 'D_12|13|14_8|6|4_6|8|6_4|7|8'),
                            ('R_14|15_4|5', 'A_15_5_7', 'D_15_5_7_9'),
                            ('RX_2|10|16_1|9|11', 'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|7|16', 'DX_16_11_7_9'),
                            ('R_17_11', 'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|7|16',
                             'DX_3|11|17_1|9|11_2|10|16_0|7|7')),
                 'vars': {'R_1_0': 1.160587988259717, 'R_3_1': 1.4334034806467013, 'R_4_3': 1.399627009160122,
                          'A_4_3_1': 120.07019183443934, 'D_4_3_1_0': 359.9937872737281,
                          'R_5_3': 1.399473903784766, 'A_5_3_4': 119.881331942158, 'R_6_4': 1.3958533508611464,
                          'A_6_4_3': 120.08126334426318, 'D_6_4_3_5': 359.9999896133953,
                          'R_7_5': 1.3971923740671386, 'A_7_5_3': 119.9563068700548, 'R_8_6': 1.3959594593665048,
                          'A_8_6_4': 119.9482566876851, 'R_9_7': 1.4305023206087322, 'A_9_7_8': 120.02391642181419,
                          'DX_10_9_7_8': 179.99687489419622, 'R_11_9': 1.2007843136670773,
                          'R_12_8': 1.0880999543508234, 'A_12_8_6': 119.53324505705585,
                          'R_13_6': 1.0875755415362989, 'A_13_6_8': 119.9515345136673,
                          'A_14_4_6': 119.41761055861897, 'A_15_5_7': 119.8756160539422,
                          'DX_16_11_7_9': 179.99364917335183, 'R_17_11': 1.0653051483625748,
                          'RX_2|10|16_1|9|11': 1.0, 'R_14|15_4|5': 1.088721623781535,
                          'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|7|16': 90.0,
                          'DX_3|11|17_1|9|11_2|10|16_0|7|7': 180.0,
                          'D_12|13|14_8|6|4_6|8|6_4|7|8': 180.00000001419417,
                          'D_5|9_3|7_4|8_1|6': 180.0000026484778, 'D_15_5_7_9': 7.778248095798993e-06,
                          'D_7|8_5|6_3|4_4|3': 6.434770254282058e-06},
                 'map': {0: 5, 1: 4, 2: 'X', 3: 3, 4: 2, 5: 6, 6: 1, 7: 7, 8: 0, 9: 8, 10: 'X', 11: 9, 12: 10,
                         13: 11, 14: 12, 15: 13, 16: 'X', 17: 14}}
        expected_zmat_str_11 = """  N
  C       1    1.1606
  X       2    1.0000       1   90.0000
  C       2    1.4334       3   90.0000       1  180.0000
  C       4    1.3996       2  120.0702       1  359.9938
  C       4    1.3995       5  119.8813       2  180.0000
  C       5    1.3959       4  120.0813       6  360.0000
  C       6    1.3972       4  119.9563       5    0.0000
  C       7    1.3960       5  119.9483       4    0.0000
  C       8    1.4305       9  120.0239       7  180.0000
  X      10    1.0000       8   90.0000       9  179.9969
  C      10    1.2008      11   90.0000       8  180.0000
  H       9    1.0881       7  119.5332       5  180.0000
  H       7    1.0876       9  119.9515       8  180.0000
  H       5    1.0887       7  119.4176       9  180.0000
  H       6    1.0887       8  119.8756      10    0.0000
  X      12    1.0000       8   90.0000      10  179.9936
  H      12    1.0653      17   90.0000       8  180.0000
"""
        expected_zmat_str_12 = """  N
  C,       1,    1.1606
  X,       2,    1.0000,       1,   90.0000
  C,       2,    1.4334,       3,   90.0000,       1,  180.0000
  C,       4,    1.3996,       2,  120.0702,       1,  359.9938
  C,       4,    1.3995,       5,  119.8813,       2,  180.0000
  C,       5,    1.3959,       4,  120.0813,       6,  360.0000
  C,       6,    1.3972,       4,  119.9563,       5,    0.0000
  C,       7,    1.3960,       5,  119.9483,       4,    0.0000
  C,       8,    1.4305,       9,  120.0239,       7,  180.0000
  X,      10,    1.0000,       8,   90.0000,       9,  179.9969
  C,      10,    1.2008,      11,   90.0000,       8,  180.0000
  H,       9,    1.0881,       7,  119.5332,       5,  180.0000
  H,       7,    1.0876,       9,  119.9515,       8,  180.0000
  H,       5,    1.0887,       7,  119.4176,       9,  180.0000
  H,       6,    1.0887,       8,  119.8756,      10,    0.0000
  X,      12,    1.0000,       8,   90.0000,      10,  179.9936
  H,      12,    1.0653,      17,   90.0000,       8,  180.0000
"""
        expected_zmat_str_13 = """  N
  C       1    1.1606
 DA       2    1.0000       1   90.0000
  C       2    1.4334       3   90.0000       1  180.0000
  C       4    1.3996       2  120.0702       1  359.9938
  C       4    1.3995       5  119.8813       2  180.0000
  C       5    1.3959       4  120.0813       6  360.0000
  C       6    1.3972       4  119.9563       5    0.0000
  C       7    1.3960       5  119.9483       4    0.0000
  C       8    1.4305       9  120.0239       7  180.0000
 DA      10    1.0000       8   90.0000       9  179.9969
  C      10    1.2008      11   90.0000       8  180.0000
  H       9    1.0881       7  119.5332       5  180.0000
  H       7    1.0876       9  119.9515       8  180.0000
  H       5    1.0887       7  119.4176       9  180.0000
  H       6    1.0887       8  119.8756      10    0.0000
 DA      12    1.0000       8   90.0000      10  179.9936
  H      12    1.0653      17   90.0000       8  180.0000
"""
        expected_zmat_str_14 = """  N
  C       1      R1
  X       2      R2       1      A1
  C       2      R3       3      A1       1      D1
  C       4      R4       2      A2       1      D2
  C       4      R5       5      A3       2      D3
  C       5      R6       4      A4       6      D4
  C       6      R7       4      A5       5      D5
  C       7      R8       5      A6       4      D5
  C       8      R9       9      A7       7      D3
  X      10      R2       8      A1       9      D6
  C      10     R10      11      A1       8      D1
  H       9     R11       7      A8       5      D7
  H       7     R12       9      A9       8      D7
  H       5     R13       7     A10       9      D7
  H       6     R13       8     A11      10      D8
  X      12      R2       8      A1      10      D9
  H      12     R14      17      A1       8      D1
Variables:
A10=119.4176
A11=119.8756
A1=90.0000
A2=120.0702
A3=119.8813
A4=120.0813
A5=119.9563
A6=119.9483
A7=120.0239
A8=119.5332
A9=119.9515
D1=180.0000
D2=359.9938
D3=180.0000
D4=360.0000
D5=0.0000
D6=179.9969
D7=180.0000
D8=0.0000
D9=179.9936
R10=1.2008
R11=1.0881
R12=1.0876
R13=1.0887
R14=1.0653
R1=1.1606
R2=1.0000
R3=1.4334
R4=1.3996
R5=1.3995
R6=1.3959
R7=1.3972
R8=1.3960
R9=1.4305
"""
        expected_zmat_str_15 = """A10=119.4176
A11=119.8756
A1=90.0000
A2=120.0702
A3=119.8813
A4=120.0813
A5=119.9563
A6=119.9483
A7=120.0239
A8=119.5332
A9=119.9515
D1=180.0000
D2=359.9938
D3=180.0000
D4=360.0000
D5=0.0000
D6=179.9969
D7=180.0000
D8=0.0000
D9=179.9936
R10=1.2008
R11=1.0881
R12=1.0876
R13=1.0887
R14=1.0653
R1=1.1606
R2=1.0000
R3=1.4334
R4=1.3996
R5=1.3995
R6=1.3959
R7=1.3972
R8=1.3960
R9=1.4305

  N
  C,       1,      R1
  X,       2,      R2,       1,      A1
  C,       2,      R3,       3,      A1,       1,      D1
  C,       4,      R4,       2,      A2,       1,      D2
  C,       4,      R5,       5,      A3,       2,      D3
  C,       5,      R6,       4,      A4,       6,      D4
  C,       6,      R7,       4,      A5,       5,      D5
  C,       7,      R8,       5,      A6,       4,      D5
  C,       8,      R9,       9,      A7,       7,      D3
  X,      10,      R2,       8,      A1,       9,      D6
  C,      10,     R10,      11,      A1,       8,      D1
  H,       9,     R11,       7,      A8,       5,      D7
  H,       7,     R12,       9,      A9,       8,      D7
  H,       5,     R13,       7,     A10,       9,      D7
  H,       6,     R13,       8,     A11,      10,      D8
  X,      12,      R2,       8,      A1,      10,      D9
  H,      12,     R14,      17,      A1,       8,      D1
"""
        expected_zmat_str_16 = """  N
  C       1      R1
  X       2      R2       1      A1
  C       2      R3       3      A1       1      D1
  C       4      R4       2      A2       1      D2
  C       4      R5       5      A3       2      D3
  C       5      R6       4      A4       6      D4
  C       6      R7       4      A5       5      D5
  C       7      R8       5      A6       4      D5
  C       8      R9       9      A7       7      D3
  X      10      R2       8      A1       9      D6
  C      10     R10      11      A1       8      D1
  H       9     R11       7      A8       5      D7
  H       7     R12       9      A9       8      D7
  H       5     R13       7     A10       9      D7
  H       6     R13       8     A11      10      D8
  X      12      R2       8      A1      10      D9
  H      12     R14      17      A1       8      D1

A10=119.4176
A11=119.8756
A1=90.0000
A2=120.0702
A3=119.8813
A4=120.0813
A5=119.9563
A6=119.9483
A7=120.0239
A8=119.5332
A9=119.9515
D1=180.0000
D2=359.9938
D3=180.0000
D4=360.0000
D5=0.0000
D6=179.9969
D7=180.0000
D8=0.0000
D9=179.9936
R10=1.2008
R11=1.0881
R12=1.0876
R13=1.0887
R14=1.0653
R1=1.1606
R2=1.0000
R3=1.4334
R4=1.3996
R5=1.3995
R6=1.3959
R7=1.3972
R8=1.3960
R9=1.4305
"""

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='gaussian', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_11)

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='molpro', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_12)

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='orca', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_13)

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='qchem', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_11)

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='psi4', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_11)

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='gaussian', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_14)

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='molpro', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_15)

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='orca', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_13)

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='qchem', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_16)

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='psi4', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_16)

        zmat2 = {'symbols': ('C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
                             'C', 'C', 'N', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
                             'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
                             'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
                             'H', 'H', 'H', 'H'),
                 'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                            ('R_3_2', 'A_3_2_1', 'D_3_2_1_0'), ('R_4_2', 'A_4_2_3', 'D_4_2_3_1'),
                            ('R_5_3', 'A_5_3_2', 'D_5_3_2_4'), ('R_6_4', 'A_6_4_2', 'D_6_4_2_3'),
                            ('R_7_4', 'A_7_4_6', 'D_7_4_6_5'), ('R_8_5', 'A_8_5_3', 'D_8_5_3_7'),
                            ('R_9_7', 'A_9_7_4', 'D_9_7_4_6'), ('R_10_8', 'A_10_8_5', 'D_10_8_5_3'),
                            ('R_11_9', 'A_11_9_7', 'D_11_9_7_4'), ('R_12|13_10|10', 'A_12_10_8', 'D_12_10_8_5'),
                            ('R_12|13_10|10', 'A_13_10_12', 'D_13_10_12_11'),
                            ('R_14_11', 'A_14_11_9', 'D_14_11_9_7'), ('R_15_11', 'A_15_11_14', 'D_15_11_14_13'),
                            ('R_16_14', 'A_16_14_11', 'D_16_14_11_15'), ('R_17_14', 'A_17_14_16', 'D_17_14_16_15'),
                            ('R_18_15', 'A_18_15_11', 'D_18_15_11_14'), ('R_19_15', 'A_19_15_18', 'D_19_15_18_17'),
                            ('R_20_16', 'A_20_16_14', 'D_20_16_14_19'), ('R_21_17', 'A_21_17_14', 'D_21_17_14_16'),
                            ('R_22_18', 'A_22_18_15', 'D_22_18_15_21'), ('R_23_18', 'A_23_18_22', 'D_23_18_22_21'),
                            ('R_24_22', 'A_24_22_18', 'D_24_22_18_23'), ('R_25_22', 'A_25_22_24', 'D_25_22_24_23'),
                            ('R_26_23', 'A_26_23_18', 'D_26_23_18_22'), ('R_27_23', 'A_27_23_26', 'D_27_23_26_25'),
                            ('R_28|29_24|25', 'A_28_24_22', 'D_28_24_22_27'),
                            ('R_28|29_24|25', 'A_29_25_22', 'D_29_25_22_24'),
                            ('R_30_26', 'A_30_26_23', 'D_30_26_23_29'), ('R_31_27', 'A_31_27_23', 'D_31_27_23_26'),
                            ('R_32_28', 'A_32_28_24', 'D_32_28_24_31'), ('R_33_30', 'A_33_30_26', 'D_33_30_26_32'),
                            ('R_34_0', 'A_34_0_1', 'D_34_0_1_33'), ('R_35|36_0|0', 'A_35_0_1', 'D_35_0_1_34'),
                            ('R_35|36_0|0', 'A_36_0_1', 'D_36_0_1_35'), ('R_37_3', 'A_37_3_5', 'D_37_3_5_36'),
                            ('R_38_5', 'A_38_5_3', 'D_38_5_3_37'),
                            ('R_39|62|63_6|33|31', 'A_39|61_6|30_8|33', 'D_39_6_8_5'),
                            ('R_40_7', 'A_40_7_4', 'D_40_7_4_6'), ('R_41|45_7|16', 'A_41_7_4', 'D_41_7_4_6'),
                            ('R_42_9', 'A_42_9_7', 'D_42_9_7_4'), ('R_43_11', 'A_43_11_14', 'D_43_11_14_16'),
                            ('R_44|69_14|13', 'A_44_14_16', 'D_44_14_16_20'),
                            ('R_41|45_7|16', 'A_45_16_20', 'D_45_16_20_44'),
                            ('R_46|67_16|12', 'A_46_16_20', 'D_46_16_20_45'),
                            ('R_47_20', 'A_47_20_16', 'D_47_20_16_46'),
                            ('R_48|71_20|13', 'A_48_20_16', 'D_48_20_16_47'),
                            ('R_49_21', 'A_49_21_17', 'D_49_21_17_48'), ('R_50_21', 'A_50_21_17', 'D_50_21_17_49'),
                            ('R_51_17', 'A_51_17_21', 'D_51_17_21_50'), ('R_52_17', 'A_52_17_21', 'D_52_17_21_51'),
                            ('R_53_15', 'A_53_15_18', 'D_53_15_18_22'), ('R_54_18', 'A_54_18_22', 'D_54_18_22_24'),
                            ('R_55|61_24|30', 'A_55_24_28', 'D_55_24_28_32'),
                            ('R_56_28', 'A_56_28_32', 'D_56_28_32_55'), ('R_57_32', 'A_57_32_28', 'D_57_32_28_56'),
                            ('R_58_29', 'A_58_29_32', 'D_58_29_32_28'), ('R_59_25', 'A_59_25_29', 'D_59_25_29_32'),
                            ('R_60_26', 'A_60_26_30', 'D_60_26_30_33'),
                            ('R_55|61_24|30', 'A_39|61_6|30_8|33', 'D_61_30_33_60'),
                            ('R_39|62|63_6|33|31', 'A_62_33_30', 'D_62_33_30_61'),
                            ('R_39|62|63_6|33|31', 'A_63_31_33', 'D_63_31_33_30'),
                            ('R_64_27', 'A_64_27_31', 'D_64_27_31_33'), ('R_65_10', 'A_65_10_12', 'D_65_10_12_64'),
                            ('R_66_12', 'A_66_12_10', 'D_66_12_10_65'),
                            ('R_46|67_16|12', 'A_67_12_10', 'D_67_12_10_66'),
                            ('R_68_12', 'A_68_12_10', 'D_68_12_10_67'),
                            ('R_44|69_14|13', 'A_69_13_10', 'D_69_13_10_12'),
                            ('R_70_13', 'A_70_13_10', 'D_70_13_10_12'),
                            ('R_48|71_20|13', 'A_71_13_10', 'D_71_13_10_12')),
                 'vars': {'R_1_0': 1.4068711074782032, 'R_2_1': 1.3620388633039997, 'A_2_1_0': 117.81232558560784,
                          'R_3_2': 1.391372651128763, 'A_3_2_1': 124.30442082983046,
                          'D_3_2_1_0': 358.80053488528563, 'R_4_2': 1.407165314230306,
                          'A_4_2_3': 120.22693948333985, 'D_4_2_3_1': 179.7643774197255,
                          'R_5_3': 1.395461939277298, 'A_5_3_2': 119.73931773168835,
                          'D_5_3_2_4': 0.30910214744821457, 'R_6_4': 1.3877359017886286,
                          'A_6_4_2': 118.48974827202117, 'D_6_4_2_3': 359.11497147002314,
                          'R_7_4': 1.5088674382960545, 'A_7_4_6': 122.38406068272145,
                          'D_7_4_6_5': 180.25417879927906, 'R_8_5': 1.3900031510324233,
                          'A_8_5_3': 121.44469623059197, 'D_8_5_3_7': 0.5027472760190826,
                          'R_9_7': 1.4539199623473884, 'A_9_7_4': 112.21823538125288,
                          'D_9_7_4_6': 14.242037171848425, 'R_10_8': 1.5148894107856192,
                          'A_10_8_5': 121.17080095438938, 'D_10_8_5_3': 179.9597843354432,
                          'R_11_9': 1.458829940527558, 'A_11_9_7': 113.36650018284135,
                          'D_11_9_7_4': 173.834760621422, 'A_12_10_8': 111.64086954581774,
                          'D_12_10_8_5': 116.98497014249006, 'A_13_10_12': 110.85810373139734,
                          'D_13_10_12_11': 274.0460801662506, 'R_14_11': 1.5441580908685246,
                          'A_14_11_9': 110.96750832787642, 'D_14_11_9_7': 65.76967583715182,
                          'R_15_11': 1.5658713019482593, 'A_15_11_14': 106.10459226441324,
                          'D_15_11_14_13': 257.4049853604813, 'R_16_14': 1.5344969908783297,
                          'A_16_14_11': 108.8913587403986, 'D_16_14_11_15': 48.05688175736311,
                          'R_17_14': 1.5311976054044314, 'A_17_14_16': 108.49034048752937,
                          'D_17_14_16_15': 91.23995113317, 'R_18_15': 1.5451815033749894,
                          'A_18_15_11': 116.11845152538739, 'D_18_15_11_14': 146.22047073574328,
                          'R_19_15': 1.4673758226459452, 'A_19_15_18': 110.7852411579366,
                          'D_19_15_18_17': 62.01563663336134, 'R_20_16': 1.5497385358243323,
                          'A_20_16_14': 107.53566674813322, 'D_20_16_14_19': 351.2483905859404,
                          'R_21_17': 1.5462718519857788, 'A_21_17_14': 106.97932503747639,
                          'D_21_17_14_16': 293.048840478175, 'R_22_18': 1.5217756548342598,
                          'A_22_18_15': 110.6461222572256, 'D_22_18_15_21': 272.8016532613752,
                          'R_23_18': 1.5205844867168337, 'A_23_18_22': 110.88052896008966,
                          'D_23_18_22_21': 176.9274014626608, 'R_24_22': 1.3973414212027988,
                          'A_24_22_18': 121.46148754423552, 'D_24_22_18_23': 48.483057110257214,
                          'R_25_22': 1.3956596873816258, 'A_25_22_24': 118.32252922839507,
                          'D_25_22_24_23': 155.19218465708076, 'R_26_23': 1.3989838539838766,
                          'A_26_23_18': 123.40300309756425, 'D_26_23_18_22': 264.6937408441694,
                          'R_27_23': 1.4014860627797747, 'A_27_23_26': 117.86550410924565,
                          'D_27_23_26_25': 222.36333363654833, 'A_28_24_22': 120.88443385017754,
                          'D_28_24_22_27': 227.76707495071304, 'A_29_25_22': 121.04662788690233,
                          'D_29_25_22_24': 0.15222637990797427, 'R_30_26': 1.394073496683031,
                          'A_30_26_23': 120.95614937868622, 'D_30_26_23_29': 126.53572469389098,
                          'R_31_27': 1.3890980255767607, 'A_31_27_23': 121.36857503495831,
                          'D_31_27_23_26': 359.77985644401133, 'R_32_28': 1.3930402205740813,
                          'A_32_28_24': 120.23752381147851, 'D_32_28_24_31': 268.62324089632773,
                          'R_33_30': 1.390793650826528, 'A_33_30_26': 120.37525896699913,
                          'D_33_30_26_32': 66.57244008197594, 'R_34_0': 1.0911855880062449,
                          'A_34_0_1': 106.14081893106686, 'D_34_0_1_33': 259.90390819354144,
                          'A_35_0_1': 111.62128410536447, 'D_35_0_1_34': 241.16372138544352,
                          'A_36_0_1': 111.66742192220599, 'D_36_0_1_35': 237.70696149500208,
                          'R_37_3': 1.0848714961586419, 'A_37_3_5': 119.37285834333473,
                          'D_37_3_5_36': 62.67906989420941, 'R_38_5': 1.088518492286195,
                          'A_38_5_3': 118.92620006821393, 'D_38_5_3_37': 0.16155928445680842,
                          'D_39_6_8_5': 179.0306314544242, 'R_40_7': 1.1049040845091331,
                          'A_40_7_4': 108.86879068201986, 'D_40_7_4_6': 139.3906437684841,
                          'A_41_7_4': 108.59126141516668, 'D_41_7_4_6': 253.62050153797705,
                          'R_42_9': 1.0182559049694069, 'A_42_9_7': 107.11973040523138,
                          'D_42_9_7_4': 55.10057236176582, 'R_43_11': 1.107980039165429,
                          'A_43_11_14': 107.85441775901623, 'D_43_11_14_16': 291.70546551063177,
                          'A_44_14_16': 109.65746800014512, 'D_44_14_16_20': 171.72368834876247,
                          'A_45_16_20': 111.24450807891851, 'D_45_16_20_44': 233.89755520678503,
                          'A_46_16_20': 111.29692848764192, 'D_46_16_20_45': 241.0468305740966,
                          'R_47_20': 1.096849083662209, 'A_47_20_16': 111.09616229392863,
                          'D_47_20_16_46': 16.449617902450537, 'A_48_20_16': 111.52503768612455,
                          'D_48_20_16_47': 240.7618062149115, 'R_49_21': 1.0940959928126268,
                          'A_49_21_17': 110.13443680950392, 'D_49_21_17_48': 217.77189854569497,
                          'R_50_21': 1.096719688440126, 'A_50_21_17': 111.62985686445653,
                          'D_50_21_17_49': 241.05422281949743, 'R_51_17': 1.0977381339703496,
                          'A_51_17_21': 111.44776831381952, 'D_51_17_21_50': 15.528289052443741,
                          'R_52_17': 1.094598059892181, 'A_52_17_21': 110.53147774341073,
                          'D_52_17_21_51': 240.39865996976488, 'R_53_15': 1.0982909624400494,
                          'A_53_15_18': 106.429357164818, 'D_53_15_18_22': 61.470751869183154,
                          'R_54_18': 1.0970296462720617, 'A_54_18_22': 106.96777284646672,
                          'D_54_18_22_24': 164.41040442499542, 'A_55_24_28': 119.47619426431699,
                          'D_55_24_28_32': 181.48222884297238, 'R_56_28': 1.08730126242135,
                          'A_56_28_32': 120.0587532127532, 'D_56_28_32_55': 181.72714726324057,
                          'R_57_32': 1.086078113261693, 'A_57_32_28': 120.2651297728285,
                          'D_57_32_28_56': 0.1885577391117047, 'R_58_29': 1.0870685313396384,
                          'A_58_29_32': 120.07908990555488, 'D_58_29_32_28': 179.96387750780062,
                          'R_59_25': 1.0874930019811209, 'A_59_25_29': 119.67416329184535,
                          'D_59_25_29_32': 180.66442828925082, 'R_60_26': 1.086517453558622,
                          'A_60_26_30': 118.87966199467574, 'D_60_26_30_33': 180.36117265862282,
                          'D_61_30_33_60': 180.46795995787124, 'A_62_33_30': 120.34351414488708,
                          'D_62_33_30_61': 359.8441625328373, 'A_63_31_33': 120.1876734578171,
                          'D_63_31_33_30': 179.8727443598017, 'R_64_27': 1.0887706765139673,
                          'A_64_27_31': 119.71596042006831, 'D_64_27_31_33': 180.68549262930415,
                          'R_65_10': 1.0986729593359108, 'A_65_10_12': 107.51123289481629,
                          'D_65_10_12_64': 165.62060869603135, 'R_66_12': 1.0960386581877504,
                          'A_66_12_10': 110.99193387843255, 'D_66_12_10_65': 180.6436999847381,
                          'A_67_12_10': 110.90607858329234, 'D_67_12_10_66': 119.70065256970501,
                          'R_68_12': 1.0957071504841942, 'A_68_12_10': 111.15695171088588,
                          'D_68_12_10_67': 120.53155191727633, 'A_69_13_10': 111.13656189059795,
                          'D_69_13_10_12': 182.12620964839553, 'R_70_13': 1.0958250253360018,
                          'A_70_13_10': 111.10194518361305, 'D_70_13_10_12': 62.241824998638606,
                          'A_71_13_10': 110.8095963043876, 'D_71_13_10_12': 302.5342816974694,
                          'R_12|13_10|10': 1.5313937839809675, 'R_28|29_24|25': 1.3915166242825472,
                          'R_35|36_0|0': 1.0980711183126348, 'R_39|62|63_6|33|31': 1.0869053245812599,
                          'R_41|45_7|16': 1.0984625788982956, 'R_44|69_14|13': 1.0952809653577469,
                          'R_46|67_16|12': 1.096203285865352, 'R_48|71_20|13': 1.096367755118811,
                          'R_55|61_24|30': 1.0866606245254218, 'A_39|61_6|30_8|33': 120.08274154017411},
                 'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 7, 5: 4, 6: 6, 7: 8, 8: 5, 9: 9, 10: 31, 11: 10, 12: 32,
                         13: 33, 14: 11, 15: 17, 16: 12, 17: 16, 18: 18, 19: 14, 20: 13, 21: 15, 22: 19, 23: 25,
                         24: 20, 25: 24, 26: 26, 27: 30, 28: 21, 29: 23, 30: 27, 31: 29, 32: 22, 33: 28, 34: 34,
                         35: 35, 36: 36, 37: 37, 38: 38, 39: 39, 40: 40, 41: 41, 42: 42, 43: 43, 44: 44, 45: 45,
                         46: 46, 47: 47, 48: 48, 49: 49, 50: 50, 51: 51, 52: 52, 53: 53, 54: 54, 55: 55, 56: 56,
                         57: 57, 58: 58, 59: 59, 60: 60, 61: 61, 62: 62, 63: 63, 64: 64, 65: 65, 66: 66, 67: 67,
                         68: 68, 69: 69, 70: 70, 71: 71}}
        expected_zmat_str_2 = """  C
  O       1      R1
  C       2      R2       1      A1
  C       3      R3       2      A2       1      D1
  C       3      R4       4      A3       2      D2
  C       4      R5       3      A4       5      D3
  C       5      R6       3      A5       4      D4
  C       5      R7       7      A6       6      D5
  C       6      R8       4      A7       8      D6
  N       8      R9       5      A8       7      D7
  C       9     R10       6      A9       4      D8
  C      10     R11       8     A10       5      D9
  C      11     R12       9     A11       6     D10
  C      11     R12      13     A12      12     D11
  C      12     R13      10     A13       8     D12
  C      12     R14      15     A14      14     D13
  C      15     R15      12     A15      16     D14
  C      15     R16      17     A16      16     D15
  C      16     R17      12     A17      15     D16
  N      16     R18      19     A18      18     D17
  C      17     R19      15     A19      20     D18
  C      18     R20      15     A20      17     D19
  C      19     R21      16     A21      22     D20
  C      19     R22      23     A22      22     D21
  C      23     R23      19     A23      24     D22
  C      23     R24      25     A24      24     D23
  C      24     R25      19     A25      23     D24
  C      24     R26      27     A26      26     D25
  C      25     R27      23     A27      28     D26
  C      26     R27      23     A28      25     D27
  C      27     R28      24     A29      30     D28
  C      28     R29      24     A30      27     D29
  C      29     R30      25     A31      32     D30
  C      31     R31      27     A32      33     D31
  H       1     R32       2     A33      34     D32
  H       1     R33       2     A34      35     D33
  H       1     R33       2     A35      36     D34
  H       4     R34       6     A36      37     D35
  H       6     R35       4     A37      38     D36
  H       7     R36       9     A38       6     D37
  H       8     R37       5     A39       7     D38
  H       8     R38       5     A40       7     D39
  H      10     R39       8     A41       5     D40
  H      12     R40      15     A42      17     D41
  H      15     R41      17     A43      21     D42
  H      17     R38      21     A44      45     D43
  H      17     R42      21     A45      46     D44
  H      21     R43      17     A46      47     D45
  H      21     R44      17     A47      48     D46
  H      22     R45      18     A48      49     D47
  H      22     R46      18     A49      50     D48
  H      18     R47      22     A50      51     D49
  H      18     R48      22     A51      52     D50
  H      16     R49      19     A52      23     D51
  H      19     R50      23     A53      25     D52
  H      25     R51      29     A54      33     D53
  H      29     R52      33     A55      56     D54
  H      33     R53      29     A56      57     D55
  H      30     R54      33     A57      29     D56
  H      26     R55      30     A58      33     D57
  H      27     R56      31     A59      34     D58
  H      31     R51      34     A38      61     D59
  H      34     R36      31     A60      62     D60
  H      32     R36      34     A61      31     D61
  H      28     R57      32     A62      34     D62
  H      11     R58      13     A63      65     D63
  H      13     R59      11     A64      66     D64
  H      13     R42      11     A65      67     D65
  H      13     R60      11     A66      68     D66
  H      14     R41      11     A67      13     D67
  H      14     R61      11     A68      13     D68
  H      14     R44      11     A69      13     D69
Variables:
A10=113.3665
A11=111.6409
A12=110.8581
A13=110.9675
A14=106.1046
A15=108.8914
A16=108.4903
A17=116.1185
A18=110.7852
A19=107.5357
A1=117.8123
A20=106.9793
A21=110.6461
A22=110.8805
A23=121.4615
A24=118.3225
A25=123.4030
A26=117.8655
A27=120.8844
A28=121.0466
A29=120.9561
A2=124.3044
A30=121.3686
A31=120.2375
A32=120.3753
A33=106.1408
A34=111.6213
A35=111.6674
A36=119.3729
A37=118.9262
A38=120.0827
A39=108.8688
A3=120.2269
A40=108.5913
A41=107.1197
A42=107.8544
A43=109.6575
A44=111.2445
A45=111.2969
A46=111.0962
A47=111.5250
A48=110.1344
A49=111.6299
A4=119.7393
A50=111.4478
A51=110.5315
A52=106.4294
A53=106.9678
A54=119.4762
A55=120.0588
A56=120.2651
A57=120.0791
A58=119.6742
A59=118.8797
A5=118.4897
A60=120.3435
A61=120.1877
A62=119.7160
A63=107.5112
A64=110.9919
A65=110.9061
A66=111.1570
A67=111.1366
A68=111.1019
A69=110.8096
A6=122.3841
A7=121.4447
A8=112.2182
A9=121.1708
D10=116.9850
D11=274.0461
D12=65.7697
D13=257.4050
D14=48.0569
D15=91.2400
D16=146.2205
D17=62.0156
D18=351.2484
D19=293.0488
D1=358.8005
D20=272.8017
D21=176.9274
D22=48.4831
D23=155.1922
D24=264.6937
D25=222.3633
D26=227.7671
D27=0.1522
D28=126.5357
D29=359.7799
D2=179.7644
D30=268.6232
D31=66.5724
D32=259.9039
D33=241.1637
D34=237.7070
D35=62.6791
D36=0.1616
D37=179.0306
D38=139.3906
D39=253.6205
D3=0.3091
D40=55.1006
D41=291.7055
D42=171.7237
D43=233.8976
D44=241.0468
D45=16.4496
D46=240.7618
D47=217.7719
D48=241.0542
D49=15.5283
D4=359.1150
D50=240.3987
D51=61.4708
D52=164.4104
D53=181.4822
D54=181.7271
D55=0.1886
D56=179.9639
D57=180.6644
D58=180.3612
D59=180.4680
D5=180.2542
D60=359.8442
D61=179.8727
D62=180.6855
D63=165.6206
D64=180.6437
D65=119.7007
D66=120.5316
D67=182.1262
D68=62.2418
D69=302.5343
D6=0.5027
D7=14.2420
D8=179.9598
D9=173.8348
R10=1.5149
R11=1.4588
R12=1.5314
R13=1.5442
R14=1.5659
R15=1.5345
R16=1.5312
R17=1.5452
R18=1.4674
R19=1.5497
R1=1.4069
R20=1.5463
R21=1.5218
R22=1.5206
R23=1.3973
R24=1.3957
R25=1.3990
R26=1.4015
R27=1.3915
R28=1.3941
R29=1.3891
R2=1.3620
R30=1.3930
R31=1.3908
R32=1.0912
R33=1.0981
R34=1.0849
R35=1.0885
R36=1.0869
R37=1.1049
R38=1.0985
R39=1.0183
R3=1.3914
R40=1.1080
R41=1.0953
R42=1.0962
R43=1.0968
R44=1.0964
R45=1.0941
R46=1.0967
R47=1.0977
R48=1.0946
R49=1.0983
R4=1.4072
R50=1.0970
R51=1.0867
R52=1.0873
R53=1.0861
R54=1.0871
R55=1.0875
R56=1.0865
R57=1.0888
R58=1.0987
R59=1.0960
R5=1.3955
R60=1.0957
R61=1.0958
R6=1.3877
R7=1.5089
R8=1.3900
R9=1.4539
"""
        zmat_str = converter.zmat_to_str(zmat2, zmat_format='gaussian', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_2)

    def test_str_to_zmat(self):
        """Test generating a zmat from a string representation"""
        zmat_str_0 = """  N
  C       1    1.1606
  X       2    1.0000       1   90.0000
  C       2    1.4334       3   90.0000       1  180.0000
  C       4    1.3996       2  120.0702       1  359.9938
  C       4    1.3995       5  119.8813       2  180.0000
  C       5    1.3959       4  120.0813       6  360.0000
  C       6    1.3972       4  119.9563       5    0.0000
  C       7    1.3960       5  119.9483       4    0.0000
  C       8    1.4305       9  120.0239       7  180.0000
  X      10    1.0000       8   90.0000       9  179.9969
  C      10    1.2008      11   90.0000       8  180.0000
  H       9    1.0881       7  119.5332       5  180.0000
  H       7    1.0876       9  119.9515       8  180.0000
  H       5    1.0887       7  119.4176       9  180.0000
  H       6    1.0887       8  119.8756      10    0.0000
  X      12    1.0000       8   90.0000      10  179.9936
  H      12    1.0653      17   90.0000       8  180.0000
"""
        zmat_str_1 = """  N
  C       1      R1
  X       2      R2       1      A1
  C       2      R3       3      A1       1      D1
  C       4      R4       2      A2       1      D2
  C       4      R5       5      A3       2      D3
  C       5      R6       4      A4       6      D4
  C       6      R7       4      A5       5      D5
  C       7      R8       5      A6       4      D5
  C       8      R9       9      A7       7      D3
  X      10      R2       8      A1       9      D6
  C      10     R10      11      A1       8      D1
  H       9     R11       7      A8       5      D7
  H       7     R12       9      A9       8      D7
  H       5     R13       7     A10       9      D7
  H       6     R13       8     A11      10      D8
  X      12      R2       8      A1      10      D9
  H      12     R14      17      A1       8      D1

A10=119.4176
A11=119.8756
A1=90.0000
A2=120.0702
A3=119.8813
A4=120.0813
A5=119.9563
A6=119.9483
A7=120.0239
A8=119.5332
A9=119.9515
D1=180.0000
D2=359.9938
D3=180.0000
D4=360.0000
D5=0.0000
D6=179.9969
D7=180.0000
D8=0.0000
D9=179.9936
R10=1.2008
R11=1.0881
R12=1.0876
R13=1.0887
R14=1.0653
R1=1.1606
R2=1.0000
R3=1.4334
R4=1.3996
R5=1.3995
R6=1.3959
R7=1.3972
R8=1.3960
R9=1.4305
"""
        zmat_str_2 = """  C
          O       1      R1
          C       2      R2       1      A1
          C       3      R3       2      A2       1      D1
          C       3      R4       4      A3       2      D2
          C       4      R5       3      A4       5      D3
          C       5      R6       3      A5       4      D4
          C       5      R7       7      A6       6      D5
          C       6      R8       4      A7       8      D6
          N       8      R9       5      A8       7      D7
          C       9     R10       6      A9       4      D8
          C      10     R11       8     A10       5      D9
          C      11     R12       9     A11       6     D10
          C      11     R12      13     A12      12     D11
          C      12     R13      10     A13       8     D12
          C      12     R14      15     A14      14     D13
          C      15     R15      12     A15      16     D14
          C      15     R16      17     A16      16     D15
          C      16     R17      12     A17      15     D16
          N      16     R18      19     A18      18     D17
          C      17     R19      15     A19      20     D18
          C      18     R20      15     A20      17     D19
          C      19     R21      16     A21      22     D20
          C      19     R22      23     A22      22     D21
          C      23     R23      19     A23      24     D22
          C      23     R24      25     A24      24     D23
          C      24     R25      19     A25      23     D24
          C      24     R26      27     A26      26     D25
          C      25     R27      23     A27      28     D26
          C      26     R27      23     A28      25     D27
          C      27     R28      24     A29      30     D28
          C      28     R29      24     A30      27     D29
          C      29     R30      25     A31      32     D30
          C      31     R31      27     A32      33     D31
          H       1     R32       2     A33      34     D32
          H       1     R33       2     A34      35     D33
          H       1     R33       2     A35      36     D34
          H       4     R34       6     A36      37     D35
          H       6     R35       4     A37      38     D36
          H       7     R36       9     A38       6     D37
          H       8     R37       5     A39       7     D38
          H       8     R38       5     A40       7     D39
          H      10     R39       8     A41       5     D40
          H      12     R40      15     A42      17     D41
          H      15     R41      17     A43      21     D42
          H      17     R38      21     A44      45     D43
          H      17     R42      21     A45      46     D44
          H      21     R43      17     A46      47     D45
          H      21     R44      17     A47      48     D46
          H      22     R45      18     A48      49     D47
          H      22     R46      18     A49      50     D48
          H      18     R47      22     A50      51     D49
          H      18     R48      22     A51      52     D50
          H      16     R49      19     A52      23     D51
          H      19     R50      23     A53      25     D52
          H      25     R51      29     A54      33     D53
          H      29     R52      33     A55      56     D54
          H      33     R53      29     A56      57     D55
          H      30     R54      33     A57      29     D56
          H      26     R55      30     A58      33     D57
          H      27     R56      31     A59      34     D58
          H      31     R51      34     A38      61     D59
          H      34     R36      31     A60      62     D60
          H      32     R36      34     A61      31     D61
          H      28     R57      32     A62      34     D62
          H      11     R58      13     A63      65     D63
          H      13     R59      11     A64      66     D64
          H      13     R42      11     A65      67     D65
          H      13     R60      11     A66      68     D66
          H      14     R41      11     A67      13     D67
          H      14     R61      11     A68      13     D68
          H      14     R44      11     A69      13     D69
        Variables:
        A10=113.3665
        A11=111.6409
        A12=110.8581
        A13=110.9675
        A14=106.1046
        A15=108.8914
        A16=108.4903
        A17=116.1185
        A18=110.7852
        A19=107.5357
        A1=117.8123
        A20=106.9793
        A21=110.6461
        A22=110.8805
        A23=121.4615
        A24=118.3225
        A25=123.4030
        A26=117.8655
        A27=120.8844
        A28=121.0466
        A29=120.9561
        A2=124.3044
        A30=121.3686
        A31=120.2375
        A32=120.3753
        A33=106.1408
        A34=111.6213
        A35=111.6674
        A36=119.3729
        A37=118.9262
        A38=120.0827
        A39=108.8688
        A3=120.2269
        A40=108.5913
        A41=107.1197
        A42=107.8544
        A43=109.6575
        A44=111.2445
        A45=111.2969
        A46=111.0962
        A47=111.5250
        A48=110.1344
        A49=111.6299
        A4=119.7393
        A50=111.4478
        A51=110.5315
        A52=106.4294
        A53=106.9678
        A54=119.4762
        A55=120.0588
        A56=120.2651
        A57=120.0791
        A58=119.6742
        A59=118.8797
        A5=118.4897
        A60=120.3435
        A61=120.1877
        A62=119.7160
        A63=107.5112
        A64=110.9919
        A65=110.9061
        A66=111.1570
        A67=111.1366
        A68=111.1019
        A69=110.8096
        A6=122.3841
        A7=121.4447
        A8=112.2182
        A9=121.1708
        D10=116.9850
        D11=274.0461
        D12=65.7697
        D13=257.4050
        D14=48.0569
        D15=91.2400
        D16=146.2205
        D17=62.0156
        D18=351.2484
        D19=293.0488
        D1=358.8005
        D20=272.8017
        D21=176.9274
        D22=48.4831
        D23=155.1922
        D24=264.6937
        D25=222.3633
        D26=227.7671
        D27=0.1522
        D28=126.5357
        D29=359.7799
        D2=179.7644
        D30=268.6232
        D31=66.5724
        D32=259.9039
        D33=241.1637
        D34=237.7070
        D35=62.6791
        D36=0.1616
        D37=179.0306
        D38=139.3906
        D39=253.6205
        D3=0.3091
        D40=55.1006
        D41=291.7055
        D42=171.7237
        D43=233.8976
        D44=241.0468
        D45=16.4496
        D46=240.7618
        D47=217.7719
        D48=241.0542
        D49=15.5283
        D4=359.1150
        D50=240.3987
        D51=61.4708
        D52=164.4104
        D53=181.4822
        D54=181.7271
        D55=0.1886
        D56=179.9639
        D57=180.6644
        D58=180.3612
        D59=180.4680
        D5=180.2542
        D60=359.8442
        D61=179.8727
        D62=180.6855
        D63=165.6206
        D64=180.6437
        D65=119.7007
        D66=120.5316
        D67=182.1262
        D68=62.2418
        D69=302.5343
        D6=0.5027
        D7=14.2420
        D8=179.9598
        D9=173.8348
        R10=1.5149
        R11=1.4588
        R12=1.5314
        R13=1.5442
        R14=1.5659
        R15=1.5345
        R16=1.5312
        R17=1.5452
        R18=1.4674
        R19=1.5497
        R1=1.4069
        R20=1.5463
        R21=1.5218
        R22=1.5206
        R23=1.3973
        R24=1.3957
        R25=1.3990
        R26=1.4015
        R27=1.3915
        R28=1.3941
        R29=1.3891
        R2=1.3620
        R30=1.3930
        R31=1.3908
        R32=1.0912
        R33=1.0981
        R34=1.0849
        R35=1.0885
        R36=1.0869
        R37=1.1049
        R38=1.0985
        R39=1.0183
        R3=1.3914
        R40=1.1080
        R41=1.0953
        R42=1.0962
        R43=1.0968
        R44=1.0964
        R45=1.0941
        R46=1.0967
        R47=1.0977
        R48=1.0946
        R49=1.0983
        R4=1.4072
        R50=1.0970
        R51=1.0867
        R52=1.0873
        R53=1.0861
        R54=1.0871
        R55=1.0875
        R56=1.0865
        R57=1.0888
        R58=1.0987
        R59=1.0960
        R5=1.3955
        R60=1.0957
        R61=1.0958
        R6=1.3877
        R7=1.5089
        R8=1.3900
        R9=1.4539
        """
        expected_zmat = {'symbols': ('N', 'C', 'X', 'C', 'C', 'C', 'C', 'C', 'C',
                                     'C', 'X', 'C', 'H', 'H', 'H', 'H', 'X', 'H'),
                         'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                    ('R_3_1', 'A_3_1_2', 'D_3_1_2_0'), ('R_4_3', 'A_4_3_1', 'D_4_3_1_0'),
                                    ('R_5_3', 'A_5_3_4', 'D_5_3_4_1'), ('R_6_4', 'A_6_4_3', 'D_6_4_3_5'),
                                    ('R_7_5', 'A_7_5_3', 'D_7_5_3_4'), ('R_8_6', 'A_8_6_4', 'D_8_6_4_3'),
                                    ('R_9_7', 'A_9_7_8', 'D_9_7_8_6'), ('R_10_9', 'A_10_9_7', 'D_10_9_7_8'),
                                    ('R_11_9', 'A_11_9_10', 'D_11_9_10_7'), ('R_12_8', 'A_12_8_6', 'D_12_8_6_4'),
                                    ('R_13_6', 'A_13_6_8', 'D_13_6_8_7'), ('R_14_4', 'A_14_4_6', 'D_14_4_6_8'),
                                    ('R_15_5', 'A_15_5_7', 'D_15_5_7_9'), ('R_16_11', 'A_16_11_7', 'D_16_11_7_9'),
                                    ('R_17_11', 'A_17_11_16', 'D_17_11_16_7')),
                         'vars': {'R_1_0': 1.1606, 'R_2_1': 1.0, 'A_2_1_0': 90.0, 'R_3_1': 1.4334, 'A_3_1_2': 90.0,
                                  'D_3_1_2_0': 180.0, 'R_4_3': 1.3996, 'A_4_3_1': 120.0702, 'D_4_3_1_0': 359.9938,
                                  'R_5_3': 1.3995, 'A_5_3_4': 119.8813, 'D_5_3_4_1': 180.0, 'R_6_4': 1.3959,
                                  'A_6_4_3': 120.0813, 'D_6_4_3_5': 360.0, 'R_7_5': 1.3972, 'A_7_5_3': 119.9563,
                                  'D_7_5_3_4': 0.0, 'R_8_6': 1.396, 'A_8_6_4': 119.9483, 'D_8_6_4_3': 0.0,
                                  'R_9_7': 1.4305, 'A_9_7_8': 120.0239, 'D_9_7_8_6': 180.0, 'R_10_9': 1.0,
                                  'A_10_9_7': 90.0, 'D_10_9_7_8': 179.9969, 'R_11_9': 1.2008, 'A_11_9_10': 90.0,
                                  'D_11_9_10_7': 180.0, 'R_12_8': 1.0881, 'A_12_8_6': 119.5332, 'D_12_8_6_4': 180.0,
                                  'R_13_6': 1.0876, 'A_13_6_8': 119.9515, 'D_13_6_8_7': 180.0, 'R_14_4': 1.0887,
                                  'A_14_4_6': 119.4176, 'D_14_4_6_8': 180.0, 'R_15_5': 1.0887, 'A_15_5_7': 119.8756,
                                  'D_15_5_7_9': 0.0, 'R_16_11': 1.0, 'A_16_11_7': 90.0, 'D_16_11_7_9': 179.9936,
                                  'R_17_11': 1.0653, 'A_17_11_16': 90.0, 'D_17_11_16_7': 180.0},
                         'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12,
                                 13: 13, 14: 14, 15: 15, 16: 16, 17: 17}}

        zmat0 = converter.str_to_zmat(zmat_str_0)
        self.assertTrue(_compare_zmats(zmat0, expected_zmat))
        zmat1 = converter.str_to_zmat(zmat_str_1)
        self.assertTrue(_compare_zmats(zmat1, expected_zmat))
        zmat2 = converter.str_to_zmat(zmat_str_2)
        # This is a huge molecule, just test some random values:
        self.assertEqual(zmat2['coords'][4], ('R_4_2', 'A_4_2_3', 'D_4_2_3_1'))
        self.assertEqual(zmat2['vars']['D_40_7_4_6'], 139.3906)

    def test_check_zmat_dict(self):
        """Test check a zmat dict"""
        zmat1 = converter.check_zmat_dict(self.xyz1['zmat_str'])
        self.assertEqual(zmat1, self.xyz1['zmat'])

        zmat2 = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                 'coords': ((None, None, None), ('R_1_0', None, None), ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', None),
                            ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_3_2_0_1'),
                            ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_4_3_0_2')),
                 'vars': {'R_1_0': 1.0912484581271156, 'D_3_2_0_1': 120.00000000000001, 'D_4_3_0_2': 239.99999999999997,
                          'R_2|3|4_1|2|3': 1.7820012700068855, 'A_2|3|4_1|2|3_0|0|0': 35.26438764560717}}
        zmat2 = converter.check_zmat_dict(zmat2)
        expected_zmat2 = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                          'coords': ((None, None, None), ('R_1_0', None, None),
                                     ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', None),
                                     ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_3_2_0_1'),
                                     ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_4_3_0_2')),
                          'vars': {'R_1_0': 1.0912484581271156, 'D_3_2_0_1': 120.00000000000001,
                                   'D_4_3_0_2': 239.99999999999997, 'R_2|3|4_1|2|3': 1.7820012700068855,
                                   'A_2|3|4_1|2|3_0|0|0': 35.26438764560717},
                          'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}}
        self.assertEqual(zmat2, expected_zmat2)

        zmat3 = 3.0
        with self.assertRaises(ConverterError):
            converter.check_zmat_dict(zmat3)

        zmat4 = {'coords': ((None, None, None), ('R_1_0', None, None),
                            ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', None),
                            ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_3_2_0_1'),
                            ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_4_3_0_2'))}
        with self.assertRaises(ConverterError):
            converter.check_zmat_dict(zmat4)

        zmat5 = {'symbols': ('C', 'H', 'H', 'H', 'H', 'S', 'S', 'S', 'S'),
                 'coords': ((None, None, None), ('R_1_0', None, None),
                            ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', None),
                            ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_3_2_0_1'),
                            ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_4_3_0_2')),
                 'vars': {'R_1_0': 1.0912484581271156, 'D_3_2_0_1': 120.00000000000001,
                          'D_4_3_0_2': 239.99999999999997, 'R_2|3|4_1|2|3': 1.7820012700068855,
                          'A_2|3|4_1|2|3_0|0|0': 35.26438764560717},
                 'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}}
        with self.assertRaises(ConverterError):
            converter.check_zmat_dict(zmat5)

    def test_get_zmat_var_value(self):
        """Test getting a variable value from a string zmat"""
        zmat_str_1 = """  C
          H       1      R1
          H       1      R1       2      A1
          H       1      R1       2      A1       3      D1
          H       1      R1       2      A1       3      D2
        Variables:
        A1=109.4712
        D1=120.0000
        D2=240.0000
        R1=1.0912
        """
        zmat_str_2 = """A1=109.4712
        D1=120.0000
        D2=240.0000
        R1=1.0912

          C
          H,       1,      R1
          H,       1,      R1,       2,      A1
          H,       1,      R1,       2,      A1,       3,      D1
          H,       1,      R1,       2,      A1,       3,      D2
        """
        zmat_str_3 = """  C
          H       1      R1
          H       1      R1       2      A1
          H       1      R1       2      A1       3      D1
          H       1      R1       2      A1       3      D2

        A1 109.4712
        D1 120.0000
        D2 240.0000
        R1 1.0912
        """
        zmat_str_4 = """  C
          H       1      R1
          H       1      R1       2      A1
          H       1      R1       2      A1       3      D1
          H       1      R1       2      A1       3      D2

        A1=109.4712
        D1=120.0000
        D2=240.0000
        R1=1.0912
        """

        self.assertEqual(converter.get_zmat_str_var_value(zmat_str_1, 'D1'), 120.0)
        self.assertEqual(converter.get_zmat_str_var_value(zmat_str_2, 'D2'), 240.0)
        self.assertEqual(converter.get_zmat_str_var_value(zmat_str_3, 'A1'), 109.4712)
        self.assertEqual(converter.get_zmat_str_var_value(zmat_str_4, 'R1'), 1.0912)

    def test_get_zmat_param_value(self):
        """Test generating a zmat and getting a parameter value from it"""
        xyz = """O      -1.56972190    0.86781163   -0.31741697
        C      -1.04766895   -0.34174340    0.22855902
        C       0.39334154   -0.53829388   -0.25140232
        N       1.18758060    0.66395027    0.03678474
        H      -0.79633969    1.46799803   -0.36543061
        H      -1.09144929   -0.26944950    1.32014286
        H      -1.68279585   -1.17219329   -0.09269721
        H       0.84136357   -1.41603914    0.22426854
        H       0.39770524   -0.69095962   -1.33583221
        H       2.13746062    0.52142605   -0.30877212
        H       1.27433093    0.77543934    1.04802967"""
        spc1 = ARCSpecies(label='spc1', xyz=xyz)
        xyz_dict = spc1.get_xyz()
        value1 = converter.get_zmat_param_value(coords=xyz_dict, indices=[1, 2], mol=spc1.mol)  # R
        value2 = converter.get_zmat_param_value(coords=xyz_dict, indices=[0, 1, 2], mol=spc1.mol)  # A
        value3 = converter.get_zmat_param_value(coords=xyz_dict, indices=[1, 2, 3, 10], mol=spc1.mol)  # D
        self.assertAlmostEqual(value1, 1.53150455)
        self.assertAlmostEqual(value2, 109.470340)
        self.assertAlmostEqual(value3, 66.2600849)

    def test_split_str_zmat(self):
        """Test splitting a sting zmat into its coordinates and variables sections"""
        zmat_str_1 = """  C
  H       1      R1
  H       1      R1       2      A1
  H       1      R1       2      A1       3      D1
  H       1      R1       2      A1       3      D2
Variables:
A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912
"""
        coords, vars_ = converter.split_str_zmat(zmat_str_1)
        expected_coords = """  C
  H       1      R1
  H       1      R1       2      A1
  H       1      R1       2      A1       3      D1
  H       1      R1       2      A1       3      D2"""
        expected_vars = """A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912"""
        self.assertEqual(coords, expected_coords)
        self.assertEqual(vars_, expected_vars)

        zmat_str_2 = """A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912

  C
  H,       1,      R1
  H,       1,      R1,       2,      A1
  H,       1,      R1,       2,      A1,       3,      D1
  H,       1,      R1,       2,      A1,       3,      D2
"""
        coords, vars_ = converter.split_str_zmat(zmat_str_2)
        expected_coords = """  C
  H,       1,      R1
  H,       1,      R1,       2,      A1
  H,       1,      R1,       2,      A1,       3,      D1
  H,       1,      R1,       2,      A1,       3,      D2"""
        expected_vars = """A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912"""
        self.assertEqual(coords, expected_coords)
        self.assertEqual(vars_, expected_vars)

        zmat_str_3 = """  C
  H       1      R1
  H       1      R1       2      A1
  H       1      R1       2      A1       3      D1
  H       1      R1       2      A1       3      D2

A1 109.4712
D1 120.0000
D2 240.0000
R1 1.0912
"""
        coords, vars_ = converter.split_str_zmat(zmat_str_3)
        expected_coords = """  C
  H       1      R1
  H       1      R1       2      A1
  H       1      R1       2      A1       3      D1
  H       1      R1       2      A1       3      D2"""
        expected_vars = """A1 109.4712
D1 120.0000
D2 240.0000
R1 1.0912"""
        self.assertEqual(coords, expected_coords)
        self.assertEqual(vars_, expected_vars)

        zmat_str_4 = """  C
  H       1      R1
  H       1      R1       2      A1
  H       1      R1       2      A1       3      D1
  H       1      R1       2      A1       3      D2

A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912
"""
        coords, vars_ = converter.split_str_zmat(zmat_str_4)
        expected_coords = """  C
  H       1      R1
  H       1      R1       2      A1
  H       1      R1       2      A1       3      D1
  H       1      R1       2      A1       3      D2"""
        expected_vars = """A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912"""
        self.assertEqual(coords, expected_coords)
        self.assertEqual(vars_, expected_vars)

        zmat_str_5 = """  C
  H       1    1.0912
  H       1    1.0912       2  109.4712
  H       1    1.0912       2  109.4712       3  120.0000
  H       1    1.0912       2  109.4712       3  240.0000
"""
        coords, vars_ = converter.split_str_zmat(zmat_str_5)
        self.assertEqual(coords, zmat_str_5)
        self.assertIsNone(vars_)

    def test_xyz_to_pybel_mol(self):
        """Test xyz conversion into Open Babel"""
        pbmol1 = converter.xyz_to_pybel_mol(self.xyz1['dict'])
        pbmol2 = converter.xyz_to_pybel_mol(self.xyz5['dict'])
        pbmol3 = converter.xyz_to_pybel_mol(self.xyz2['dict'])
        pbmol4 = converter.xyz_to_pybel_mol(self.xyz6['dict'])

        # These tests check that the atoms we expect appear in the correct order:

        self.assertEqual(pbmol1.atoms[0].idx, 1)  # C
        self.assertAlmostEqual(pbmol1.atoms[0].atomicmass, 12.0107, 2)
        self.assertEqual(pbmol1.atoms[0].coords, (0.0, 0.0, 0.0))
        self.assertAlmostEqual(pbmol1.atoms[1].atomicmass, 1.00794, 2)  # H
        self.assertEqual(pbmol1.atoms[1].coords, (0.6300326, 0.6300326, 0.6300326))

        self.assertAlmostEqual(pbmol2.atoms[0].atomicmass, 15.9994, 2)  # O
        self.assertEqual(pbmol2.atoms[0].coords, (1.1746411, -0.15309781, 0.0))
        self.assertAlmostEqual(pbmol2.atoms[1].atomicmass, 14.0067, 2)  # N
        self.assertEqual(pbmol2.atoms[1].coords, (0.06304988, 0.35149648, 0.0))
        self.assertAlmostEqual(pbmol2.atoms[2].atomicmass, 12.0107, 2)  # C
        self.assertEqual(pbmol2.atoms[2].coords, (-1.12708952, -0.11333971, 0.0))
        self.assertAlmostEqual(pbmol2.atoms[3].atomicmass, 1.00794, 2)  # H
        self.assertEqual(pbmol2.atoms[3].coords, (-1.93800144, 0.60171738, 0.0))

        self.assertAlmostEqual(pbmol3.atoms[0].atomicmass, 32.065, 2)  # S
        self.assertEqual(pbmol3.atoms[0].coords, (1.02558264, -0.04344404, -0.07343859))
        self.assertAlmostEqual(pbmol3.atoms[1].atomicmass, 15.9994, 2)  # O
        self.assertEqual(pbmol3.atoms[1].coords, (-0.25448248, 1.10710477, 0.18359696))
        self.assertAlmostEqual(pbmol3.atoms[2].atomicmass, 14.0067, 2)  # N
        self.assertEqual(pbmol3.atoms[2].coords, (-1.30762173, 0.15796567, -0.1048929))
        self.assertAlmostEqual(pbmol3.atoms[3].atomicmass, 12.0107, 2)  # C
        self.assertEqual(pbmol3.atoms[3].coords, (-0.49011438, -1.0370438, 0.15365747))
        self.assertAlmostEqual(pbmol3.atoms[-1].atomicmass, 1.00794, 2)  # H
        self.assertEqual(pbmol3.atoms[-1].coords, (-1.43009127, 0.23517346, -1.11797908))

        self.assertAlmostEqual(pbmol4.atoms[0].atomicmass, 32.065, 2)  # S
        self.assertEqual(pbmol4.atoms[0].coords, (-0.06618943, -0.12360663, -0.07631983))
        self.assertAlmostEqual(pbmol4.atoms[3].atomicmass, 14.0067, 2)  # N
        self.assertEqual(pbmol4.atoms[3].coords, (0.01546439, -1.54297548, 0.44580391))

    def test_pybel_to_inchi(self):
        """Tests the conversion of Open Babel molecules to InChI"""
        pbmol1 = converter.xyz_to_pybel_mol(self.xyz1['dict'])
        pbmol2 = converter.xyz_to_pybel_mol(self.xyz5['dict'])
        pbmol3 = converter.xyz_to_pybel_mol(self.xyz2['dict'])
        pbmol4 = converter.xyz_to_pybel_mol(self.xyz6['dict'])

        inchi1 = converter.pybel_to_inchi(pbmol1)
        inchi2 = converter.pybel_to_inchi(pbmol2)
        inchi3 = converter.pybel_to_inchi(pbmol3)
        inchi4 = converter.pybel_to_inchi(pbmol4)

        self.assertEqual(inchi1, 'InChI=1/CH4/h1H4')
        self.assertEqual(inchi2, 'InChI=1/CH2NO/c1-2-3/h1H2')
        self.assertEqual(inchi3, 'InChI=1/CH3NOS/c1-2-3-4-1/h2H,1H2')
        self.assertEqual(inchi4, 'InChI=1/CH5NO2S/c1-5(2,3)4/h2-3H,1H3')

    def test_rmg_mol_from_inchi(self):
        """Test generating RMG Molecule objects from InChI's"""
        mol1 = converter.rmg_mol_from_inchi('InChI=1S/NO2/c2-1-3')
        mol2 = converter.rmg_mol_from_inchi('InChI=1/CH3NOS/c1-2-3-4-1/h2H,1H2')

        self.assertTrue(isinstance(mol1, Molecule))
        self.assertTrue(isinstance(mol2, Molecule))

        self.assertEqual(mol1.to_smiles(), '[O]N=O')
        self.assertEqual(mol2.to_smiles(), 'C1NOS1')

    def test_elementize(self):
        """Test converting an RMG:Atom's atom type to its elemental atom type"""
        mol = Molecule(smiles='O=C=O')
        atom1 = mol.atoms[0]
        atom2 = mol.atoms[1]
        self.assertEqual(atom1.atomtype.label, 'O2d')
        self.assertEqual(atom2.atomtype.label, 'Cdd')
        converter.elementize(atom1)
        converter.elementize(atom2)
        self.assertEqual(atom1.atomtype.label, 'O')
        self.assertEqual(atom2.atomtype.label, 'C')

    def test_molecules_from_xyz(self):
        """Tests that atom orders are preserved when converting xyz's into RMG Molecules"""
        s_mol, b_mol = converter.molecules_from_xyz(self.xyz6['dict'])

        # check that the atom order is the same
        self.assertTrue(s_mol.atoms[0].is_sulfur())
        self.assertTrue(b_mol.atoms[0].is_sulfur())
        self.assertTrue(s_mol.atoms[1].is_oxygen())
        self.assertTrue(b_mol.atoms[1].is_oxygen())
        self.assertTrue(s_mol.atoms[2].is_oxygen())
        self.assertTrue(b_mol.atoms[2].is_oxygen())
        self.assertTrue(s_mol.atoms[3].is_nitrogen())
        self.assertTrue(b_mol.atoms[3].is_nitrogen())
        self.assertTrue(s_mol.atoms[4].is_carbon())
        self.assertTrue(b_mol.atoms[4].is_carbon())
        self.assertTrue(s_mol.atoms[5].is_hydrogen())
        self.assertTrue(b_mol.atoms[5].is_hydrogen())
        self.assertTrue(s_mol.atoms[6].is_hydrogen())
        self.assertTrue(b_mol.atoms[6].is_hydrogen())
        self.assertTrue(s_mol.atoms[7].is_hydrogen())
        self.assertTrue(b_mol.atoms[7].is_hydrogen())
        self.assertTrue(s_mol.atoms[8].is_hydrogen())
        self.assertTrue(b_mol.atoms[8].is_hydrogen())
        self.assertTrue(s_mol.atoms[9].is_hydrogen())
        self.assertTrue(b_mol.atoms[9].is_hydrogen())

        s_mol, b_mol = converter.molecules_from_xyz(self.xyz7['dict'])
        self.assertTrue(s_mol.atoms[0].is_oxygen())
        self.assertTrue(b_mol.atoms[0].is_oxygen())
        self.assertTrue(s_mol.atoms[2].is_carbon())
        self.assertTrue(b_mol.atoms[2].is_carbon())

        expected_bonded_adjlist = """multiplicity 2
1  O u0 p2 c0 {6,S} {10,S}
2  O u0 p2 c0 {3,S} {28,S}
3  C u0 p0 c0 {2,S} {8,S} {14,S} {15,S}
4  C u0 p0 c0 {7,S} {16,S} {17,S} {18,S}
5  C u0 p0 c0 {7,S} {19,S} {20,S} {21,S}
6  C u0 p0 c0 {1,S} {22,S} {23,S} {24,S}
7  C u1 p0 c0 {4,S} {5,S} {9,S}
8  C u0 p0 c0 {3,S} {10,D} {11,S}
9  C u0 p0 c0 {7,S} {11,D} {12,S}
10 C u0 p0 c0 {1,S} {8,D} {13,S}
11 C u0 p0 c0 {8,S} {9,D} {25,S}
12 C u0 p0 c0 {9,S} {13,D} {26,S}
13 C u0 p0 c0 {10,S} {12,D} {27,S}
14 H u0 p0 c0 {3,S}
15 H u0 p0 c0 {3,S}
16 H u0 p0 c0 {4,S}
17 H u0 p0 c0 {4,S}
18 H u0 p0 c0 {4,S}
19 H u0 p0 c0 {5,S}
20 H u0 p0 c0 {5,S}
21 H u0 p0 c0 {5,S}
22 H u0 p0 c0 {6,S}
23 H u0 p0 c0 {6,S}
24 H u0 p0 c0 {6,S}
25 H u0 p0 c0 {11,S}
26 H u0 p0 c0 {12,S}
27 H u0 p0 c0 {13,S}
28 H u0 p0 c0 {2,S}
"""
        expected_mol = Molecule().from_adjacency_list(expected_bonded_adjlist)
        self.assertEqual(b_mol.to_adjacency_list(), expected_bonded_adjlist)
        # the is_isomorphic test must come after the adjlist test since it changes the atom order
        self.assertTrue(b_mol.is_isomorphic(expected_mol))

        s_mol, b_mol = converter.molecules_from_xyz(self.xyz10['dict'], multiplicity=1, charge=0)
        self.assertIsNotNone(s_mol)
        self.assertIsNotNone(b_mol)
        for atom1, atom2 in zip(s_mol.atoms, b_mol.atoms):
            self.assertEqual(atom1.symbol, atom2.symbol)
        for atom1, symbol in zip(s_mol.atoms, self.xyz10['dict']['symbols']):
            self.assertEqual(atom1.symbol, symbol)

        s_mol, b_mol = converter.molecules_from_xyz(self.xyz_dict_13, multiplicity=1, charge=0)
        for atom1, atom2 in zip(s_mol.atoms, b_mol.atoms):
            self.assertEqual(atom1.symbol, atom2.symbol)
        for atom1, symbol in zip(s_mol.atoms, self.xyz_dict_13['symbols']):
            self.assertEqual(atom1.symbol, symbol)
        self.assertEqual(s_mol.multiplicity, 1)
        self.assertEqual(b_mol.multiplicity, 1)
        self.assertFalse(any(atom.radical_electrons for atom in b_mol.atoms))

    def test_unsorted_xyz_mol_from_xyz(self):
        """Test atom order conservation when xyz isn't sorted with heavy atoms first"""
        n3h5 = ARCSpecies(label='N3H5', xyz=self.xyz8['str'], smiles='NNN')
        expected_adjlist = """1 N u0 p1 c0 {2,S} {4,S} {5,S}
2 H u0 p0 c0 {1,S}
3 H u0 p0 c0 {4,S}
4 N u0 p1 c0 {1,S} {3,S} {6,S}
5 H u0 p0 c0 {1,S}
6 N u0 p1 c0 {4,S} {7,S} {8,S}
7 H u0 p0 c0 {6,S}
8 H u0 p0 c0 {6,S}
"""
        self.assertEqual(n3h5.mol.to_adjacency_list(), expected_adjlist)
        self.assertEqual(n3h5.conformers[0], self.xyz8['dict'])

    def test_xyz_to_smiles(self):
        """Test xyz to SMILES conversion and inferring correct bond orders"""
        xyz1 = """S      -0.06618943   -0.12360663   -0.07631983
O      -0.79539707    0.86755487    1.02675668
O      -0.68919931    0.25421823   -1.34830853
N       0.01546439   -1.54297548    0.44580391
C       1.59721519    0.47861334    0.00711000
H       1.94428095    0.40772394    1.03719428
H       2.20318015   -0.14715186   -0.64755729
H       1.59252246    1.51178950   -0.33908352
H      -0.87856890   -2.02453514    0.38494433
H      -1.34135876    1.49608206    0.53295071"""

        xyz2 = """O       2.64631000   -0.59546000    0.29327900
O       2.64275300    2.05718500   -0.72942300
C       1.71639100    1.97990400    0.33793200
C      -3.48200000    1.50082200    0.03091100
C      -3.85550400   -1.05695100   -0.03598300
C       3.23017500   -1.88003900    0.34527100
C      -2.91846400    0.11144600    0.02829400
C       0.76935400    0.80820200    0.23396500
C      -1.51123800   -0.09830700    0.09199100
C       1.28495500   -0.50051800    0.22531700
C      -0.59550400    0.98573400    0.16444900
C      -0.94480400   -1.39242500    0.08331900
C       0.42608700   -1.59172200    0.14650400
H       2.24536500    1.93452800    1.29979800
H       1.14735500    2.91082400    0.31665700
H      -3.24115200    2.03800800    0.95768700
H      -3.08546100    2.10616100   -0.79369800
H      -4.56858900    1.48636200   -0.06630800
H      -4.89652000   -0.73067200   -0.04282300
H      -3.69325500   -1.65970000   -0.93924100
H      -3.72742500   -1.73294900    0.81894100
H       3.02442400   -2.44854700   -0.56812500
H       4.30341500   -1.72127600    0.43646000
H       2.87318600   -2.44236600    1.21464900
H      -0.97434200    2.00182800    0.16800300
H      -1.58581300   -2.26344700    0.02264400
H       0.81122400   -2.60336100    0.13267800
H       3.16280800    1.25020800   -0.70346900"""

        xyz3 = """N       2.24690600   -0.00006500    0.11597700
C      -1.05654800    1.29155000   -0.02642500
C      -1.05661400   -1.29150400   -0.02650600
C      -0.30514100    0.00000200    0.00533200
C       1.08358900   -0.00003400    0.06558000
H      -0.39168300    2.15448600   -0.00132500
H      -1.67242600    1.35091400   -0.93175000
H      -1.74185400    1.35367700    0.82742800
H      -0.39187100   -2.15447800    0.00045500
H      -1.74341400   -1.35278100    0.82619100
H      -1.67091600   -1.35164600   -0.93286400"""

        xyz4 = """C      -0.86594600    0.19886100    2.37159000
C       0.48486900   -0.16232000    1.75422500
C       1.58322700    0.83707500    2.14923200
C       0.88213600   -1.51753600    2.17861400
N       1.17852900   -2.57013900    2.53313600
N       0.51051200   -0.21074800    0.26080100
N      -0.51042000    0.21074000   -0.26079600
C      -0.48479200    0.16232300   -1.75422300
C       0.86590400   -0.19926100   -2.37161200
C      -1.58344900   -0.83674100   -2.14921800
C      -0.88166600    1.51765700   -2.17859800
N      -1.17777100    2.57034900   -2.53309500
H      -1.16019200    1.20098300    2.05838400
H      -1.64220300   -0.50052400    2.05954500
H      -0.78054100    0.17214100    3.45935000
H       1.70120000    0.85267300    3.23368300
H       2.53492600    0.56708700    1.69019900
H       1.29214500    1.83331400    1.80886700
H       1.15987300   -1.20145600   -2.05838100
H       0.78046800   -0.17257000   -3.45937100
H       1.64236100    0.49992400   -2.05962300
H      -2.53504500   -0.56650600   -1.69011500
H      -1.70149200   -0.85224500   -3.23366300
H      -1.29263300   -1.83308300   -1.80892900"""

        xyz5 = """O       0.90973400   -0.03064000   -0.09605500
O       0.31656600   -0.00477100   -1.21127600
O       2.17315400   -0.03069900   -0.09349100"""

        xyz6 = """S       0.38431300    0.05370100    0.00000000
N      -1.13260000    0.07859900    0.00000000
H       0.85151800   -1.28998600    0.00000000"""

        xyz7 = """N       0.00000000    0.00000000    0.44654700
N       0.00000000    0.00000000   -0.77510900
H       0.86709400    0.00000000    1.02859700
H      -0.86709400    0.00000000    1.02859700"""

        xyz8 = """N       0.00000000    0.00000000    0.65631400
C       0.00000000    0.00000000   -0.50136500
H       0.00000000    0.00000000   -1.57173600"""

#         xyz9 = """S      -0.00866000   -0.60254900    0.00000000
# N      -0.96878800    0.63275900    0.00000000
# N       1.01229100    0.58298500    0.00000000"""
#
#         xyz10 = """O      -0.79494500   -0.93969200    0.00000000
# O      -0.32753500    1.24003800    0.00000000
# O       1.28811400   -0.24729000    0.00000000
# N       0.14143500    0.11571500    0.00000000
# H      -1.65602000   -0.48026800    0.00000000"""
#
#         xyz11 = """O       1.64973000   -0.57433600    0.02610800
# O       0.49836300    1.28744800   -0.18806200
# N      -0.57621600   -0.65116600    0.24595200
# N      -1.78357200   -0.10211200   -0.14953800
# N       0.61460400    0.08152700   -0.00952700
# H      -0.42001200   -1.61494900   -0.03311600
# H      -1.72480300    0.33507600   -1.06884500
# H      -2.07362100    0.59363400    0.53038600"""

        xyz12 = """O       1.10621000    0.00000000   -0.13455300
O      -1.10621000    0.00000000   -0.13455300
N       0.00000000    0.00000000    0.33490500"""

#         xyz13 = """O      -0.37723000   -1.27051900    0.00000000
# N      -0.12115000   -0.04252600    0.00000000
# N      -0.95339100    0.91468300    0.00000000
# C       1.31648000    0.33217600    0.00000000
# H       1.76422500   -0.11051900   -0.89038300
# H       1.76422500   -0.11051900    0.89038300
# H       1.40045900    1.41618100    0.00000000
# H      -1.88127600    0.47189500    0.00000000"""

        xyz14 = """S      -0.12942800    0.11104800    0.22427200
O       0.98591500   -1.00752300   -0.31179100
O      -1.43956200   -0.44459900   -0.15048900
O       0.32982400    1.44755400   -0.21682700
H       1.85512700   -0.56879900   -0.36563700"""

        xyz15 = """N       1.11543700    0.11100500    0.00000000
N      -0.11982300   -0.03150800    0.00000000
N      -1.25716400    0.01530300    0.00000000
H       1.57747800   -0.80026300    0.00000000"""

        xyz16 = """O       1.21678000   -0.01490600    0.00000000
N       0.04560300    0.35628400    0.00000000
C      -1.08941100   -0.23907800    0.00000000
H      -1.97763400    0.37807800    0.00000000
H      -1.14592100   -1.32640500    0.00000000"""

        xyz17 = """S       0.00000000    0.00000000    0.18275300
O      -0.94981300   -0.83167500   -0.84628900
O       0.94981300    0.83167500   -0.84628900
O       0.80426500   -0.99804200    0.85548500
O      -0.80426500    0.99804200    0.85548500
H      -1.67833300   -0.25442300   -1.13658700
H       1.67833300    0.25442300   -1.13658700"""

        xyz18 = """S       0.00000000    0.00000000    0.12264300
O       1.45413200    0.00000000    0.12264300
O      -0.72706600    1.25931500    0.12264300
O      -0.72706600   -1.25931500    0.12264300"""

        xyz19 = """N       1.16672400    0.35870400   -0.00000400
N      -1.16670800    0.35879500   -0.00000400
C      -0.73775600   -0.89086600   -0.00000100
C       0.73767000   -0.89093000   -0.00000100
C       0.00005200    1.08477000   -0.00000500
H      -1.40657400   -1.74401100    0.00000000
H       1.40645000   -1.74411900    0.00000000
H       0.00009400    2.16788100   -0.00000700"""

        xyz20 = """C       3.09980400   -0.16068000    0.00000600
C       1.73521600    0.45534600   -0.00002200
C       0.55924400   -0.24765400   -0.00000300
C      -0.73300200    0.32890400   -0.00001600
C      -1.93406200   -0.42115800    0.00001300
C      -3.19432700    0.11090700    0.00000900
H       3.67991400    0.15199400   -0.87914100
H       3.67984100    0.15191400    0.87923000
H       3.04908000   -1.25419800   -0.00004300
H       1.68713300    1.54476700   -0.00005100
H      -0.81003200    1.41627100   -0.00004600
H      -1.83479400   -1.50747300    0.00004100
H       0.61489300   -1.33808300    0.00002500
H      -3.35410300    1.18597200   -0.00001700
H      -4.07566100   -0.52115800    0.00003300"""

        mol1 = converter.molecules_from_xyz(converter.str_to_xyz(xyz1))[1]
        mol2 = converter.molecules_from_xyz(converter.str_to_xyz(xyz2))[1]
        mol3 = converter.molecules_from_xyz(converter.str_to_xyz(xyz3))[1]
        mol4 = converter.molecules_from_xyz(converter.str_to_xyz(xyz4))[1]
        mol5 = converter.molecules_from_xyz(converter.str_to_xyz(xyz5))[1]
        mol6 = converter.molecules_from_xyz(converter.str_to_xyz(xyz6), multiplicity=1)[1]
        mol7 = converter.molecules_from_xyz(converter.str_to_xyz(xyz7), multiplicity=1)[1]
        mol8 = converter.molecules_from_xyz(converter.str_to_xyz(xyz8))[1]
        # mol9 = converter.molecules_from_xyz(converter.str_to_xyz(xyz9), multiplicity=1)[1]
        # mol10 = converter.molecules_from_xyz(converter.str_to_xyz(xyz10))[1]
        # mol11 = converter.molecules_from_xyz(converter.str_to_xyz(xyz11))[1]
        mol12 = converter.molecules_from_xyz(converter.str_to_xyz(xyz12))[1]
        # mol13 = converter.molecules_from_xyz(converter.str_to_xyz(xyz13))[1]
        mol14 = converter.molecules_from_xyz(converter.str_to_xyz(xyz14))[1]
        mol15 = converter.molecules_from_xyz(converter.str_to_xyz(xyz15))[1]
        mol16 = converter.molecules_from_xyz(converter.str_to_xyz(xyz16))[1]
        mol17 = converter.molecules_from_xyz(converter.str_to_xyz(xyz17))[1]
        mol18 = converter.molecules_from_xyz(converter.str_to_xyz(xyz18))[1]
        mol19 = converter.molecules_from_xyz(converter.str_to_xyz(xyz19))[1]
        mol20 = converter.molecules_from_xyz(converter.str_to_xyz(xyz20))[1]

        self.assertEqual(mol1.to_smiles(), '[NH-][S+](=O)(O)C')
        self.assertIn(mol2.to_smiles(), ['COC1=C(CO)C=C([C](C)C)C=C1', 'COC1C=CC(=CC=1CO)[C](C)C'])
        self.assertEqual(mol3.to_smiles(), '[N]=C=C(C)C')
        self.assertEqual(mol4.to_smiles(), 'N#CC(N=NC(C#N)(C)C)(C)C')
        self.assertEqual(mol5.to_smiles(), '[O-][O+]=O')
        self.assertEqual(mol6.to_smiles(), 'N#S')
        self.assertEqual(mol7.to_smiles(), '[N-]=[NH2+]')
        self.assertEqual(mol8.to_smiles(), 'C#N')
        # self.assertEqual(mol9.to_smiles(), '[N-]=[S+]#N')  # gives [N]S#N, multiplicity 3
        # self.assertEqual(mol10.to_smiles(), '[N+](=O)(O)[O-]')  # gives None
        # self.assertEqual(mol11.to_smiles(), 'N(N)[N+](=O)[O-]')  # gives None
        self.assertEqual(mol12.to_smiles(), '[O]N=O')
        # self.assertEqual(mol13.to_smiles(), 'C[N+]([NH-])=O')  # gives None
        self.assertEqual(mol14.to_smiles(), '[O]S(=O)O')
        self.assertEqual(mol15.to_smiles(), '[N-]=[N+]=N')
        self.assertEqual(mol16.to_smiles(), '[O]N=C')
        self.assertEqual(mol17.to_smiles(), '[O-][S+](=O)(O)O')
        self.assertEqual(mol18.to_smiles(), 'O=S(=O)=O')
        self.assertEqual(mol19.to_adjacency_list(), """multiplicity 2
1 N u1 p1 c0 {4,S} {5,S}
2 N u0 p1 c0 {3,S} {5,D}
3 C u0 p0 c0 {2,S} {4,D} {6,S}
4 C u0 p0 c0 {1,S} {3,D} {7,S}
5 C u0 p0 c0 {1,S} {2,D} {8,S}
6 H u0 p0 c0 {3,S}
7 H u0 p0 c0 {4,S}
8 H u0 p0 c0 {5,S}
""")  # cannot read SMILES 'c1ncc[n]1' (but can generate them)
        self.assertEqual(mol20.to_smiles(), 'C=C[CH]C=CC')

    def test_to_rdkit_mol(self):
        """Test converting an RMG Molecule object to an RDKit Molecule object"""
        n3_xyz = """N      -1.1997440839    -0.1610052059     0.0274738287
        H      -1.4016624407    -0.6229695533    -0.8487034080
        H      -0.0000018759     1.2861082773     0.5926077870
        N       0.0000008520     0.5651072858    -0.1124621525
        H      -1.1294692206    -0.8709078271     0.7537518889
        N       1.1997613019    -0.1609980472     0.0274604887
        H       1.1294795781    -0.8708998550     0.7537444446
        H       1.4015274689    -0.6230592706    -0.8487058662"""
        spc1 = ARCSpecies(label='N3', xyz=n3_xyz, smiles='NNN')
        rd_mol = converter.to_rdkit_mol(spc1.mol)
        self.assertIsInstance(rd_mol, rdchem.Mol)
        rd_mol_block = Chem.MolToMolBlock(rd_mol).splitlines()
        self._check_atom_connectivity_in_rd_mol_block(spc1.mol, rd_mol_block)

        xyz = {'symbols': ('O', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
               'isotopes': (16, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
               'coords': ((-1.3435816539552077, -1.2858724378615196, 1.2807152578949395),
                          (-0.5822124260876973, -0.14929764421455033, 0.8718857581393893),
                          (0.7537245479964255, -0.6372399190517054, 0.3052879204747593),
                          (-1.4102384848438956, 0.6526250305631552, -0.12325722014803946),
                          (1.710012180202608, 0.48782666699333677, -0.05422674317489915),
                          (-0.40628319987777656, 0.4559748941241954, 1.7677829999416865),
                          (0.5793528665379145, -1.2676871411265647, -0.575605173641588),
                          (1.233146425434121, -1.2920781144004214, 1.0439600784740728),
                          (-0.9212156176546785, 1.592222200131885, -0.3946484666070579),
                          (-2.3924481790072454, 0.8873667498492314, 0.30150058029243965),
                          (-1.5933662659692818, 0.07549770612318436, -1.0362629940245036),
                          (1.8859973684778586, 1.143203203580941, 0.8045438318837316),
                          (1.3246310337941618, 1.0933395307478435, -0.8797197423637577),
                          (2.6742044088059282, 0.07526334279898257, -0.368290381462353),
                          (-1.5117230038532052, -1.8311440682580218, 0.49312739388548754))}
        spc2 = ARCSpecies(label='OC(C)CC', xyz=xyz, smiles='OC(C)CC')
        rd_mol = converter.to_rdkit_mol(spc2.mol)
        self.assertIsInstance(rd_mol, rdchem.Mol)
        rd_mol_block = Chem.MolToMolBlock(rd_mol).splitlines()
        self._check_atom_connectivity_in_rd_mol_block(spc2.mol, rd_mol_block)

        xyz = {'symbols': ('N', 'N', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
                           'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
                           'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
               'isotopes': (14, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 1, 1,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
               'coords': ((3.499179325102147, -0.42638916597187926, 0.9003242990840908),
                          (-0.6499415889484702, 0.340724799540206, -0.5661251309627103),
                          (1.819277292737819, 0.21344385159685897, -0.8793317468230418),
                          (3.1899052719474628, 0.45760852306308153, -0.23533246027504112),
                          (0.6706268264374187, 0.3217004114789208, 0.13002243103982766),
                          (-2.4215521499877974, -0.7371655416066899, 1.5076456703036578),
                          (-3.296693026864579, 0.43179444760158664, 1.0714158151237858),
                          (4.726657868928066, 0.020800041839839727, 1.5650469546751138),
                          (3.6447406115527494, -1.8243635218409306, 0.48593167588088443),
                          (-1.998316391739874, -1.5449807522537653, 0.31438572491218525),
                          (-2.5853175909775765, 1.6051926872800064, 0.4350094041727361),
                          (-1.1792740587338528, -0.9714655711015325, -0.6681683390125535),
                          (-1.3745799868854869, 1.532697175622535, -0.28051044496804023),
                          (-2.4413535353650957, -2.8713104903122058, 0.17049853057640718),
                          (-3.224764479819963, 2.8596947190744824, 0.5783248286620434),
                          (-0.8418089989578232, -1.7415946226832655, -1.7942299137645301),
                          (-0.8463723241331488, 2.7360148761091194, -0.8074146437047873),
                          (-1.2889052838118953, -3.0557546346353797, -1.935683056992735),
                          (-2.0855458766909853, -3.622896502075492, -0.9481584984095942),
                          (-1.4805030849471914, 3.9671406108815273, -0.6400741779998904),
                          (-2.6770015730057284, 4.028135675598927, 0.05383697598559641),
                          (1.8064679324039714, -0.7639497261514713, -1.3723796694870831),
                          (1.6813862693297632, 0.9524422087112238, -1.6780926341588518),
                          (-1.5437907205240609, -0.40187562179668984, 2.073060928715998),
                          (-3.000681584394112, -1.370413857452276, 2.191633391758093),
                          (-3.802708903003739, 0.7938156999014608, 1.9769065802517534),
                          (-4.083218454719305, 0.0921672466341461, 0.3845421896814606),
                          (0.7205760738282427, -0.5084403674087968, 0.8481146496474586),
                          (0.8137318609885368, 1.228521112122053, 0.7344513830359622),
                          (3.9659220576062326, 0.37759691873732143, -1.0080567380485763),
                          (3.2028295058114855, 1.4998398600598792, 0.11065670648152448),
                          (4.9396611843328895, -0.6020814332203606, 2.4410957064978063),
                          (4.6138917667452395, 1.0465788985703077, 1.9334989414975443),
                          (5.594732850928261, -0.013502693683424412, 0.8966982307044372),
                          (3.9023968247424343, -2.4543964342196722, 1.3451296915324813),
                          (2.703699879345195, -2.222228719009132, 0.09348746737228847),
                          (4.42204732050457, -1.950360623873533, -0.2762863825368319),
                          (-1.0170018414296815, -3.629781944004243, -2.8167686619675725),
                          (-0.23010568646070212, -1.302240691051647, -2.578005038420773),
                          (-3.0760107679117197, -3.3234878910133863, 0.9290540461318536),
                          (-2.4381827291700913, -4.645359950791348, -1.0519238202482728),
                          (0.07119294770223425, 2.7066721369647406, -1.3899371573958255),
                          (-1.045656978872603, 4.8663811008631175, -1.0662281652857586),
                          (-3.1892599113493763, 4.977310741601497, 0.1827136615195785),
                          (-4.170376142277848, 2.927767012302581, 1.1140032113287763))}
        spc3 = ARCSpecies(label='imipramine', xyz=xyz, smiles='c1cc3c(cc1)CCc2c(cccc2)N3CCCN(C)C')
        rd_mol = converter.to_rdkit_mol(spc3.mol)
        self.assertIsInstance(rd_mol, rdchem.Mol)
        rd_mol_block = Chem.MolToMolBlock(rd_mol).splitlines()
        self._check_atom_connectivity_in_rd_mol_block(spc3.mol, rd_mol_block)

    def test_xyz_to_ase(self):
        """Test the xyz_to_ase function"""
        atoms_1 = converter.xyz_to_ase(self.xyz1['dict'])
        self.assertIsInstance(atoms_1, Atoms)
        self.assertEqual(str(atoms_1.symbols), 'CH4')
        np.testing.assert_array_equal(atoms_1.positions, [[0., 0., 0.],
                                                          [0.6300326, 0.6300326, 0.6300326],
                                                          [-0.6300326, -0.6300326, 0.6300326],
                                                          [-0.6300326, 0.6300326, -0.6300326],
                                                          [0.6300326, -0.6300326, -0.6300326]])

    def test_get_element_mass_from_xyz(self):
        """Test the get_element_mass_from_xyz() function."""
        mass_list = converter.get_element_mass_from_xyz({'symbols': ('N', 'H', 'H', 'N', 'H', 'H', 'N', 'H'),
                                                         'isotopes': (14, 1, 1, 14, 1, 1, 14, 1), 'coords': ()})
        self.assertEqual(mass_list, [14.00307400443, 1.00782503224, 1.00782503224, 14.00307400443,
                                     1.00782503224, 1.00782503224, 14.00307400443, 1.00782503224])

    def test_translate_xyz(self):
        """Test the translate_xyz() function."""
        self.assertEqual(self.xyz1['dict'], converter.translate_xyz(xyz_dict=self.xyz1['dict'], translation=(0, 0, 0)))

        expected_xyz = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 1, 1, 1, 1),
                        'coords': ((1.0, 0.0, 3.0),
                                   (1.6300326, 0.6300326, 3.6300326),
                                   (0.36996739999999995, -0.6300326, 3.6300326),
                                   (0.36996739999999995, 0.6300326, 2.3699674),
                                   (1.6300326, -0.6300326, 2.3699674)),
                        }
        self.assertEqual(expected_xyz, converter.translate_xyz(xyz_dict=self.xyz1['dict'], translation=(1, 0, 3)))

    def test_displace_xyz(self):
        """Test the displace_xyz() function."""
        xyz = {'symbols': ('N', 'H', 'H', 'N', 'H', 'H', 'N', 'H'), 'isotopes': (14, 1, 1, 14, 1, 1, 14, 1),
               'coords': ((-0.447353, 0.680147, -0.090895), (-0.451171, 1.142121, 0.814701),
                          (0.674665, 0.380874, -0.232312), (-1.228559, -0.471121, -0.003769),
                          (-1.815912, -0.503291, 0.815499), (-1.782278, -0.570663, -0.841674),
                          (1.909708, -0.148579, -0.070033), (1.740013, -0.849123, 0.669738))}
        displacement = np.array([[-0.03, -0.02, -0.0], [0.04, -0.08, 0.05], [0.92, -0.34, 0.08], [0.0, 0.04, 0.0],
                                 [0.0, -0.05, 0.01], [0.09, -0.09, -0.04], [-0.05, 0.02, -0.01], [0.0, 0.03, -0.01]],
                                np.float64)
        xyz_1, xyz_2 = converter.displace_xyz(xyz=xyz, displacement=displacement)
        expected_xyz_1 = {'symbols': ('N', 'H', 'H', 'N', 'H', 'H', 'N', 'H'), 'isotopes': (14, 1, 1, 14, 1, 1, 14, 1),
                          'coords': ((-0.4754185110901118, 0.6614366592732588, -0.090895),
                                     (-0.44113195107970876, 1.1220429021594176, 0.827249811150364),
                                     (0.9055631251666977, 0.29554208417752476, -0.2122339021594176),
                                     (-1.228559, -0.43370031854651764, -0.003769),
                                     (-1.815912, -0.515839811150364, 0.8180087622300728),
                                     (-1.7596901399293448, -0.5932508600706552, -0.8517130489202912),
                                     (1.862932148183147, -0.1298686592732588, -0.07938817036337059),
                                     (1.740013, -0.8415937133097816, 0.6672282377699272))}
        expected_xyz_2 = {'symbols': ('N', 'H', 'H', 'N', 'H', 'H', 'N', 'H'), 'isotopes': (14, 1, 1, 14, 1, 1, 14, 1),
                          'coords': ((-0.4192874889098882, 0.6988573407267411, -0.090895),
                                     (-0.4612100489202912, 1.1621990978405823, 0.802152188849636),
                                     (0.44376687483330224, 0.4662059158224752, -0.2523900978405824),
                                     (-1.228559, -0.5085416814534824, -0.003769),
                                     (-1.815912, -0.49074218884963605, 0.8129892377699272),
                                     (-1.8048658600706553, -0.5480751399293449, -0.8316349510797089),
                                     (1.956483851816853, -0.16728934072674118, -0.060677829636629405),
                                     (1.740013, -0.8566522866902183, 0.6722477622300729))}
        self.assertEqual(xyz_1, expected_xyz_1)
        self.assertEqual(xyz_2, expected_xyz_2)

        xyz_1, xyz_2 = converter.displace_xyz(xyz=xyz, displacement=displacement, amplitude=0.5)
        expected_xyz_1 = {'symbols': ('N', 'H', 'H', 'N', 'H', 'H', 'N', 'H'), 'isotopes': (14, 1, 1, 14, 1, 1, 14, 1),
                          'coords': ((-0.5034840221802236, 0.6427263185465175, -0.090895),
                                     (-0.4310929021594176, 1.101964804318835, 0.839798622300728),
                                     (1.1364612503333955, 0.2102101683550495, -0.19215580431883517),
                                     (-1.228559, -0.39627963709303526, -0.003769),
                                     (-1.815912, -0.528388622300728, 0.8205185244601456),
                                     (-1.7371022798586897, -0.6158387201413105, -0.8617520978405825),
                                     (1.816156296366294, -0.11115831854651761, -0.08874334072674119),
                                     (1.740013, -0.8340644266195631, 0.6647184755398544))}
        expected_xyz_2 = {'symbols': ('N', 'H', 'H', 'N', 'H', 'H', 'N', 'H'), 'isotopes': (14, 1, 1, 14, 1, 1, 14, 1),
                          'coords': ((-0.3912219778197764, 0.7175676814534824, -0.090895),
                                     (-0.4712490978405824, 1.1822771956811648, 0.789603377699272),
                                     (0.21286874966660452, 0.5515378316449505, -0.2724681956811648),
                                     (-1.228559, -0.5459623629069648, -0.003769),
                                     (-1.815912, -0.47819337769927206, 0.8104794755398543),
                                     (-1.8274537201413104, -0.5254872798586896, -0.8215959021594176),
                                     (2.003259703633706, -0.18599968145348236, -0.05132265927325881),
                                     (1.740013, -0.8641815733804368, 0.6747575244601457))}
        self.assertEqual(xyz_1, expected_xyz_1)
        self.assertEqual(xyz_2, expected_xyz_2)

    def _check_atom_connectivity_in_rd_mol_block(self, rmg_mol, rd_mol_block):
        """An internal helper function for testing."""
        for line in rd_mol_block:
            splits = line.split()
            if len(splits) == 4:
                index1, index2 = int(splits[0]) - 1, int(splits[1]) - 1
                self.assertIn(rmg_mol.atoms[index1], list(rmg_mol.atoms[index2].edges.keys()))

    def test_rdkit_conf_from_mol(self):
        """Test the rdkit_conf_from_mol() function."""
        b_mol = converter.molecules_from_xyz(self.xyz5['dict'])[1]
        conf, rd_mol = converter.rdkit_conf_from_mol(mol=b_mol, xyz=self.xyz5['dict'])
        self.assertTrue(conf.Is3D())
        self.assertEqual(rd_mol.GetNumAtoms(), 5)

    def test_s_bonds_mol_from_xyz(self):
        """Test creating a molecule with only single bonds from xyz"""
        xyz1 = converter.str_to_xyz("""S      -0.06618943   -0.12360663   -0.07631983
O      -0.79539707    0.86755487    1.02675668
O      -0.68919931    0.25421823   -1.34830853
N       0.01546439   -1.54297548    0.44580391
C       1.59721519    0.47861334    0.00711000
H       1.94428095    0.40772394    1.03719428
H       2.20318015   -0.14715186   -0.64755729
H       1.59252246    1.51178950   -0.33908352
H      -0.87856890   -2.02453514    0.38494433
H      -1.34135876    1.49608206    0.53295071""")

        xyz2 = converter.str_to_xyz("""O       2.64631000   -0.59546000    0.29327900
O       2.64275300    2.05718500   -0.72942300
C       1.71639100    1.97990400    0.33793200
C      -3.48200000    1.50082200    0.03091100
C      -3.85550400   -1.05695100   -0.03598300
C       3.23017500   -1.88003900    0.34527100
C      -2.91846400    0.11144600    0.02829400
C       0.76935400    0.80820200    0.23396500
C      -1.51123800   -0.09830700    0.09199100
C       1.28495500   -0.50051800    0.22531700
C      -0.59550400    0.98573400    0.16444900
C      -0.94480400   -1.39242500    0.08331900
C       0.42608700   -1.59172200    0.14650400
H       2.24536500    1.93452800    1.29979800
H       1.14735500    2.91082400    0.31665700
H      -3.24115200    2.03800800    0.95768700
H      -3.08546100    2.10616100   -0.79369800
H      -4.56858900    1.48636200   -0.06630800
H      -4.89652000   -0.73067200   -0.04282300
H      -3.69325500   -1.65970000   -0.93924100
H      -3.72742500   -1.73294900    0.81894100
H       3.02442400   -2.44854700   -0.56812500
H       4.30341500   -1.72127600    0.43646000
H       2.87318600   -2.44236600    1.21464900
H      -0.97434200    2.00182800    0.16800300
H      -1.58581300   -2.26344700    0.02264400
H       0.81122400   -2.60336100    0.13267800
H       3.16280800    1.25020800   -0.70346900""")

        xyz3 = converter.str_to_xyz("""N       2.24690600   -0.00006500    0.11597700
C      -1.05654800    1.29155000   -0.02642500
C      -1.05661400   -1.29150400   -0.02650600
C      -0.30514100    0.00000200    0.00533200
C       1.08358900   -0.00003400    0.06558000
H      -0.39168300    2.15448600   -0.00132500
H      -1.67242600    1.35091400   -0.93175000
H      -1.74185400    1.35367700    0.82742800
H      -0.39187100   -2.15447800    0.00045500
H      -1.74341400   -1.35278100    0.82619100
H      -1.67091600   -1.35164600   -0.93286400""")

        xyz4 = converter.str_to_xyz("""C      -0.86594600    0.19886100    2.37159000
C       0.48486900   -0.16232000    1.75422500
C       1.58322700    0.83707500    2.14923200
C       0.88213600   -1.51753600    2.17861400
N       1.17852900   -2.57013900    2.53313600
N       0.51051200   -0.21074800    0.26080100
N      -0.51042000    0.21074000   -0.26079600
C      -0.48479200    0.16232300   -1.75422300
C       0.86590400   -0.19926100   -2.37161200
C      -1.58344900   -0.83674100   -2.14921800
C      -0.88166600    1.51765700   -2.17859800
N      -1.17777100    2.57034900   -2.53309500
H      -1.16019200    1.20098300    2.05838400
H      -1.64220300   -0.50052400    2.05954500
H      -0.78054100    0.17214100    3.45935000
H       1.70120000    0.85267300    3.23368300
H       2.53492600    0.56708700    1.69019900
H       1.29214500    1.83331400    1.80886700
H       1.15987300   -1.20145600   -2.05838100
H       0.78046800   -0.17257000   -3.45937100
H       1.64236100    0.49992400   -2.05962300
H      -2.53504500   -0.56650600   -1.69011500
H      -1.70149200   -0.85224500   -3.23366300
H      -1.29263300   -1.83308300   -1.80892900""")

        xyz5 = converter.str_to_xyz("""O       0.90973400   -0.03064000   -0.09605500
O       0.31656600   -0.00477100   -1.21127600
O       2.17315400   -0.03069900   -0.09349100""")

        mol1 = converter.s_bonds_mol_from_xyz(xyz1)
        mol2 = converter.s_bonds_mol_from_xyz(xyz2)
        mol3 = converter.s_bonds_mol_from_xyz(xyz3)
        mol4 = converter.s_bonds_mol_from_xyz(xyz4)
        mol5 = converter.s_bonds_mol_from_xyz(xyz5)

        self.assertEqual(len(mol1.atoms), 10)
        self.assertEqual(len(mol2.atoms), 28)
        self.assertEqual(len(mol3.atoms), 11)
        self.assertEqual(len(mol4.atoms), 24)
        self.assertEqual(len(mol5.atoms), 3)

    def test_set_rdkit_dihedrals(self):
        """Test setting the dihedral angle of an RDKit molecule"""
        xyz0 = converter.str_to_xyz("""O       1.17961475   -0.92725986    0.15472373
C       0.45858928    0.27919340   -0.04589251
C      -1.02470597   -0.01894626    0.00226686
H       0.73480842    0.69726202   -1.01850832
H       0.73330833    0.98882191    0.74024781
H      -1.29861662   -0.45953441    0.96660817
H      -1.29713649   -0.74721756   -0.76877222
H      -1.61116041    0.89155300   -0.14917209
H       2.12529871   -0.70387223    0.11849858""")
        spc0 = ARCSpecies(label='CCO', smiles='CCO', xyz=xyz0)  # define with xyz for consistent atom order
        mol0 = spc0.mol

        torsion0 = (3, 2, 1, 9)  # the OH rotor
        torsion0_list = [tor - 1 for tor in torsion0]
        new_dihedral = -60
        deg_increment = 240  # -180 + 240 = +60

        conf, rd_mol = converter.rdkit_conf_from_mol(mol0, xyz0)
        new_xyz1 = converter.set_rdkit_dihedrals(conf, rd_mol, torsion0_list, deg_abs=new_dihedral)

        conf, rd_mol = converter.rdkit_conf_from_mol(mol0, xyz0)  # convert again to init the conf object
        new_xyz2 = converter.set_rdkit_dihedrals(conf, rd_mol, torsion0_list, deg_increment=deg_increment)

        expected_xyz1 = """O       1.17961475   -0.92725986    0.15472373
C       0.45858928    0.27919340   -0.04589251
C      -1.02470597   -0.01894626    0.00226686
H       0.73480842    0.69726202   -1.01850832
H       0.73330833    0.98882191    0.74024781
H      -1.29861662   -0.45953441    0.96660817
H      -1.29713649   -0.74721756   -0.76877222
H      -1.61116041    0.89155300   -0.14917209
H       0.92345327   -1.27098714    1.02751540
"""
        expected_xyz2 = """O       1.17961475   -0.92725986    0.15472373
C       0.45858928    0.27919340   -0.04589251
C      -1.02470597   -0.01894626    0.00226686
H       0.73480842    0.69726202   -1.01850832
H       0.73330833    0.98882191    0.74024781
H      -1.29861662   -0.45953441    0.96660817
H      -1.29713649   -0.74721756   -0.76877222
H      -1.61116041    0.89155300   -0.14917209
H       0.92480849   -1.53430645   -0.56088835
"""

        self.assertTrue(almost_equal_coords_lists(new_xyz1, converter.str_to_xyz(expected_xyz1)))
        self.assertTrue(almost_equal_coords_lists(new_xyz2, converter.str_to_xyz(expected_xyz2)))

        xyz1 = converter.str_to_xyz("""N      -0.29070308    0.26322835    0.48770927
N       0.29070351   -0.26323281   -0.48771096
N      -2.61741263    1.38275080    2.63428181
N       2.61742270   -1.38276006   -2.63427425
C      -1.77086206    0.18100754    0.43957605
C       1.77086254   -0.18101028   -0.43957552
C      -2.22486176   -1.28143567    0.45202312
C      -2.30707039    0.92407663   -0.78734681
C       2.30707074   -0.92407071    0.78735246
C       2.22485929    1.28143406   -0.45203080
C      -2.23868798    0.85547218    1.67084736
C       2.23869247   -0.85548109   -1.67084185
H      -1.90398693   -1.81060764   -0.45229645
H      -3.31681639   -1.35858536    0.51240600
H      -1.80714051   -1.81980551    1.31137107
H      -3.40300863    0.95379538   -0.78701415
H      -1.98806037    0.44494681   -1.71978670
H      -1.94802915    1.96005927   -0.81269573
H       1.98805486   -0.44493850    1.71978893
H       1.94803425   -1.96005464    0.81270509
H       3.40300902   -0.95378386    0.78702431
H       1.90398036    1.81061002    0.45228426
H       3.31681405    1.35858667   -0.51241516
H       1.80713611    1.81979843   -1.31138136""")
        spc1 = ARCSpecies(label='AIBN', smiles='CC(C)(C#N)/N=N/C(C)(C)C#N', xyz=xyz1)
        mol1 = spc1.mol

        torsion1 = (1, 2, 6, 9)
        torsion1_list = [tor - 1 for tor in torsion1]
        new_dihedral = 118.2

        conf, rd_mol = converter.rdkit_conf_from_mol(mol1, xyz1)
        new_xyz3 = converter.set_rdkit_dihedrals(conf, rd_mol, torsion1_list, deg_abs=new_dihedral)

        expected_xyz3 = """N      -0.29070308    0.26322835    0.48770927
N       0.29070351   -0.26323281   -0.48771096
N      -2.61741263    1.38275080    2.63428181
N       2.48573367    1.01638899   -2.68295766
C      -1.77086206    0.18100754    0.43957605
C       1.77086254   -0.18101028   -0.43957552
C      -2.22486176   -1.28143567    0.45202312
C      -2.30707039    0.92407663   -0.78734681
C       2.38216062   -1.58430507   -0.39387342
C       2.21983062    0.66527087    0.75509913
C      -2.23868798    0.85547218    1.67084736
C       2.16482620    0.49023713   -1.69815092
H      -1.90398693   -1.81060764   -0.45229645
H      -3.31681639   -1.35858536    0.51240600
H      -1.80714051   -1.81980551    1.31137107
H      -3.40300863    0.95379538   -0.78701415
H      -1.98806037    0.44494681   -1.71978670
H      -1.94802915    1.96005927   -0.81269573
H       2.11909310   -2.10839740    0.53181512
H       2.02775663   -2.19945525   -1.22981644
H       3.47613291   -1.54390687   -0.45350823
H       1.95308217    0.19222185    1.70685860
H       3.30593713    0.81467275    0.75113509
H       1.74954927    1.65592664    0.73932447
"""

        self.assertTrue(almost_equal_coords_lists(new_xyz3, converter.str_to_xyz(expected_xyz3)))

        rd_conf, rd_mol = converter.rdkit_conf_from_mol(mol1, converter.str_to_xyz(expected_xyz3))
        angle = rdMT.GetDihedralDeg(rd_conf, torsion1_list[0], torsion1_list[1], torsion1_list[2], torsion1_list[3])

        self.assertAlmostEqual(angle, 118.2, 5)

        xyz4 = """O       1.28706525    0.52121353    0.04219198
C       0.39745682   -0.35265044   -0.63649234
C      -0.98541845    0.26289370   -0.64801959
H       0.76016885   -0.50111637   -1.65799025
H       0.38478504   -1.31559717   -0.11722981
H      -0.96971239    1.23774091   -1.14654347
H      -1.69760597   -0.38642828   -1.16478035
H      -1.34010718    0.43408610    0.37373771
H       2.16336803    0.09985803    0.03295192"""
        spc4 = ARCSpecies(label='ethanol', smiles='CCO', xyz=xyz4)
        rd_conf, rd_mol = converter.rdkit_conf_from_mol(mol=spc4.mol, xyz=converter.str_to_xyz(xyz4))
        torsion4 = [9, 1, 2, 3]
        torsion4_list = [tor - 1 for tor in torsion4]
        new_xyz4 = converter.set_rdkit_dihedrals(rd_conf, rd_mol, torsion4_list, deg_abs=60)
        expected_xyz4 = """O       1.28706525    0.52121353    0.04219198
C       0.39745682   -0.35265044   -0.63649234
C       0.36441173   -1.68197093    0.08682400
H      -0.59818222    0.10068325   -0.65235399
H       0.74799641   -0.48357798   -1.66461710
H       0.03647269   -1.54932006    1.12314420
H      -0.31340646   -2.38081353   -0.41122551
H       1.36475837   -2.12581592    0.12433596
H       2.16336803    0.09985803    0.03295192"""
        self.assertEqual(converter.xyz_to_str(new_xyz4), expected_xyz4)

    def test_get_center_of_mass(self):
        """Test calculating the center of mass for coordinates"""
        xyz = """O       1.28706525    0.52121353    0.04219198
C       0.39745682   -0.35265044   -0.63649234
C       0.36441173   -1.68197093    0.08682400
H      -0.59818222    0.10068325   -0.65235399
H       0.74799641   -0.48357798   -1.66461710
H       0.03647269   -1.54932006    1.12314420
H      -0.31340646   -2.38081353   -0.41122551
H       1.36475837   -2.12581592    0.12433596
H       2.16336803    0.09985803    0.03295192
"""
        cm_x, cm_y, cm_z = converter.get_center_of_mass(xyz=converter.str_to_xyz(xyz))
        self.assertAlmostEqual(cm_x, 0.7201, 3)
        self.assertAlmostEqual(cm_y, -0.4880, 3)
        self.assertAlmostEqual(cm_z, -0.1603, 3)

        xyz = """C	1.1714680	-0.4048940	0.0000000
C	0.0000000	0.5602500	0.0000000
O	-1.1945070	-0.2236470	0.0000000
H	-1.9428910	0.3834580	0.0000000
H	2.1179810	0.1394450	0.0000000
H	1.1311780	-1.0413680	0.8846660
H	1.1311780	-1.0413680	-0.8846660
H	0.0448990	1.2084390	0.8852880
H	0.0448990	1.2084390	-0.8852880"""
        cm_x, cm_y, cm_z = converter.get_center_of_mass(xyz=converter.str_to_xyz(xyz))
        self.assertAlmostEqual(cm_x, -0.0540, 3)
        self.assertAlmostEqual(cm_y, -0.0184, 3)
        self.assertAlmostEqual(cm_z, -0.0000, 3)

        xyz = {'coords': ((0.0, 0.0, 0.113488),
                          (0.0, 0.93867, -0.264806),
                          (0.812912, -0.469335, -0.264806),
                          (-0.812912, -0.469335, -0.264806)),
               'symbols': ('N', 'H', 'H', 'H')}
        cm_x, cm_y, cm_z = converter.get_center_of_mass(converter.check_xyz_dict(xyz))
        self.assertAlmostEqual(cm_x, 0.0000, 3)
        self.assertAlmostEqual(cm_y, 0.0000, 3)
        self.assertAlmostEqual(cm_z, 0.0463, 3)

    def test_translate_to_center_of_mass(self):
        """Test calculating the center of mass for coordinates"""
        xyz = """O       1.28706525    0.52121353    0.04219198
C       0.39745682   -0.35265044   -0.63649234
C       0.36441173   -1.68197093    0.08682400
H      -0.59818222    0.10068325   -0.65235399
H       0.74799641   -0.48357798   -1.66461710
H       0.03647269   -1.54932006    1.12314420
H      -0.31340646   -2.38081353   -0.41122551
H       1.36475837   -2.12581592    0.12433596
H       2.16336803    0.09985803    0.03295192
"""
        translated_xyz = converter.translate_to_center_of_mass(converter.str_to_xyz(xyz))
        cm_x, cm_y, cm_z = converter.get_center_of_mass(xyz=translated_xyz)
        self.assertAlmostEqual(cm_x, 0.0000, 3)
        self.assertAlmostEqual(cm_y, 0.0000, 3)
        self.assertAlmostEqual(cm_z, 0.0000, 3)

        xyz = {'coords': ((0.0, 0.0, 0.113488),
                          (0.0, 0.93867, -0.264806),
                          (0.812912, -0.469335, -0.264806),
                          (-0.812912, -0.469335, -0.264806)),
               'symbols': ('N', 'H', 'H', 'H')}
        translated_xyz = converter.translate_to_center_of_mass(converter.check_xyz_dict(xyz))
        expected_xyz = """N       0.00000000    0.00000000    0.06717524
H       0.00000000    0.93867000   -0.31111876
H       0.81291200   -0.46933500   -0.31111876
H      -0.81291200   -0.46933500   -0.31111876"""
        self.assertEqual(converter.xyz_to_str(translated_xyz), expected_xyz)
        cm_x, cm_y, cm_z = converter.get_center_of_mass(translated_xyz)
        self.assertAlmostEqual(cm_x, 0.0000, 3)
        self.assertAlmostEqual(cm_y, 0.0000, 3)
        self.assertAlmostEqual(cm_z, 0.0000, 3)

    def set_radicals_correctly_from_xyz(self):
        """Test that we determine the number of radicals correctly from given xyz and multiplicity"""
        self.assertEqual(self.spc1.multiplicity, 1)  # NH(S), a nitrene
        self.assertTrue(all([atom.radical_electrons == 0 for atom in self.spc1.mol.atoms]))
        self.assertEqual(self.spc2.multiplicity, 1)  # NH(S), a nitrene
        self.assertTrue(all([atom.radical_electrons == 0 for atom in self.spc2.mol.atoms]))
        self.assertEqual(self.spc3.multiplicity, 1)  # NCN(S), a singlet birad
        self.assertTrue(all([atom.radical_electrons == 1 for atom in self.spc3.mol.atoms if atom.is_nitrogen()]))
        self.assertEqual(self.spc3.multiplicity, 3)  # NCN(T)
        self.assertTrue(all([atom.radical_electrons == 1 for atom in self.spc3.mol.atoms if atom.is_nitrogen()]))

    def test_order_atoms_in_mol_list(self):
        """Test reordering atoms in a molecule list using a reference molecule"""
        ref_mol = Molecule(smiles='[CH](CC[CH]c1ccccc1)c1ccccc1')
        mol_list = ref_mol.copy(deep=True).generate_resonance_structures(keep_isomorphic=False, filter_structures=True)
        success = converter.order_atoms_in_mol_list(ref_mol=ref_mol, mol_list=mol_list)
        self.assertTrue(success)
        bond_dict = dict()
        for index1, atom1 in enumerate(ref_mol.atoms):
            for atom2 in atom1.edges.keys():
                index2 = ref_mol.atoms.index(atom2)
                if index1 < index2:
                    if index1 not in bond_dict:
                        bond_dict[index1] = [index2]
                    else:
                        bond_dict[index1].append(index2)
        for mol in mol_list:
            for index1, atom1 in enumerate(mol.atoms):
                for atom2 in atom1.edges.keys():
                    index2 = mol.atoms.index(atom2)
                    if index1 < index2:
                        self.assertIn(index2, bond_dict[index1])  # check that these atoms are connected in all mols

    def test_order_atoms(self):
        """Test the order_atoms function"""
        mol1 = converter.s_bonds_mol_from_xyz(self.xyz10['dict'])
        mol2 = converter.s_bonds_mol_from_xyz(self.xyz10['dict_diff_order1'])
        mol3 = converter.s_bonds_mol_from_xyz(self.xyz10['dict_diff_order2'])
        converter.order_atoms(ref_mol=mol1, mol=mol2)
        for atom1, atom2 in zip(mol1.atoms, mol2.atoms):
            self.assertEqual(atom1.symbol, atom2.symbol)
        converter.order_atoms(ref_mol=mol3, mol=mol1)
        for atom1, atom2 in zip(mol3.atoms, mol1.atoms):
            self.assertEqual(atom1.symbol, atom2.symbol)

        ref_mol = Molecule(smiles='[CH](CC[CH]c1ccccc1)c1ccccc1')
        mol_list = ref_mol.copy(deep=True).generate_resonance_structures(keep_isomorphic=False, filter_structures=True)
        for mol in mol_list:
            converter.order_atoms(ref_mol=ref_mol, mol=mol)
            bond_dict = dict()
            for index1, atom1 in enumerate(ref_mol.atoms):
                for atom2 in atom1.edges.keys():
                    index2 = ref_mol.atoms.index(atom2)
                    if index1 < index2:
                        if index1 not in bond_dict:
                            bond_dict[index1] = [index2]
                        else:
                            bond_dict[index1].append(index2)
            for index1, atom1 in enumerate(mol.atoms):
                for atom2 in atom1.edges.keys():
                    index2 = mol.atoms.index(atom2)
                    if index1 < index2:
                        self.assertIn(index2, bond_dict[index1])  # check that these atoms are connected in all mols

    def test_is_isomorphic(self):
        """Test the RMG is_isomorphic method"""
        mol1 = converter.s_bonds_mol_from_xyz(self.xyz1['dict'])
        mol2 = converter.s_bonds_mol_from_xyz(self.xyz1['dict_diff_order'])
        self.assertTrue(mol1.is_isomorphic(mol2, save_order=True, strict=False))

        mol1 = converter.s_bonds_mol_from_xyz(self.xyz11['dict'])
        mol2 = converter.s_bonds_mol_from_xyz(self.xyz11['dict_diff_order'])
        self.assertTrue(mol1.is_isomorphic(mol2, save_order=True, strict=False))

        mol1 = converter.s_bonds_mol_from_xyz(self.xyz10['dict'])
        mol2 = converter.s_bonds_mol_from_xyz(self.xyz10['dict_diff_order1'])
        mol3 = converter.s_bonds_mol_from_xyz(self.xyz10['dict_diff_order2'])
        self.assertTrue(mol1.is_isomorphic(mol2, save_order=True, strict=False))
        self.assertTrue(mol1.is_isomorphic(mol3, save_order=True, strict=False))

    def test_add_lone_pairs_by_atom_valance(self):
        """Test the add_lone_pairs_by_atom_valance function"""
        adj1 = """multiplicity 3
1 N u2 p1 c0 {2,S}
2 S u0 p2 c0 {1,S} {3,S}
3 H u0 p0 c0 {2,S}"""
        mol1 = Molecule().from_adjacency_list(adjlist=adj1)
        converter.add_lone_pairs_by_atom_valance(mol1)
        self.assertEqual(mol1.to_smiles(), '[N]S')
        mol1.multiplicity = 1
        converter.add_lone_pairs_by_atom_valance(mol1)
        self.assertEqual(mol1.to_smiles(), 'N#S')

        adj2 = """multiplicity 3
1 N u2 p1 c0 {2,S}
2 N u0 p1 c0 {1,S} {3,S} {4,S}
3 H u0 p0 c0 {2,S}
4 H u0 p0 c0 {2,S}"""
        mol2 = Molecule().from_adjacency_list(adjlist=adj2)
        converter.add_lone_pairs_by_atom_valance(mol2)
        self.assertEqual(mol2.to_smiles(), '[N]N')
        mol2.multiplicity = 1
        converter.add_lone_pairs_by_atom_valance(mol2)
        self.assertEqual(mol2.to_smiles(), '[N-]=[NH2+]')

        adj3 = """multiplicity 3
1 C u0 p0 c0 {2,S} {5,S} {6,S} {7,S}
2 C u0 p0 c0 {1,S} {3,S} {8,S} {9,S}
3 C u2 p0 c0 {2,S} {4,S}
4 H u0 p0 c0 {3,S}
5 H u0 p0 c0 {1,S}
6 H u0 p0 c0 {1,S}
7 H u0 p0 c0 {1,S}
8 H u0 p0 c0 {2,S}
9 H u0 p0 c0 {2,S}"""
        mol3 = Molecule().from_adjacency_list(adjlist=adj3)
        converter.add_lone_pairs_by_atom_valance(mol3)
        self.assertEqual(mol3.to_smiles(), '[CH]CC')
        mol3.multiplicity = 1
        converter.add_lone_pairs_by_atom_valance(mol3)
        self.assertEqual(mol3.to_adjacency_list(), """1 C u0 p0 c0 {2,S} {3,S} {4,S} {5,S}
2 C u0 p0 c0 {1,S} {6,S} {7,S} {8,S}
3 C u0 p1 c0 {1,S} {9,S}
4 H u0 p0 c0 {1,S}
5 H u0 p0 c0 {1,S}
6 H u0 p0 c0 {2,S}
7 H u0 p0 c0 {2,S}
8 H u0 p0 c0 {2,S}
9 H u0 p0 c0 {3,S}
""")

        adj4 = """multiplicity 3
1 C u0 p0 c0 {2,S} {4,S} {5,S} {6,S}
2 C u0 p0 c0 {1,S} {3,S} {7,S} {8,S}
3 N u2 p1 c0 {2,S}
4 H u0 p0 c0 {1,S}
5 H u0 p0 c0 {1,S}
6 H u0 p0 c0 {1,S}
7 H u0 p0 c0 {2,S}
8 H u0 p0 c0 {2,S}"""
        mol4 = Molecule().from_adjacency_list(adjlist=adj4)
        converter.add_lone_pairs_by_atom_valance(mol4)
        self.assertEqual(mol4.to_smiles(), 'CC[N]')
        mol4.multiplicity = 1
        converter.add_lone_pairs_by_atom_valance(mol4)
        self.assertEqual(mol4.to_adjacency_list(), """1 N u0 p2 c0 {3,S}
2 C u0 p0 c0 {3,S} {4,S} {5,S} {6,S}
3 C u0 p0 c0 {1,S} {2,S} {7,S} {8,S}
4 H u0 p0 c0 {2,S}
5 H u0 p0 c0 {2,S}
6 H u0 p0 c0 {2,S}
7 H u0 p0 c0 {3,S}
8 H u0 p0 c0 {3,S}
""")

    def test_modify_coords(self):
        """Test modifying coordinates using zmats"""
        xyz1 = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'),
                'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                'coords': ((1.53830201, 0.86423425, 0.07482439), (0.94923576, -0.20847619, -0.03881977),
                           (-0.56154542, -0.31516675, -0.05011465), (-1.18981166, 0.93489731, 0.17603211),
                           (1.49712659, -1.15833718, -0.15458647), (-0.87737433, -0.70077243, -1.02287491),
                           (-0.87053611, -1.01071746, 0.73427128), (-0.48610273, 1.61361259, 0.11915705))}
        xyz2 = {'symbols': ('C', 'C', 'N', 'H', 'H', 'H'), 'isotopes': (12, 12, 14, 1, 1, 1),
                'coords': ((-0.48629842, 0.00448354, 0.00136213), (0.97554967, -0.0089943, -0.00273253),
                           (2.13574353, -0.01969098, -0.00598223), (-0.88318669, -0.63966273, -0.78887729),
                           (-0.87565097, -0.35336611, 0.95910491), (-0.86615712, 1.01723058, -0.16287498))}
        xyz3 = {'symbols': ('O', 'C', 'C', 'S', 'O', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                'isotopes': (16, 12, 12, 32, 16, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                'coords': ((-2.77437517, 0.17200669, 0.18524832), (-1.64613785, -0.19208096, 0.80434075),
                           (-0.40774525, 0.26424657, -0.07952902), (-0.26203276, 2.09580334, -0.05090198),
                           (-0.67096595, -0.16397552, -1.42109845), (0.89264107, -0.40136991, 0.41083574),
                           (2.12441624, -0.1300863, -0.44918504), (-1.50623429, -1.27619307, 0.9524955),
                           (-1.45114032, 0.18501518, 1.82167553), (-1.59654975, 2.25615634, -0.09052499),
                           (-1.65730431, -0.11079255, -1.400057), (0.74870779, -1.48997779, 0.41386971),
                           (1.10331691, -0.11082471, 1.44762119), (2.41262211, 0.92463409, -0.42840126),
                           (1.95758158, -0.4244074, -1.48990015), (2.97418137, -0.70882619, -0.0719403))}
        xyz4 = {'symbols': ('C', 'C', 'O', 'C', 'C', 'O', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                'isotopes': (12, 12, 16, 12, 12, 16, 1, 1, 1, 1, 1, 1, 1, 1),
                'coords': ((-1.2713687423422115, -0.7423678681688866, -0.6322577211421921),
                           (-0.08008635702808505, -0.40741599130374034, 0.2550353232234618),
                           (-0.5452666768773297, -0.20159898814584978, 1.588840559327411),
                           (0.6158080809151276, 0.8623086771891557, -0.21553636846891006),
                           (1.9196775903993375, 1.0155396004927764, 0.5174563928754532),
                           (3.0067486097953653, 1.0626738453913969, -0.05177300486677717),
                           (-2.012827991034863, 0.06405231524730193, -0.6138583677564631),
                           (-0.9611224758801538, -0.9119047827586647, -1.6677831987437075),
                           (-1.7781253059828275, -1.6433798866337939, -0.27003123559560865),
                           (0.6204384954940876, -1.2502614603989448, 0.2715082028581114),
                           (-1.0190238747695064, -1.007069904421531, 1.8643494196872146),
                           (0.014234510343435022, 1.753076784716312, -0.005169050775340246),
                           (0.827317336700949, 0.8221266348378934, -1.2893801191974432),
                           (1.8498494882204641, 1.107064846374729, 1.6152311353151314))}
        xyz5 = {'symbols': ('N', 'C', 'C', 'C', 'H', 'H', 'C', 'C', 'C', 'C', 'H', 'H', 'C', 'C', 'C', 'H', 'C', 'C',
                            'N', 'H', 'H', 'C', 'H', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'C', 'C', 'C', 'H', 'H', 'H',
                            'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'O', 'O', 'C', 'O', 'H', 'H', 'H'),
                'isotopes': (14, 12, 12, 12, 1, 1, 12, 12, 12, 12, 1, 1, 12, 12, 12, 1, 12, 12, 14, 1, 1, 12, 1, 12, 12,
                             12, 1, 1, 1, 1, 12, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 16, 12, 16, 1, 1, 1),
                'coords': ((-0.766219, -0.248648, -0.347086), (0.667812, -0.150498, -0.496932),
                           (-1.490842, 1.000959, -0.245328), (1.311194, -1.339578, -1.19388),
                           (0.976451, 0.831716, -0.911173), (1.231101, -0.062221, 0.660162),
                           (-1.346406, -1.400789, 0.294395), (-1.022138, 2.069095, 0.533928),
                           (-2.673271, 1.125443, -1.008282), (2.575265, -0.94966, -1.974365),
                           (1.534634, -2.14679, -0.467576), (0.584227, -1.791819, -1.905459),
                           (-0.574689, -2.103356, 1.24726), (-2.643838, -1.861964, -0.035016),
                           (-1.73741, 3.268914, 0.549347), (-0.105632, 1.96688, 1.126589),
                           (-3.134563, -0.04419, -1.826788), (-3.378705, 2.332664, -0.970971),
                           (3.611589, -0.28425, -1.113057), (2.30114, -0.222978, -2.774031),
                           (2.969795, -1.853671, -2.489377), (-1.04268, -3.284134, 1.815898),
                           (0.388329, -1.696921, 1.570938), (-3.645512, -1.174123, -0.925823),
                           (-3.088386, -3.061615, 0.555145), (-2.911462, 3.400813, -0.198004),
                           (-1.376219, 4.102013, 1.150524), (-3.935589, 0.254447, -2.531702),
                           (-2.298405, -0.411572, -2.461402), (-4.293927, 2.444159, -1.549116),
                           (4.776265, 0.123769, -1.959689), (4.064268, -1.169457, 0.001273),
                           (-2.30222, -3.77607, 1.457834), (-0.433782, -3.814872, 2.545573),
                           (-4.135291, -1.935447, -1.571709), (-4.453058, -0.768805, -0.272612),
                           (-4.078335, -3.442593, 0.302875), (-3.465321, 4.337257, -0.179068),
                           (5.500278, 0.67338, -1.336133), (5.30611, -0.707961, -2.446036),
                           (4.433161, 0.821539, -2.74083), (4.954327, -0.743379, 0.488676),
                           (4.300156, -2.200598, -0.295594), (3.265545, -1.194959, 0.769181),
                           (-2.671885, -4.702569, 1.890597), (1.78286, 0.089948, 1.873468),
                           (1.758606, 1.382484, 2.130308), (2.973471, 2.040706, 1.623336),
                           (2.813335, 2.256698, 0.248083), (2.919925, 3.030613, 2.105087),
                           (3.858517, 1.438684, 1.858856), (3.005024, 1.410381, -0.277159))}
        xyz6 = {'symbols': ('N', 'C', 'C', 'H', 'C', 'H', 'H', 'N', 'H', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
                            'H', 'H', 'O', 'O', 'H', 'C', 'H', 'H', 'O', 'H'),
                'isotopes': (14, 12, 12, 1, 12, 1, 1, 14, 1, 12, 12, 1, 1, 1,
                             1, 1, 1, 1, 1, 1, 16, 16, 1, 12, 1, 1, 16, 1),
                'coords': ((2.608231, -0.458895, 1.629197), (2.408715, 0.132166, 0.318653),
                           (1.174426, -0.323822, -0.471554), (3.304408, -0.071078, -0.291093),
                           (-0.13532, 0.016735, 0.225918), (1.210534, 0.150539, -1.46601),
                           (1.221625, -1.416078, -0.631885), (-1.316045, -0.574442, -0.379686),
                           (-0.086456, -0.362851, 1.260573), (-1.468231, -0.411368, -1.77232),
                           (-2.505886, -0.419831, 0.432347), (-2.403425, -0.886127, -2.107496),
                           (-0.621099, -0.850903, -2.320815), (-3.364172, -0.88926, -0.068909),
                           (-2.767365, 0.637288, 0.628231), (-2.360065, -0.927144, 1.400068),
                           (2.574849, -1.475283, 1.579253), (1.886591, -0.170591, 2.284831),
                           (2.375177, 1.228181, 0.441157), (-0.231725, 1.121336, 0.301367),
                           (-1.455199, 0.947478, -2.255384), (-2.58006, 1.611276, -1.811891),
                           (-3.315019, 1.53868, -2.760245), (-3.713498, 1.338038, -4.025244),
                           (-4.754452, 0.99077, -4.021055), (-3.584519, 2.351475, -4.444827),
                           (-2.87635, 0.381401, -4.513467), (-1.966974, 0.665311, -4.338804))}
        mol1 = converter.molecules_from_xyz(xyz1)[1]
        mol2 = converter.molecules_from_xyz(xyz2)[1]
        mol3 = converter.molecules_from_xyz(xyz3)[1]
        mol4 = converter.molecules_from_xyz(xyz4)[1]
        mol5 = converter.molecules_from_xyz(xyz5)[1]  # a TS
        mol6 = converter.molecules_from_xyz(xyz6)[1]  # a TS

        # test atom modification types
        modification_type = 'atom'

        # test R_atom modification
        indices, new_val = [0, 1], 1.5
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'), 'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((0.06385450948408691, 1.6253138441202686, 0.042870253583423557),
                                   (-0.02582727173313104, 0.39833637030950975, 0.9010563970736782),
                                   (-0.02582727173313104, -1.003336361301907, 0.3272239637891734),
                                   (-0.02582727173313104, -1.003336361301907, -1.0899990532469916),
                                   (-0.08138177769352953, 0.465646654907214, 2.0002403496097383),
                                   (0.865704477722866, -1.5264119285073852, 0.6825623354173815),
                                   (-0.9185767861007101, -1.5268489957651346, 0.6785930201570352),
                                   (0.14577602706217008, -0.07998849407327513, -1.367625604543457))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1), new_val, 5)

        indices, new_val = [1, 0], -1.5
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'), 'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((0.01167393998357115, -0.5225807439329089, -0.9899595616178738),
                                   (-0.040525509131742084, 0.26844387347263365, -2.2633625897949208),
                                   (0.01167393998357115, -0.5225807439329089, 1.4216698859880004),
                                   (0.01167393998357115, 0.8926022581407576, 1.3456557382334218),
                                   (0.11202785529567173, -2.2718515121487206, 0.04691079079738447),
                                   (-0.8954040276884763, -0.8508241498293034, 1.9356427400340799),
                                   (0.8880330020652463, -0.8439168226596885, 1.990234136037933),
                                   (-0.13167393678263156, 1.1200467154192293, 0.4039467156910099))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1), - new_val, 5)

        # test A_atom modification
        indices, new_val = [2, 1, 0], 140
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'), 'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((0.011940763595588438, -0.90654939253321, -1.1784203714214114),
                                   (0.011940763595588438, -0.90654939253321, 0.05065327345758153),
                                   (-0.02531707366035523, 0.06629439921242253, 1.2108932996837143),
                                   (0.011940763595588438, 1.5283906429141458, 0.05806971900412017),
                                   (0.03285612994605798, -1.8458593499019589, 0.6277855724118742),
                                   (-0.9645745795119229, 0.3758422785924207, 1.4467600455414558),
                                   (0.8166299978590752, 0.37902049128771864, 1.551524925579085),
                                   (-0.10465928281651019, 1.2266969334608921, -0.8663115945839973))}

        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1), new_val, 5)

        # test changing an angle to 180 degrees
        indices, new_val = [0, 1, 2], 180
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'), 'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((-0.0019281473980474666, 1.559641181574566, 1.013927346529066),
                                   (-0.0019281473980474772, 0.42219553322547265, 0.548267146825631),
                                   (-0.0019281473980474772, -0.9794771983859442, -0.025565286458873793),
                                   (-0.0019281473980474772, -0.9794771983859442, -1.4427883034950388),
                                   (-0.05748265335844597, 0.4895058178231769, 1.6474510993616909),
                                   (0.8896036020579495, -1.5025527655914221, 0.32977308516933435),
                                   (-0.8946776617656266, -1.5029898328491718, 0.32580376990898796),
                                   (0.16967515139725364, -0.05612933115731222, -1.7204148547915041))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1), new_val)

        # test changing a 180 degree angle to something else
        indices, new_val = [0, 1, 2], 120
        expected_xyz = {'symbols': ('C', 'C', 'N', 'H', 'H', 'H'), 'isotopes': (12, 12, 14, 1, 1, 1),
                        'coords': ((0.7757362507465277, 0.4478716325630875, 0.7767867108403768),
                                   (-0.3207007101270898, -0.18515666614565915, 0.04582870107149262),
                                   (-0.3207007101270898, -0.18515666614565915, -1.1144190466784232),
                                   (-0.3207007101270898, 0.8374974028016162, 1.8964626512298475),
                                   (-1.2063452316056904, -0.6964838693490394, 1.8964625790172804),
                                   (0.5649437124447699, -0.6964840572534022, 1.896462566459638))}
        new_xyz = converter.modify_coords(coords=xyz2, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol2)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol2), new_val, 5)

        # test D_atom modification
        indices, new_val = [0, 1, 2, 3], 30
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'), 'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((-0.3812553590829658, 1.4249753409811934, 0.24885596109763952),
                                   (0.13588307254069157, 0.47112021672976, 0.8262208968300058),
                                   (0.13588307254069157, -0.9305525148816568, 0.25238846354550093),
                                   (0.13588307254069157, -0.9305525148816568, -1.1648345534906641),
                                   (0.08032856658029308, 0.5384305013274643, 1.9254048493660656),
                                   (1.0274148219966885, -1.4536280820871348, 0.6077268351737091),
                                   (-0.7568664418268876, -1.4540651493448844, 0.6037575199133627),
                                   (0.30748637133599266, -0.007204647653024865, -1.4424611047871294))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1), new_val, 5)

        indices, new_val = [3, 2, 1, 0], -30
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'), 'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((-0.17268751280677364, -0.941696827801256, -1.1487068217042242),
                                   (-0.17268751280677364, -0.941696827801256, 0.08036682317476873),
                                   (-0.17268751280677364, 0.3328411496875977, 0.8986107061160642),
                                   (0.4830966870190505, 1.3983204216355287, 0.23286144075770054),
                                   (-0.18773471865125574, -1.8811191078717768, 0.6574991306756568),
                                   (-1.0994105700891015, 0.3771264916699556, 1.4764735369276594),
                                   (0.6806108103574798, 0.3121359507669669, 1.5812384626874982),
                                   (-0.2075631130119835, 1.1944491200970329, -0.8365980489813365))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1),
                               360 + new_val, 5)

        indices, new_val = [0, 1, 2, 3], -30
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'), 'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((0.37739906428687087, 1.4249753409811934, 0.24885596109763952),
                                   (-0.13973936733678652, 0.47112021672976, 0.8262208968300058),
                                   (-0.13973936733678652, -0.9305525148816568, 0.25238846354550093),
                                   (-0.13973936733678652, -0.9305525148816568, -1.1648345534906641),
                                   (-0.195293873297185, 0.5384305013274643, 1.9254048493660656),
                                   (0.7517923821192105, -1.4536280820871348, 0.6077268351737091),
                                   (-1.0324888817043656, -1.4540651493448844, 0.6037575199133627),
                                   (0.0318639314585146, -0.007204647653024865, -1.4424611047871294))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1),
                               360 + new_val, 5)

        # test group modification types
        modification_type = 'group'

        # test R_group modification
        indices, new_val = [0, 1], 1.5
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'), 'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((0.06385450815440741, 1.625313844153823, 0.04287025350146201),
                                   (-0.02582727144301671, 0.39833637029935165, 0.9010563970984908),
                                   (-0.02582727144301671, -1.0033363613120652, 0.327223963813986),
                                   (-0.02582727144301671, -1.0033363613120652, -1.089999053222179),
                                   (-0.0813817733100206, 0.4656466548101805, 2.0002403498467567),
                                   (0.8657044801882787, -1.5264119271233758, 0.6825623320367284),
                                   (-0.9185767836497759, -1.5268489971713646, 0.6785930235919653),
                                   (0.1457760273522844, -0.07998849408343323, -1.3676256045186443))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1), new_val, 5)

        # test A_group modification
        indices, new_val = [0, 1, 2], 160
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'), 'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((0.01997925208754263, 1.625852603711386, 0.708691800251658),
                                   (-0.009887200766722545, 0.3981406366172051, 0.6591605436173553),
                                   (-0.009887200766722545, -1.0035320949942117, 0.08532811033285048),
                                   (-0.009887200766722545, -1.0035320949942117, -1.3318949067033146),
                                   (-0.06544170263372645, 0.465450921128034, 1.7583444963656214),
                                   (0.8816445508645728, -1.5266076608055221, 0.44066647855559316),
                                   (-0.9026367129734817, -1.5270447308535111, 0.4366971701108293),
                                   (0.16171609802857856, -0.08018422776557976, -1.6095214579997799))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1), new_val, 5)

        indices, new_val = [1, 2, 5], 160
        expected_xyz = {'symbols': ('O', 'C', 'C', 'S', 'O', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (16, 12, 12, 32, 16, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((-0.45549818019466204, 1.8548729964273216, 0.8440028131622062),
                                   (-0.2667929723517851, 0.6671106629415136, 1.42912314652022),
                                   (-0.2163066356464933, -0.45426196440936106, 0.30526758056697156),
                                   (1.3109140692843337, 0.4741705899686004, -0.12165329723035323),
                                   (-1.3557392716759613, 0.27771606050413156, -0.16203238949855803),
                                   (-0.2163066356464933, -1.8492005047245035, -0.34944907261899716),
                                   (-0.2163066356464933, -1.8492005047245035, -1.87604687202156),
                                   (-1.0601386155429, 0.3401156691690679, 2.122303234960202),
                                   (0.6302934527577109, 0.5164940342603479, 2.051815682570846),
                                   (1.143418340718557, 1.3271327629309078, 0.9043191341647172),
                                   (-1.5046641822171405, 0.8405156651772538, 0.6362234563562041),
                                   (-1.1248176985937233, -2.3816433802478305, -0.03815279071754074),
                                   (0.6330922017716909, -2.4415422695908298, 0.013011559357363423),
                                   (0.707681641272436, -1.4302805756837962, -2.2843133571390752),
                                   (-1.061876978104781, -1.2808214124615414, -2.27542464397285),
                                   (-0.30131566361820894, -2.876339919190297, -2.2463334380185054))}
        new_xyz = converter.modify_coords(coords=xyz3, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol3)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol3), new_val, 5)

        indices, new_val = [5, 2, 1], 160
        expected_xyz = {'symbols': ('O', 'C', 'C', 'S', 'O', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (16, 12, 12, 32, 16, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((0.2917048572251579, -1.5727341554069034, -1.3423072397835754),
                                   (0.2917048572251579, -1.5727341554069034, -0.0048638500194817524),
                                   (0.2917048572251579, -0.06886266257406626, 0.5064553318371674),
                                   (-1.363795569744117, -0.1202634403830567, -0.28936363114537844),
                                   (1.2964570556359054, 0.04149003667864859, -0.508809719558267),
                                   (0.4099139249017979, 1.1367441270166645, 1.4588451220109844),
                                   (0.29481769872300884, 2.504661621457458, 0.7909713103796479),
                                   (1.1685736645928884, -2.0373473546555556, 0.47685945259484286),
                                   (-0.5312728539867155, -2.0767912763680947, 0.5278926826114716),
                                   (-1.2231052441089643, -1.4156454828005882, -0.6216441060907665),
                                   (1.4364524039686508, -0.9213654475865127, -0.6804052856633311),
                                   (1.3966722481626304, 1.107137467791805, 1.9397033126698722),
                                   (-0.33241474313836356, 1.0625526837349102, 2.2633130452338497),
                                   (-0.7009351031697479, 2.671307058557274, 0.3706911401148234),
                                   (1.0334518240640673, 2.6225101662569066, -0.007826505507309234),
                                   (0.474437928409419, 3.293432289151483, 1.52916604039102))}
        new_xyz = converter.modify_coords(coords=xyz3, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol3)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol3), new_val, 4)

        # test D_group modification
        indices, new_val = [0, 1, 2, 3], 98.7
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'),
                        'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((-0.751853407099498, 1.1325746654576616, 0.9630889493590222),
                                   (0.2705229494881336, 0.5773506493576217, 0.5667369568416694),
                                   (0.2705229494881336, -0.8243220822537951, -0.00709547644283548),
                                   (0.2705229494881336, -0.8243220822537951, -1.4243184934790005),
                                   (0.21496844352773511, 0.644660933955326, 1.6659209093777292),
                                   (1.1620546989441305, -1.347397649459273, 0.34824289518537266),
                                   (-0.6222265648794455, -1.3478347167170226, 0.3442735799250263),
                                   (0.4421262482834347, 0.09902578497483683, -1.7019450447754658))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1), new_val, 5)

        indices, new_val = [5, 2, 1, 0], 180
        expected_xyz = {'symbols': ('O', 'C', 'C', 'S', 'O', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (16, 12, 12, 32, 16, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((0.3034340517195509, -1.6113639549493641, -1.7901391417129255),
                                   (0.3034340517195509, -1.6113639549493641, -0.45269575194883194),
                                   (0.3034340517195509, -0.10749246211652697, 0.058623429907817215),
                                   (-1.3193844356755215, 0.6746571866866746, -0.30380395501671575),
                                   (1.3282593544657135, 0.581298860926198, -0.6678526090506967),
                                   (0.30343405171955073, -0.05040119820033895, 1.5985091447581203),
                                   (0.26233878444784786, 1.3540223173114139, 2.1955071424316666),
                                   (1.1803028491569083, -2.0759771588261957, 0.029027564277707585),
                                   (-0.5195436704231056, -2.115421071566818, 0.08006076790649397),
                                   (-1.414911803320983, 0.05150877481380545, -1.4915662613668217),
                                   (1.2907872270567131, 0.05736052141866721, -1.5046434284929022),
                                   (1.2266505257705096, -0.5178979180455376, 1.965811882691859),
                                   (-0.5283478351927398, -0.6406189828710822, 2.0028687871657294),
                                   (-0.6775241224477067, 1.8658969637383576, 1.9706253328328829),
                                   (1.0896028263747624, 1.9687229189733981, 1.8276430689661958),
                                   (0.35031987670665765, 1.2957313570336282, 3.285560142931404))}
        new_xyz = converter.modify_coords(coords=xyz3, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol3)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol3), new_val, 5)

        # test groups modification types
        modification_type = 'groups'

        # test D_groups modification
        indices, new_val = [0, 1, 2, 3], 98.7
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'),
                        'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((-0.7692326765134374, 1.1252152574374596, 0.9810655314575423),
                                   (0.25314357064244697, 0.5699912505374165, 0.5847135445433043),
                                   (0.25314357064244697, -0.8316815836112654, 0.010881153979294123),
                                   (0.25314357064244697, -0.8316815836112654, -1.4063419471715688),
                                   (1.2326181278103254, 1.0755945976230115, 0.6133000157238186),
                                   (1.1446752957640132, -1.3547571699433192, 0.3662195585064876),
                                   (-0.6396059141384572, -1.3551941756763426, 0.3622501790547312),
                                   (0.4247468609767439, 0.09166629658280878, -1.6839684605765641))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1), new_val, 5)
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=xyz1, indices=[4, 1, 2, 3], mol=mol1),
                               176.7937925, 5)
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=[4, 1, 2, 3], mol=mol1),
                               279.5679938, 5)

        indices, new_val = [5, 2, 1, 0], 100
        expected_xyz = {'symbols': ('O', 'C', 'C', 'S', 'O', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (16, 12, 12, 32, 16, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((0.17617288317697363, -1.4263876505749937, -1.3907356765118228),
                                   (0.17617288317697363, -1.4263876505749937, -0.05329233131383648),
                                   (0.17617288317697363, 0.07748361087633482, 0.4580268316508156),
                                   (0.8541264407563205, 1.1799297944814306, -0.8464435250524343),
                                   (1.0315484892431994, 0.12891222316318918, 1.606136465715537),
                                   (-1.2415001838455297, 0.5175023395992786, 0.8716616732793354),
                                   (-2.371148423802697, -0.377635430276555, 0.3685473045279144),
                                   (1.0530416597996317, -1.8910009834245878, 0.42843102214143425),
                                   (-0.646804798256715, -1.930444842122042, 0.47946418053365614),
                                   (1.322524386187, 0.1392850561843193, -1.55769653865906),
                                   (1.5807657244329665, 0.9071634481807671, 1.3438012611373469),
                                   (-1.4308626545937098, 1.5181627982792263, 0.46103575662853813),
                                   (-1.3101730016766409, 0.6090291604729325, 1.9628224613881304),
                                   (-2.328405219901557, -1.376683205512397, 0.811273322532136),
                                   (-2.345556604764221, -0.47877786163003033, -0.7207928024513892),
                                   (-3.3382397150969996, 0.059047399283163715, 0.6394658008190603))}
        new_xyz = converter.modify_coords(coords=xyz3, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol3)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol3), new_val, 5)

        indices, new_val = [4, 3, 1, 0], 236.02
        expected_xyz = {'symbols': ('C', 'C', 'O', 'C', 'C', 'O', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 12, 16, 12, 12, 16, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((-0.3420713780282814, -0.726846939196746, -1.8608060734620697),
                                   (-0.3420713780282814, -0.726846939196746, -0.33809952744080163),
                                   (-1.5199121786498575, -1.3903247017047589, 0.12046140490433599),
                                   (-0.3420713780282814, 0.692986716189357, 0.21142750813209843),
                                   (0.8346249371329908, 0.870417947793265, 1.130523629422891),
                                   (1.8415843350511496, 1.49899165752528, 0.8160475329621943),
                                   (-1.232802341934429, -0.22348356564525385, -2.2527724067647172),
                                   (0.5474409007790566, -0.2291658204558631, -2.2587884226234842),
                                   (-0.36650899336409903, -1.7525658745827613, -2.2443893713107435),
                                   (0.5235538883628821, -1.286773819894118, 0.03414982827280788),
                                   (-1.525486055520759, -2.2842579938670644, -0.2668197974505191),
                                   (-1.246930807816442, 0.9000033565709169, 0.7927934676101465),
                                   (-0.26242043164905693, 1.4290013064896112, -0.5956842516835208),
                                   (0.739203033547077, 0.4163114365921572, 2.132044487804084))}
        new_xyz = converter.modify_coords(coords=xyz4, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol4)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol4), new_val, 5)

        # test 1-indexed input
        indices = [5, 4, 2, 1]
        new_xyz = converter.modify_coords(coords=xyz4, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol4, index=1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol4, index=1),
                               new_val, 5)

        # test TSs
        indices = [19, 10, 4, 2]
        fragments = [[46, 47, 48, 49, 50, 51, 52], [f + 1 for f in range(45)]]
        self.assertAlmostEqual(calculate_dihedral_angle(coords=xyz5, torsion=indices, index=1), 56.83358841, 3)
        new_xyz = converter.modify_coords(coords=xyz5,
                                          indices=indices,
                                          new_value=300,
                                          modification_type='groups',
                                          mol=mol5,
                                          index=1,
                                          fragments=fragments,
                                          )
        self.assertAlmostEqual(calculate_dihedral_angle(coords=new_xyz, torsion=indices, index=1), 300, places=3)

        indices = [1, 2, 3, 5]
        fragments = [[f + 1 for f in range(23)], [24, 25, 26, 27, 28]]
        self.assertAlmostEqual(calculate_dihedral_angle(coords=xyz6, torsion=indices, index=1), 62.30597206, 3)
        new_xyz = converter.modify_coords(coords=xyz6,
                                          indices=indices,
                                          new_value=200,
                                          modification_type='groups',
                                          mol=mol6,
                                          index=1,
                                          fragments=fragments,
                                          )
        self.assertAlmostEqual(calculate_dihedral_angle(coords=new_xyz, torsion=indices, index=1), 200, places=3)

    def test_compare_zmats(self):
        """Test determining whether two conformers have almost equal internal coordinates (zmats)"""
        z_1 = {'symbols': ('N', 'N', 'H', 'H'),
               'coords': ((None, None, None), ('R_1_0', None, None), ('R_2|3_0|1', 'A_2|3_0|1_1|0', None),
                          ('R_2|3_0|1', 'A_2|3_0|1_1|0', 'D_3_1_0_2')),
               'vars': {'R_1_0': 1.2451214479859707, 'D_3_1_0_2': 180.00000435340846, 'R_2|3_0|1': 1.0308198031527174,
                        'A_2|3_0|1_1|0': 112.42663889936155}, 'map': {0: 0, 1: 1, 2: 2, 3: 3}}
        z_2 = {'symbols': ('N', 'N', 'H', 'H'),
               'coords': ((None, None, None), ('R_1_0', None, None), ('R_2|3_0|1', 'A_2|3_0|1_1|0', None),
                          ('R_2|3_0|1', 'A_2|3_0|1_1|0', 'D_3_1_0_2')),
               'vars': {'R_1_0': 1.2458481980184417, 'D_3_1_0_2': 359.99999758516344, 'R_2|3_0|1': 1.0292894916884854,
                        'A_2|3_0|1_1|0': 115.61126115172507}, 'map': {0: 0, 1: 1, 2: 2, 3: 3}}
        z_3 = {'symbols': ('N', 'N', 'H', 'H'),
               'coords': ((None, None, None), ('R_1_0', None, None), ('R_2|3_0|1', 'A_2|3_0|1_1|0', None),
                          ('R_2|3_0|1', 'A_2|3_0|1_1|0', 'D_3_1_0_2')),
               'vars': {'R_1_0': 1.24584819, 'D_3_1_0_2': 360, 'R_2|3_0|1': 1.0292894916884854,
                        'A_2|3_0|1_1|0': 115.61126115172507}, 'map': {0: 0, 1: 1, 2: 2, 3: 3}}
        self.assertFalse(converter.compare_zmats(z_1, z_2))
        self.assertTrue(converter.compare_zmats(z_2, z_2))
        self.assertTrue(converter.compare_zmats(z_2, z_3))

    def test_compare_confs(self):
        """Test determining whether two conformers have almost equal atom distances (dmats)"""
        ch4_1 = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                 'isotopes': (12, 1, 1, 1, 1),
                 'coords': ((0.0, 0.0, 0.0),
                            (0.6300326, 0.6300326, 0.6300326),
                            (-0.6300326, -0.6300326, 0.6300326),
                            (-0.6300326, 0.6300326, -0.6300326),
                            (0.6300326, -0.6300326, -0.6300326))}
        self.assertTrue(converter.compare_confs(ch4_1, ch4_1))
        self.assertEqual(converter.compare_confs(ch4_1, ch4_1, rmsd_score=True), 0.0)

        ch4_2 = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                 'isotopes': (12, 1, 1, 1, 1),
                 'coords': ((0.0, 0.0, 0.0),
                            (0.630032999999999999, 0.6300326, 0.6300326),
                            (-0.6300326, -0.6300326, 0.6300326),
                            (-0.6300326, 0.6300326, -0.6300326),
                            (0.6300326, -0.6300326, -0.6300326))}
        self.assertTrue(converter.compare_confs(ch4_1, ch4_2))
        self.assertAlmostEqual(converter.compare_confs(ch4_1, ch4_2, rmsd_score=True), 0.0, places=4)

        ch4_3 = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                 'isotopes': (12, 1, 1, 1, 1),
                 'coords': ((0.0, 0.0, 0.0),
                            (0.6309, 0.6300326, 0.6300326),
                            (-0.6300326, -0.6300326, 0.6300326),
                            (-0.6300326, 0.6300326, -0.6300326),
                            (0.6300326, -0.6300326, -0.6300326))}
        self.assertFalse(converter.compare_confs(ch4_1, ch4_3))
        self.assertAlmostEqual(converter.compare_confs(ch4_1, ch4_3, rmsd_score=True), 0.00044803, 5)

        occco_1 = {'symbols': ('O', 'C', 'C', 'C', 'O', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                   'isotopes': (16, 12, 12, 12, 16, 1, 1, 1, 1, 1, 1, 1, 1),
                   'coords': ((-1.645138856907744, 0.4855258453193825, -1.269098295435587),
                              (-1.826155038047953, 0.3950495294463964, 0.14042133077839267),
                              (-1.809422000751755, 1.7890058616007063, 0.7598491740499427),
                              (-0.5144047765537177, 2.5412406931938802, 0.46679697338621373),
                              (-0.4166415293412751, 2.87702090326361, -0.9112962716273996),
                              (-1.7523716337780308, -0.4153106947877299, -1.6252584016046343),
                              (-2.785951955397608, -0.09251469392615361, 0.33828359656775064),
                              (-1.0240452528998532, -0.22437445960667116, 0.5540970106165476),
                              (-2.6481280678220354, 2.3642983699082096, 0.34958017984053996),
                              (-1.948589699885299, 1.7026595551213293, 1.842711580226941),
                              (0.3611954633790452, 1.9455154222553817, 0.7436960027091665),
                              (-0.4846097814890448, 3.4746190180148613, 1.0370826136306412),
                              (-0.7517118479102434, 2.0995465744609016, -1.4084474547843668))}
        self.assertTrue(converter.compare_confs(occco_1, occco_1))
        self.assertEqual(converter.compare_confs(occco_1, occco_1, rmsd_score=True), 0.0)

        occco_2 = {'symbols': ('O', 'C', 'C', 'C', 'O', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                   'isotopes': (16, 12, 12, 12, 16, 1, 1, 1, 1, 1, 1, 1, 1),
                   'coords': ((-1.7947360038254172, -0.2800502342395655, -0.94718691702442),
                              (-1.3484923712374388, 0.3115024061252556, 0.26578718691263836),
                              (0.048477626636679344, -0.18145884392561823, 0.6324014558703148),
                              (0.06768533157823732, -1.6675011458530478, 0.9732242593946415),
                              (-0.3530408338556874, -2.4414941005488964, -0.14539995931042984),
                              (-1.6993365552401258, -1.24904809118412, -0.8336640895923935),
                              (-1.3364382254722125, 1.3960688766201377, 0.12095890535651209),
                              (-2.0720954664081472, 0.08255875951942339, 1.0547463625584224),
                              (0.7166058894071794, -0.006871191098481536, -0.21939247767770087),
                              (0.42416153066953804, 0.38997256785153595, 1.4878132135000073),
                              (-0.6073710844027356, -1.8828156181698352, 1.8073934203380306),
                              (1.0743805139106757, -1.9882575918786236, 1.2595102280098387),
                              (0.35195568839394714, -2.3791987519096245, -0.81652943836054))}
        self.assertFalse(converter.compare_confs(occco_1, occco_2))
        self.assertAlmostEqual(converter.compare_confs(occco_1, occco_2, rmsd_score=True), 1.00940798, 5)

        occco_3 = {'symbols': ('O', 'C', 'C', 'C', 'O', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                   'isotopes': (16, 12, 12, 12, 16, 1, 1, 1, 1, 1, 1, 1, 1),
                   'coords': ((-2.1449415573976087, 0.22095421320805855, -1.1761667487081628),
                              (-1.8458576972054956, 0.34850267283416353, 0.21018774322610537),
                              (-1.7946333596155588, 1.8224048429109774, 0.6001541290065803),
                              (-0.7643941488427433, 2.603963636650936, -0.21014179435545444),
                              (-1.160550573561837, 2.7172772321690157, -1.5709018700345496),
                              (-2.2541573481252226, -0.7309807530987936, -1.3543442072197793),
                              (-2.624019853257233, -0.1650323593077789, 0.7836186270202112),
                              (-0.885183881101036, -0.13905038811734782, 0.4040751763466029),
                              (-2.7832838991835382, 2.2645645737400506, 0.427600829327477),
                              (-1.562954529947271, 1.9038127448704014, 1.6674459390753227),
                              (0.21794991835079414, 2.1225495495404854, -0.17169963700580776),
                              (-0.6621011473071822, 3.6174144955483376, 0.18956005497753062),
                              (-1.544021016988015, 1.848253867499642, -1.8191893347265315))}
        self.assertTrue(converter.compare_confs(occco_1, occco_3))
        self.assertAlmostEqual(converter.compare_confs(occco_1, occco_3, rmsd_score=True), 0.0, places=4)

        occco_4 = {'symbols': ('O', 'C', 'C', 'C', 'O', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                   'isotopes': (16, 12, 12, 12, 16, 1, 1, 1, 1, 1, 1, 1, 1),
                   'coords': ((-2.149273800177333, 0.3878561319363274, -1.067994536622897),
                              (-1.8905197406541119, 0.16731522843849514, 0.3147948930907352),
                              (-2.2871289950009728, 1.398560959638718, 1.1233863494505283),
                              (-1.5514369216953363, 2.6559008371480006, 0.6687883285931627),
                              (-1.97578532983754, 3.0584350426221696, -0.6271056229665328),
                              (-1.9649535743321451, -0.45216201833697967, -1.5265252922322194),
                              (-2.469954748031858, -0.7010050003658949, 0.6439649209501082),
                              (-0.8252433635746496, -0.052453567250684806, 0.43760424203717113),
                              (-3.36502756891988, 1.5624906595612045, 1.0051865026931144),
                              (-2.0814509723064316, 1.2139856682154606, 2.18312358675434),
                              (-0.4688204416342118, 2.495542838358611, 0.6472342384223745),
                              (-1.759053255113454, 3.4819317812208626, 1.3557210162758644),
                              (-2.0785703072969466, 2.2346795710060765, -1.151280970188824))}
        self.assertTrue(converter.compare_confs(occco_1, occco_4))
        self.assertAlmostEqual(converter.compare_confs(occco_1, occco_4, rmsd_score=True), 0.0, places=4)

        occco_5 = {'symbols': ('O', 'C', 'C', 'C', 'O', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                   'isotopes': (16, 12, 12, 12, 16, 1, 1, 1, 1, 1, 1, 1, 1),
                   'coords': (
                       (-2.4583263702786398, 0.0718285271168676, -1.073208642860504),
                       (-1.937015981064579, 0.0890930305098165, 0.25179580507902494),
                       (-2.348398726927575, 1.376978495961958, 0.9583384372437844),
                       (-1.8770165015484177, 2.6245423907540975, 0.21659228399276115),
                       (-2.569162634647042, 2.781228761671768, -1.015409941988472),
                       (-2.2457141392131477, -0.8022675472463131, -1.4481857725877),
                       (-2.3295554159352525, -0.7779156570908263, 0.792431073403323),
                       (-0.8469088168553344, 0.006439213644634347, 0.19675913068823528),
                       (-3.4425715658912557, 1.4040720104173179, 1.0273387203822888),
                       (-1.939605978646692, 1.375711847707625, 1.9743606178959265),
                       (-0.8029097001610058, 2.5806396078360736, 0.010183430117069694),
                       (-2.07095189274604, 3.516416462694289, 0.8201309204066712),
                       (-2.650256378769789, 1.8823222470150054, -1.4017891959903757))}
        self.assertTrue(converter.compare_confs(occco_1, occco_5))
        self.assertAlmostEqual(converter.compare_confs(occco_1, occco_5, rmsd_score=True), 0.0, places=4)

    def test_check_isomorphism(self):
        """Test checking for molecule isomorphism"""
        mol1 = Molecule(smiles='[O-][N+]#N')
        mol2 = Molecule(smiles='[N-]=[N+]=O')
        self.assertTrue(converter.check_isomorphism(mol1, mol2))

    def test_cluster_confs_by_rmsd(self):
        nco_1 = {'symbols': ('C', 'H', 'H', 'O', 'H', 'N', 'H', 'H'),
                 'isotopes': (12, 1, 1, 16, 1, 14, 1, 1),
                 'coords': ((-3.59616665, 3.56051739, 1.66762912),
                            (-3.12243719, 4.49463523, 1.44875867),
                            (-4.24266183, 3.67770871, 2.51214684),
                            (-2.59966081, 2.57831173, 1.96283775),
                            (-3.00851627, 1.82896095, 2.40205367),
                            (-4.38319614, 3.12587525, 0.50462835),
                            (-5.34431488, 3.03821019, 0.76647869),
                            (-4.29744813, 3.80180325, -0.22733382))}

        # translation of nco_1
        nco_2 = {'symbols': ('C', 'H', 'H', 'O', 'H', 'N', 'H', 'H'),
                 'isotopes': (12, 1, 1, 16, 1, 14, 1, 1),
                 'coords': ((-3.55754715, 2.23398849, 1.33151513),
                            (-2.7610548, 2.7943938, 1.77473724),
                            (-4.16118773, 1.80160519, 2.10194536),
                            (-3.01210166, 1.19527628, 0.51391734),
                            (-3.69250942, 0.54458444, 0.32617974),
                            (-4.38319614, 3.12587525, 0.50462835),
                            (-5.32180727, 3.12620383, 0.84960522),
                            (-4.01329851, 4.05411698, 0.54390982))}

        # another translation of nco_1
        nco_3 = {'symbols': ('C', 'H', 'H', 'O', 'H', 'N', 'H', 'H'),
                 'isotopes': (12, 1, 1, 16, 1, 14, 1, 1),
                 'coords': ((-5.45323491, 3.44805617, 1.84781649),
                            (-4.89223537, 2.53778082, 1.80808843),
                            (-5.4721348, 3.81174765, 2.85393343),
                            (-6.79050042, 3.20357545, 1.40413854),
                            (-7.35590266, 3.93067122, 1.67478971),
                            (-4.8233168, 4.45029026, 0.97624893),
                            (-4.5553715, 5.24474862, 1.52126381),
                            (-4.01329851, 4.05411698, 0.54390982))}

        # rotation of 0.01 deg from nco_1
        nco_4 = {'symbols': ('C', 'H', 'H', 'O', 'H', 'N', 'H', 'H'),
                 'isotopes': (12, 1, 1, 16, 1, 14, 1, 1),
                 'coords': ((-5.45323491, 3.44805617, 1.84781649),
                            (-4.89221234, 2.53779365, 1.80811982),
                            (-5.47217144, 3.81176471, 2.85392657),
                            (-6.79048224, 3.20353551, 1.40410575),
                            (-7.35590949, 3.93062237, 1.6747286),
                            (-4.8233168, 4.45029026, 0.97624893),
                            (-4.55533726, 5.24473268, 1.52127022),
                            (-4.01332003, 4.05410499, 0.54388049))}

        # rotation of 1 deg from nco_1
        nco_5 = {'symbols': ('C', 'H', 'H', 'O', 'H', 'N', 'H', 'H'),
                 'isotopes': (12, 1, 1, 16, 1, 14, 1, 1),
                 'coords': ((-5.45323491, 3.44805617, 1.84781649),
                            (-4.88729365, 2.54057333, 1.81487118),
                            (-5.48004439, 3.81540593, 2.85242358),
                            (-6.78653401, 3.1949543, 1.39709159),
                            (-7.35731028, 3.92010236, 1.66161901),
                            (-4.8233168, 4.45029026, 0.97624893),
                            (-4.54798889, 5.24128648, 1.52261833),
                            (-4.01796774, 4.05155464, 0.53758868))}

        # rotation of 8 deg from nco_1
        nco_6 = {'symbols': ('C', 'H', 'H', 'O', 'H', 'N', 'H', 'H'),
                 'isotopes': (12, 1, 1, 16, 1, 14, 1, 1),
                 'coords': ((-5.45323491, 3.44805617, 1.84781649),
                            (-4.85441593, 2.56143528, 1.86262288),
                            (-5.53539016, 3.83957757, 2.84021837),
                            (-6.75650663, 3.13476922, 1.34958552),
                            (-7.3634016, 3.84494333, 1.57078959),
                            (-4.8233168, 4.45029026, 0.97624893),
                            (-4.49686401, 5.2159761, 1.53046347),
                            (-4.05189413, 4.03504741, 0.49408666))}

        # very different conformer
        nco_7 = {'symbols': ('C', 'H', 'H', 'O', 'H', 'N', 'H', 'H'),
                 'isotopes': (12, 1, 1, 16, 1, 14, 1, 1),
                 'coords': ((-5.45323491, 3.44805617, 1.84781649),
                            (-4.73789674, 2.77478016, 1.42368122),
                            (-5.44599565, 3.3513005, 2.91340831),
                            (-6.75650663, 3.13476922, 1.34958552),
                            (-7.22860243, 3.94740437, 1.15375478),
                            (-5.1062077, 4.82800097, 1.47873049),
                            (-4.81594257, 5.32827901, 2.29449273),
                            (-4.36133227, 4.8173364, 0.81161216))}

        # another very different conformer
        nco_8 = {'symbols': ('C', 'H', 'H', 'O', 'H', 'N', 'H', 'H'),
                 'isotopes': (12, 1, 1, 16, 1, 14, 1, 1),
                 'coords': ((-5.45323491, 3.44805617, 1.84781649),
                            (-4.85682312, 3.32188069, 2.72717576),
                            (-6.21615067, 4.17444368, 2.03548831),
                            (-6.05851635, 2.20023316, 1.49928799),
                            (-7.00518267, 2.24987143, 1.65080995),
                            (-4.60227374, 3.9061932, 0.74017234),
                            (-3.69226847, 4.12970364, 1.0893621),
                            (-4.52773502, 3.18138419, 0.05526659))}

        # tiny change from nco_8
        nco_9 = {'symbols': ('C', 'H', 'H', 'O', 'H', 'N', 'H', 'H'),
                 'isotopes': (12, 1, 1, 16, 1, 14, 1, 1),
                 'coords': ((-5.45323492, 3.44805618, 1.84781649),
                            (-4.85682312, 3.32188069, 2.72717576),
                            (-6.21615067, 4.17444368, 2.03548831),
                            (-6.05851635, 2.20023316, 1.49928799),
                            (-7.00518267, 2.24987143, 1.65080995),
                            (-4.60227374, 3.9061932, 0.74017234),
                            (-3.69226847, 4.12970364, 1.0893621),
                            (-4.52773502, 3.18138419, 0.05526659))}

        xyzs1 = [nco_1, nco_2, nco_3, nco_4, nco_5]
        self.assertEqual(len(converter.cluster_confs_by_rmsd(xyzs1)), 1)

        xyzs2 = [nco_1, nco_2, nco_3, nco_4, nco_5, nco_6]
        self.assertEqual(len(converter.cluster_confs_by_rmsd(xyzs2)), 2)

        xyzs3 = [nco_1, nco_2, nco_6, nco_7, nco_8, nco_9]
        self.assertEqual(len(converter.cluster_confs_by_rmsd(xyzs3)), 4)

    @classmethod
    def tearDownClass(cls):
        """
        A function that is run ONCE after all unit tests in this class.
        """
        file_paths = [os.path.join(ARC_PATH, 'nul'), os.path.join(ARC_PATH, 'run.out'),
                      os.path.join(ARC_PATH, 'arc', 'species', 'nul'), os.path.join(ARC_PATH, 'arc', 'species', 'run.out')]
        for file_path in file_paths:
            if os.path.isfile(file_path):
                os.remove(file_path)


if __name__ == '__main__':
    unittest.main(testRunner=unittest.TextTestRunner(verbosity=2))
