#!/usr/bin/env python3
# encoding: utf-8

"""
This module contains unit tests of the arc.job.adapters.ts.heuristics module
"""

import copy
import itertools
import os
import unittest
import shutil
from arc.common import ARC_PATH, almost_equal_coords
from arc.family import get_reaction_family_products
from arc.job.adapters.ts.heuristics import (HeuristicsAdapter,
                                            are_h_abs_wells_reversed,
                                            combine_coordinates_with_redundant_atoms,
                                            determine_glue_params,
                                            find_distant_neighbor,
                                            generate_the_two_constrained_zmats,
                                            get_modified_params_from_zmat_2,
                                            get_new_map_based_on_zmat_1,
                                            get_new_zmat_2_map,
                                            stretch_zmat_bond,
                                            is_water,
                                            process_hydrolysis_reaction,
                                            get_neighbors_by_electronegativity,
                                            get_matching_dihedrals,
                                            find_matching_dihedral,
                                            count_all_possible_dihedrals,
                                            hydrolysis
                                            )
from arc.reaction import ARCReaction
from arc.species.converter import str_to_xyz, zmat_to_xyz, xyz_to_str,zmat_from_xyz
from arc.species.species import ARCSpecies
from arc.species.zmat import _compare_zmats
from arc.species.vectors import calculate_param

FAMILY_SETS = {'set_1': ['ester_hydrolysis', 'imine_hydrolysis','ether_hydrolysis'],
               'set_2': ['nitrile_hydrolysis']} #sub-groups of hydrolysis reaction families


class TestHeuristicsAdapter(unittest.TestCase):
    """
    Contains unit tests for the HeuristicsAdapter class.
    """

    @classmethod
    def setUpClass(cls):
        """
        A method that is run before all unit tests in this class.
        """
        cls.maxDiff = None
        cls.ccooh_xyz = {'symbols': ('C', 'C', 'O', 'O', 'H', 'H', 'H', 'H', 'H', 'H'),
                         'isotopes': (12, 12, 16, 16, 1, 1, 1, 1, 1, 1),
                         'coords': ((-1.34047, -0.03188, 0.16703), (0.07658, -0.19298, -0.34334),
                                    (0.27374, 0.70670, -1.43275), (1.64704, 0.49781, -1.86879),
                                    (-2.06314, -0.24194, -0.62839), (-1.53242, -0.70687, 1.00574),
                                    (-1.51781, 0.99794, 0.49424), (0.24018, -1.21958, -0.68782),
                                    (0.79344, 0.03863, 0.45152), (1.95991, 1.39912, -1.67215))}
        cls.ccooj_xyz = {'symbols': ('C', 'C', 'O', 'O', 'H', 'H', 'H', 'H', 'H'),
                         'isotopes': (12, 12, 16, 16, 1, 1, 1, 1, 1),
                         'coords': ((-1.10653, -0.06552, 0.042602), (0.385508, 0.205048, 0.049674),
                                    (0.759622, 1.114927, -1.032928), (0.675395, 0.525342, -2.208593),
                                    (-1.671503, 0.860958, 0.166273), (-1.396764, -0.534277, -0.898851),
                                    (-1.36544, -0.740942, 0.862152), (0.97386, -0.704577, -0.082293),
                                    (0.712813, 0.732272, 0.947293))}
        cls.c2h6_xyz = {'symbols': ('C', 'C', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 12, 1, 1, 1, 1, 1, 1),
                        'coords': ((0.75560, 0.02482, 0.00505), (-0.75560, -0.02482, -0.00505),
                                   (1.17380, -0.93109, -0.32410), (1.11891, 0.80903, -0.66579),
                                   (1.12656, 0.23440, 1.01276), (-1.17380, 0.93109, 0.32410),
                                   (-1.11891, -0.809039, 0.66579), (-1.12656, -0.23440, -1.01276))}
        cls.c2h5_xyz = """C      -0.62870399    0.02330636   -0.00849448
                          C       0.85160870   -0.05497517    0.04976674
                          H      -1.06100002   -0.98045393   -0.04651515
                          H      -0.94436731    0.57609393   -0.89725353
                          H      -1.01744999    0.53143528    0.87837737
                          H       1.37701694   -0.84406878   -0.47511337
                          H       1.42289567    0.74866241    0.49923247"""
        cls.oh_xyz = """O 0.0000000 0.0000000 0.1078170
                        H 0.0000000 0.0000000 -0.8625320"""
        cls.h2_xyz = {'coords': ((0, 0, 0.3736550), (0, 0, -0.3736550)),
                      'isotopes': (1, 1), 'symbols': ('H', 'H')}
        cls.h2_mol = ARCSpecies(label='H2', smiles='[H][H]', xyz=cls.h2_xyz).mol
        cls.ch3_xyz = """C       0.00000000    0.00000001   -0.00000000
                         H       1.06690511   -0.17519582    0.05416493
                         H      -0.68531716   -0.83753536   -0.02808565
                         H      -0.38158795    1.01273118   -0.02607927"""
        cls.ch4_xyz = {'symbols': ('C', 'H', 'H', 'H', 'H'), 'isotopes': (12, 1, 1, 1, 1),
                       'coords': ((-5.45906343962835e-10, 4.233517924761169e-10, 2.9505240956083194e-10),
                                  (-0.6505520089868748, -0.7742801979689132, -0.4125187934483119),
                                  (-0.34927557824779626, 0.9815958255612931, -0.3276823191685369),
                                  (-0.022337921721882443, -0.04887374527620588, 1.0908766524267022),
                                  (1.0221655095024578, -0.15844188273952128, -0.350675540104908))}
        cls.ch4_mol = ARCSpecies(label='CH4', smiles='C', xyz=cls.ch4_xyz).mol
        cls.n2h4_xyz = str_to_xyz("""N      -0.67026921   -0.02117571   -0.25636419
                          N       0.64966276    0.05515705    0.30069593
                          H      -1.27787600    0.74907557    0.03694453
                          H      -1.14684483   -0.88535632    0.02014513
                          H       0.65472168    0.28979031    1.29740292
                          H       1.21533718    0.77074524   -0.16656810""")
        cls.n2h4_mol = ARCSpecies(label='N2H4', smiles='NN', xyz=cls.n2h4_xyz).mol
        cls.nh3_xyz = str_to_xyz("""N       0.00064924   -0.00099698    0.29559292
                         H      -0.41786606    0.84210396   -0.09477452
                         H      -0.52039228   -0.78225292   -0.10002797
                         H       0.93760911   -0.05885406   -0.10079043""")
        cls.nh3_mol = ARCSpecies(label='NH3', smiles='N', xyz=cls.nh3_xyz).mol
        cls.nh2_xyz = str_to_xyz("""N       0.00022972    0.40059496    0.00000000
                                    H      -0.83174214   -0.19982058    0.00000000
                                    H       0.83151242   -0.20077438    0.00000000""")
        cls.h2o_xyz = str_to_xyz("""O      -0.00032832    0.39781490    0.00000000
                                    H      -0.76330345   -0.19953755    0.00000000
                                    H       0.76363177   -0.19827735    0.00000000""")
        cls.ch3ch2oh = ARCSpecies(label='CH3CH2OH', smiles='CCO', xyz="""C      -0.97459464    0.29181710    0.10303882
                                                                         C       0.39565894   -0.35143697    0.10221676
                                                                         O       0.30253309   -1.63748710   -0.49196889
                                                                         H      -1.68942501   -0.32359616    0.65926091
                                                                         H      -0.93861751    1.28685508    0.55523033
                                                                         H      -1.35943743    0.38135479   -0.91822428
                                                                         H       0.76858330   -0.46187184    1.12485643
                                                                         H       1.10301149    0.25256708   -0.47388355
                                                                         H       1.19485981   -2.02360458   -0.47786539""")
        cls.ch3ooh = ARCSpecies(label='CH3OOH', smiles='COO', xyz="""C      -0.76039072    0.01483858   -0.00903344
                                                                     O       0.44475333    0.76952102    0.02291303
                                                                     O       0.16024511    1.92327904    0.86381800
                                                                     H      -1.56632337    0.61401630   -0.44251282
                                                                     H      -1.02943316   -0.30449156    1.00193709
                                                                     H      -0.60052507   -0.86954495   -0.63086438
                                                                     H       0.30391344    2.59629139    0.17435159""")

        cls.water = ARCSpecies(label='H2O', smiles='O', xyz="""O      -0.00032700    0.39565700    0.00000000
        H      -0.75690800   -0.19845300    0.00000000
        H       0.75723500   -0.19720400    0.00000000""")

        cls.methylformate=ARCSpecies(label='ester', smiles='COC=O', xyz="""C      -1.01765390   -0.08355112    0.05206009
O       0.22303684   -0.79051481    0.05294172
C       0.35773087   -1.66017412   -0.97863090
O      -0.45608483   -1.87500387   -1.86208833
H      -1.82486467   -0.81522856    0.14629516
H      -1.06962462    0.60119223    0.90442455
H      -1.14968688    0.45844916   -0.88969505
H       1.33643417   -2.15859899   -0.90083808""")

        cls.ethyl_ethanoate = ARCSpecies(label='ester', smiles='CC(=O)OCC', xyz="""C       2.44505336    0.33426556   -0.05839486
        C       1.22268719   -0.52813666    0.01896600
        O       1.23293886   -1.74943142   -0.03929182
        O       0.11391589    0.24824549    0.16222715
        C      -1.11109125   -0.48993657    0.24566449
        C      -2.25017001    0.49859954    0.40179846
        H       2.37692031    0.99705687   -0.92466676
        H       3.32902965   -0.29956749   -0.17330464
        H       2.54916374    0.91324784    0.86263828
        H      -1.08105124   -1.15952384    1.11255293
        H      -1.25277743   -1.07595826   -0.66934869
        H      -2.28059310    1.18899674   -0.44763085
        H      -3.21043340   -0.02017141    0.47000585
        H      -2.11200849    1.10694712    1.30175876""")

        cls.acetic_acid = ARCSpecies(label='acid', smiles='CC(=O)O', xyz="""C      -0.92388497    0.26665029   -0.14915313
        C       0.41299734   -0.37841629    0.00959894
        O       0.62774816   -1.53407965    0.33161574
        O       1.42589890    0.46969647   -0.24689306
        H      -1.01860792    1.10010001    0.55120865
        H      -1.04837584    0.61282781   -1.17812429
        H      -1.70667782   -0.46488649    0.07043813
        H       2.23089150   -0.07206674   -0.10807745""")

        cls.ethanol = ARCSpecies(label='alcohol', smiles='OCC', xyz="""O       1.19051468    0.74721872    0.55745278
        C       0.42396685   -0.33421819    0.04897215
        C      -0.98542075    0.14578863   -0.22414249
        H       2.08706846    0.40878057    0.72232827
        H       0.41841326   -1.14061638    0.78839856
        H       0.89171403   -0.69551584   -0.87175392
        H      -0.97955985    0.96896352   -0.94625607
        H      -1.44657152    0.52976777    0.69182626
        H      -1.60463449   -0.66494303   -0.61804700""")

        cls.carbonyl_chloride = ARCSpecies(label='carbonyl_chloride', smiles='C(=O)Cl', xyz="""C      -0.13997478   -0.00390480    0.00181459
        O      -0.92417109   -0.94772461    0.00285300
        Cl     1.58884844   -0.07729945   -0.02180153
        H      -0.52470257    1.02892886    0.01713394""")

        cls.formicacid=ARCSpecies(label='formicacid', smiles='C(=O)O', xyz="""C      -0.39120646    0.07781977    0.13864035
        O      -0.92483455   -0.71970938   -0.60912134
        O       0.93691157    0.26838190    0.13942568
        H      -0.89084150    0.72004713    0.87848577
        H       1.26997096   -0.34653955   -0.54743033""")

        cls.hydrochloric_acid=ARCSpecies(label='acid', smiles='Cl', xyz="""Cl      0.00000000    0.00000000    0.63500000
        H       0.00000000    0.00000000   -0.63500000""")
        
        cls.ethanimine = ARCSpecies(label='imine', smiles='CC(=N)', xyz="""C       0.96167873    0.13821742   -0.08370350
        C      -0.47767687   -0.25465987    0.00603687
        N      -0.88812856   -1.10552567    0.88392498
        H       1.33312319   -0.10505535   -1.08240415
        H       1.08881490    1.20673450    0.10589747
        H       1.53159441   -0.43624532    0.65096940
        H      -1.17887955    0.21009465   -0.70716346
        H      -1.90080634   -1.24572729    0.78993188""")

        cls.aminoethanol = ARCSpecies(label='aminoalcohol', smiles='CC(O)N', xyz="""C      -1.18194252   -0.29433274    0.24811386
        C       0.10600045    0.17483884   -0.40755404
        O       0.10237731   -0.18757461   -1.76268103
        N       0.21232442    1.61118860   -0.37026884
        H      -1.27246319   -1.38324226    0.16773155
        H      -2.06133306    0.12757221   -0.25238032
        H      -1.21677694   -0.02074388    1.30751063
        H       0.96765812   -0.29182844    0.07988614
        H      -0.42664848    0.51258748   -2.18251464
        H       0.25488398    1.91584699    0.60091587
        H       1.11149909    1.86318504   -0.77930286""")

        cls.ethyl_methylether = ARCSpecies(label='ether', smiles='CCOC', xyz="""C      -1.79090496    0.16195344    0.54586762
        C      -0.29750770    0.40075866    0.64716134
        O       0.37622588   -0.66484334   -0.01806424
        C       1.78768038   -0.50729501    0.03637639
        H      -2.05996050   -0.79657732    1.00186393
        H      -2.10367702    0.11491160   -0.50249559
        H      -2.34837353    0.95933379    1.04519886
        H       0.00442248    0.42939362    1.69991935
        H      -0.03994121    1.35437631    0.17328998
        H       2.13363258   -0.50935390    1.07451700
        H       2.24870467   -1.34913122   -0.48708664
        H       2.08904465    0.42028683   -0.45980377""")

        cls.methanol = ARCSpecies(label='methanol', smiles='CO', xyz="""C      -0.36862686   -0.00871354    0.04292587
        O       0.98182901   -0.04902010    0.46594709
        H      -0.57257378    0.95163086   -0.43693396
        H      -0.55632373   -0.82564527   -0.65815446
        H      -1.01755588   -0.12311763    0.91437513
        H       1.10435907    0.67758465    1.10037299""")

        cls.propionitrile = ARCSpecies(label='nitrile', smiles='CC#N', xyz="""C      -0.48629842    0.00448354    0.00136213
        C       0.97554967   -0.00899430   -0.00273253
        N       2.13574353   -0.01969098   -0.00598223
        H      -0.88318669   -0.63966273   -0.78887729
        H      -0.87565097   -0.35336611    0.95910491
        H      -0.86615712    1.01723058   -0.16287498""")

        cls.imidic_acid = ARCSpecies(label='acid', smiles='CC(O)=N', xyz="""C      -0.95184918   -0.34383640    0.27749809
        C       0.40787045    0.04165652   -0.17951964
        O       0.49758652    1.21928238   -0.79192045
        N       1.48315686   -0.64715910   -0.06425624
        H      -1.56199325   -0.61442732   -0.58808675
        H      -0.89746501   -1.19773120    0.95792817
        H      -1.41661007    0.49427007    0.80380287
        H       1.43056708    1.33384843   -1.04192555
        H       1.28070929   -1.53312020    0.41216154""")

        cls.ethylbenzoate=ARCSpecies(label='ester', smiles='CC(=O)OC1=CC=CC=C1', xyz="""C       3.37907000   -0.64682800    0.46486200
C       2.10276700   -0.48583200   -0.31979100
O       1.32021400   -1.35537900   -0.58064400
O       1.96230700    0.82574700   -0.69365400
C       0.85177700    1.27552400   -1.41215200
C       0.34940000    2.51436000   -1.02557500
C      -0.70995700    3.07608500   -1.73199000
C      -1.26438100    2.39998000   -2.81691500
C      -0.74896000    1.16168200   -3.19310400
C       0.31367000    0.58856400   -2.49719000
H       4.22671300   -0.28777200   -0.12245900
H       3.33282100   -0.04338500    1.37430000
H       3.51464500   -1.69524400    0.72093600
H       0.79944800    3.02252900   -0.18155100
H      -1.10082900    4.04160500   -1.43205400
H      -2.09094900    2.83540100   -3.36613000
H      -1.17477500    0.63028500   -4.03657700
H       0.70459500   -0.37643600   -2.78317900""")

        cls.methylbenzoate=ARCSpecies(label='ester', smiles='COC(=O)C1=CC=CC=C1', xyz="""C      -3.41880005   -0.11701464    0.35560956
O      -2.06670991    0.27992330    0.12331993
C      -1.15725122   -0.69816840    0.36279493
O      -1.41157395   -1.83054584    0.74265729
C       0.22388313   -0.20955456    0.09908773
C       1.28924813   -1.09884031    0.29809576
C       2.60328996   -0.68834584    0.06448333
C       2.86058171    0.61150930   -0.36883692
C       1.80689558    1.50278100   -0.56939312
C       0.49062628    1.09583885   -0.33673505
H      -3.56155387   -0.39743029    1.40394476
H      -4.06502026    0.73705335    0.13488725
H      -3.69597377   -0.94170437   -0.30852920
H       1.09888762   -2.11586104    0.63627148
H       3.42476442   -1.38324619    0.22085611
H       3.88414415    0.93054262   -0.55057886
H       2.00992386    2.51614740   -0.90740064
H      -0.31536280    1.80691160   -0.49946270""")

        cls.benzoic_acid=ARCSpecies(label='acid', smiles='OC(=O)C1=CC=CC=C1', xyz="""O       2.78873839   -0.49584415   -0.66585264
C       2.07340309    0.24173543    0.20214535
O       2.61974094    0.97229349    1.00803562
C       0.61042248    0.05340369    0.05112551
C      -0.24209651    0.76977463    0.90093418
C      -1.62619770    0.62212373    0.79271180
C      -2.16255824   -0.24023961   -0.16323204
C      -1.31839444   -0.95621744   -1.01223640
C       0.06685421   -0.81132891   -0.90719899
H       3.71821995   -0.27137604   -0.45091954
H       0.16930250    1.44446501    1.64919361
H      -2.28503514    1.17966447    1.45390609
H      -3.24072296   -0.35464193   -0.24683801
H      -1.73877818   -1.62793091   -1.75672997
H       0.71218397   -1.37579864   -1.57567783""")

        cls.phenol=ARCSpecies(label='alcohol', smiles='OC1=CC=CC=C1', xyz="""O       2.36452700   -0.79682200   -0.01546700
C       1.08348000   -0.32003700   -0.00730200
C       0.04868900   -1.25810000    0.00558700
C      -1.27226300   -0.82546300    0.01428700
C      -1.57722100    0.53622300    0.01029400
C      -0.54091400    1.46569900   -0.00256600
C       0.78734400    1.04454700   -0.01138000
H       2.97775700   -0.05483700   -0.02399000
H       0.30002500   -2.31176900    0.00855200
H      -2.07048300   -1.55934600    0.02427800
H      -2.60892800    0.86669600    0.01712500
H      -0.76133400    2.52735700   -0.00582000
H       1.59238000    1.77408300   -0.02140600""")

        cls.ethyleneoxide=ARCSpecies(label='ether', smiles='C1CO1', xyz="""C      -0.73103000   -0.04646300    0.06435400
C       0.72760500    0.10564700    0.01160200
O       0.04187500   -0.72362100   -0.92868600
H      -1.36764100    0.75367000   -0.30587200
H      -1.17678900   -0.68478600    0.82356100
H       1.15756500    1.01700400   -0.39719600
H       1.34841600   -0.42145200    0.73223700""")

        cls.ethyleneglycol=ARCSpecies(label='alcohol', smiles='C(CO)O', xyz="""O      -1.53938900    0.86956400    0.16926200
C      -0.90062800   -0.37363000   -0.14226000
C      -1.78595900   -1.46045700    0.43864000
O      -1.91351700   -1.32061800    1.84404200
H      -0.90863900    1.58212100    0.03809800
H       0.09166600   -0.42853000    0.32293400
H      -0.79439500   -0.50559300   -1.22812100
H      -1.34671000   -2.44297700    0.24952500
H      -2.76759800   -1.42346700   -0.05607100
H      -2.15881000   -0.39901700    1.98917200""")

        cls.dimethoxymethane=ARCSpecies(label='ether', smiles='COCCOC', xyz="""C       2.97058781   -0.21070737   -0.09207851
O       1.61612389   -0.30531019   -0.51325496
C       0.71770473    0.06060475    0.53401367
C      -0.71758641   -0.05709177    0.03392758
O      -1.61601140    0.30874025    1.08121962
C      -2.97047936    0.21401778    0.66008169
H       3.15985016   -0.88941299    0.74516152
H       3.21214164    0.81763976    0.19355007
H       3.61217288   -0.50062986   -0.92848057
H       0.86387097   -0.59504248    1.40088174
H       0.91542802    1.09002507    0.85634557
H      -0.91528083   -1.08649709   -0.28846850
H      -0.86376919    0.59860060   -0.83290320
H      -3.21193982   -0.81434774    0.37443570
H      -3.61206186    0.50385697    1.49651591
H      -3.15982655    0.89272913   -0.17713488""")

        cls.dimethoxyethane=ARCSpecies(label='ether', smiles='COCCO', xyz="""C       2.06422100   -0.24119900   -0.29429000
O       1.07705600   -0.86921100   -1.08805200
C       0.80021600   -0.17861200   -2.29901900
C      -0.16014600   -1.04806700   -3.08935700
O       0.41309700   -2.31095800   -3.38743100
H       1.75052300    0.76578000    0.01487700
H       2.20416500   -0.85608400    0.59524300
H       3.02097800   -0.16078900   -0.82922000
H       1.72920500   -0.03295100   -2.86965500
H       0.35679200    0.80791600   -2.09244700
H      -1.09406500   -1.15888200   -2.51985900
H      -0.39710500   -0.56909300   -4.04239100
H       0.74240600   -2.65205600   -2.54773100""")

        cls.anisole=ARCSpecies(label='ether', smiles='COc1ccccc1', xyz="""C      -2.66128424   -0.19139626    0.38919360
O      -1.55045303   -1.04919549    0.16206193
C      -1.33636219   -2.03866324    1.08201654
C      -0.30930260   -2.98326084    1.04916114
C      -0.20675445   -3.94471546    2.05988838
C      -1.12822951   -3.96623222    3.10555730
C      -2.15481846   -3.02608405    3.14309449
C      -2.25619208   -2.06701749    2.13385902
H      -2.54664371    0.36368058    1.32612957
H      -2.81619834    0.48665013   -0.45659387
H      -3.55392044   -0.81769324    0.48096261
H       0.42731990   -3.00036277    0.25337075
H       0.59495124   -4.67823156    2.02977368
H      -1.04600175   -4.71445745    3.88944474
H      -2.87654841   -3.03708113    3.95524988
H      -3.05877878   -1.33438277    2.16598004""")

        cls.acetamide=ARCSpecies(label='amide', smiles='CC(=O)N', xyz="""C       1.10760981   -0.06195096   -0.07465698
C      -0.28279459   -0.19244661    0.47836893
O      -0.76333777   -1.25950344    0.84075145
N      -0.99437508    0.96533352    0.55638164
H       1.19468276   -0.68174655   -0.97108544
H       1.34171196    0.97277779   -0.33936488
H       1.82419932   -0.40246705    0.67757751
H      -1.93524371    0.91299784    0.92464616
H      -0.63325570    1.86305111    0.26809395""")

        cls.ammonia=ARCSpecies(label='amine', smiles='N', xyz="""N       0.00064924   -0.00099698    0.29559292
H      -0.41786606    0.84210396   -0.09477452
H      -0.52039228   -0.78225292   -0.10002797
H       0.93760911   -0.05885406   -0.10079043""")

        cls.benzamide=ARCSpecies(label='amide', smiles='C1=CC=CC=C1C(=O)N', xyz="""C       0.02406042    1.07877013    0.26424337
C       1.38891822    1.37139283    0.28510228
C       2.32165679    0.35574124    0.08135062
C       1.89229414   -0.95101202   -0.14974810
C       0.52668674   -1.24826306   -0.17038981
C      -0.41489992   -0.23412560    0.04744473
C      -1.88074492   -0.48932167    0.03531130
O      -2.68819802    0.41054791   -0.16101181
N      -2.30823742   -1.76367784    0.28239630
H      -0.69919556    1.87725702    0.41979936
H       1.72181259    2.39197169    0.45694294
H       3.38453807    0.58491031    0.09426306
H       2.62280279   -1.73763731   -0.32294062
H       0.22046525   -2.26713606   -0.38344205
H      -1.70408144   -2.52799066    0.54098462
H      -3.30777598   -1.92019120    0.27981193""")

        cls.benzamide2=ARCSpecies(label='amide', smiles='C1=CC=CC=C1NC(=O)', xyz="""C      -0.12060699    1.01519485   -0.28719517
C      -1.50234966    1.20750051   -0.35895427
C      -2.36679655    0.15118365   -0.08554504
C      -1.84890631   -1.09530480    0.25905370
C      -0.46541913   -1.28949080    0.33134615
C       0.40860247   -0.23408823    0.05832149
N       1.80734319   -0.34759137    0.10900522
C       2.55156331   -1.44749614    0.41718384
O       3.77720578   -1.43066342    0.43013670
H       0.53409987    1.85535331   -0.50512349
H      -1.90218824    2.18183345   -0.62824288
H      -3.44245178    0.29833588   -0.14071715
H      -2.52331699   -1.92112940    0.47282218
H      -0.11112933   -2.27743671    0.60366584
H       2.36430973    0.47094484   -0.10447237
H       1.98382533   -2.35645153    0.65496809""")

        cls.aminobenzene=ARCSpecies(label='amine', smiles='C1=CC=CC=C1N', xyz="""C       0.43543098    1.05933654   -0.41701803
C      -0.92760789    1.36623945   -0.38136031
C      -1.84603367    0.41069465    0.04655024
C      -1.40033251   -0.85091940    0.43302108
C      -0.03614142   -1.15241824    0.39537837
C       0.89589277   -0.19692095   -0.01607904
N       2.24152665   -0.50855524   -0.08340428
H       1.13693522    1.81389727   -0.76163963
H      -1.26958296    2.34979941   -0.69152058
H      -2.90629113    0.64668067    0.07357528
H      -2.11244555   -1.60336949    0.76051217
H       0.29300639   -2.14427260    0.69222991
H       2.56852392   -1.41934337    0.20651122
H       2.92437678    0.21641980   -0.25263787""")
        
        cls.benzoyl=ARCSpecies(label='benzoyl', smiles='C1=CC=CC=C1C(=O)O', xyz="""C      -0.18985385    1.27034645   -0.23363322
C      -1.57890492    1.17186499   -0.13319938
C      -2.18068609   -0.07844120    0.00742639
C      -1.39707546   -1.23185055    0.04799168
C      -0.00710015   -1.13763032   -0.05216040
C       0.60204045    0.11559795   -0.19351299
C       2.07279801    0.26826941   -0.30374600
O       2.67411260    1.31925133   -0.42831386
O       2.72649982   -0.90613791   -0.25283572
H       0.27276852    2.24928995   -0.34316862
H      -2.19058154    2.07017174   -0.16469933
H      -3.26265825   -0.15423252    0.08558343
H      -1.86840430   -2.20550765    0.15768451
H       0.59058844   -2.04515889   -0.01898448
H       3.66918927   -0.65134306   -0.33610950""")

        cls.carboxyl=ARCSpecies(label='carboxyl', smiles='C(=O)O', xyz="""C      -0.39120646    0.07781977    0.13864035
O      -0.92483455   -0.71970938   -0.60912134
O       0.93691157    0.26838190    0.13942568
H      -0.89084150    0.72004713    0.87848577
H       1.26997096   -0.34653955   -0.54743033""")

        cls.chloroacetylchloride=ARCSpecies(label='chloroacetylchloride', smiles='ClCC(=O)Cl', xyz="""Cl     -1.05537547    0.83803686    1.47674727
C      -0.65227190    0.03022539   -0.04857680
C       0.82165795   -0.29480855   -0.07499844
O       1.24198020   -1.41489585    0.20775702
Cl      1.80446090    1.06159367   -0.55562710
H      -0.92910104    0.67496468   -0.88740936
H      -1.23135048   -0.89511563   -0.11789078""")

        cls.chlorocetyl = ARCSpecies(label='chloroacetyl', smiles='ClCC(=O)O', xyz="""Cl      2.16771895    0.85814339   -0.28970888
C       0.81168204   -0.28498973   -0.35051787
C      -0.43241994    0.31523523    0.25190528
O      -0.59155647    1.42100481    0.73975780
O      -1.47262561   -0.54938640    0.21008081
H       1.09772865   -1.17692469    0.21222737
H       0.62796502   -0.53397490   -1.39851932
H      -2.20858169   -0.04898581    0.62446934""")

        cls.cyclohexanone_imine=ARCSpecies(label='imine', smiles='C1CCC(=N)CC1', xyz=""" C       0.41853001    1.47690975   -0.22777201
C      -1.03130604    1.04492564    0.00063900
C      -1.11847430   -0.21457835    0.85508816
C      -0.23615674   -1.28460514    0.25892095
N      -0.66341487   -2.48021719    0.01665599
C       1.20037066   -0.91808321   -0.02039221
C       1.24359846    0.35379631   -0.85907918
H       0.86928024    1.77232518    0.72754826
H       0.43980409    2.35763718   -0.87948515
H      -1.58640545    1.85692900    0.48339000
H      -1.50767973    0.86144153   -0.97066389
H      -0.76631461   -0.01305618    1.87282646
H      -2.15483944   -0.56069080    0.91677293
H      -1.65257466   -2.57685384    0.26979944
H       1.70484245   -0.76299296    0.93972492
H       1.70480568   -1.73781669   -0.54204827
H       2.28226664    0.68135332   -0.97896597
H       0.85366761    0.14357644   -1.86295942""")

        cls.hydroxycyclohexyl_amine=ARCSpecies(label='amine', smiles='C1CCC(N)(O)CC1', xyz="""C      -1.89437830    0.10514192    0.10153175
C      -1.10867385   -0.85012054    0.99478891
C       0.22469340   -1.24903058    0.35839586
C       1.06359939   -0.02386047   -0.02924672
N       2.28637473   -0.44216247   -0.67820789
O       1.47148602    0.65047077    1.13678842
C       0.26425965    0.94143426   -0.91426871
C      -1.06972826    1.33250299   -0.27434934
H      -2.81056676    0.41946753    0.61396765
H      -2.20285325   -0.41990753   -0.81091194
H      -1.70603200   -1.74865829    1.18697659
H      -0.92710058   -0.37629632    1.96721132
H       0.02290272   -1.86559631   -0.52743138
H       0.77098474   -1.87597357    1.07479696
H       2.80101615    0.39735080   -0.94326619
H       2.05748912   -0.90887424   -1.55466555
H       2.22952840    0.12513396    1.44622656
H       0.06659959    0.48258704   -1.89187723
H       0.83857430    1.85917850   -1.09442004
H      -0.88655731    1.93867443    0.62124541
H      -1.63960824    1.95928404   -0.96971272""")

        cls.benzaldimine=ARCSpecies(label='imine', smiles='C1=CC=CC=C1C=N', xyz="""C      -0.07147459    1.15496520    0.07949109
C      -1.46626360    1.17957453    0.11254754
C      -2.18679497   -0.01377567    0.04829630
C      -1.51565311   -1.23382449   -0.04908215
C      -0.12012702   -1.26373427   -0.08251265
C       0.59900716   -0.06706072   -0.01800584
C       2.07076947   -0.11682801   -0.05449148
N       2.73011370   -1.22573852   -0.14411070
H       0.48977375    2.08533222    0.12959424
H      -1.98918799    2.12953257    0.18837670
H      -3.27362789    0.00792954    0.07422480
H      -2.08151572   -2.16080474   -0.09885301
H       0.39124697   -2.21913243   -0.15844867
H       2.61723406    0.84099818   -0.00220333
H       3.73793432   -1.03067031   -0.15364290""")

        cls.aminophenylethanol=ARCSpecies(label='amine', smiles='C1=CC=CC=C1C(O)N', xyz="""C       0.58246856    1.32038819    0.16011576
C       1.94861232    1.18188911    0.41477146
C       2.56094067   -0.06207542    0.27880241
C       1.80913587   -1.16825555   -0.11088821
C       0.44304899   -1.03097384   -0.36528912
C      -0.18949710    0.21631979   -0.24005864
C      -1.67312609    0.38216174   -0.47433629
O      -2.16237211   -0.56988487   -1.38459419
N      -2.42760628    0.19675969    0.74263117
H       0.12134886    2.29943346    0.27219453
H       2.53549328    2.04509434    0.71793876
H       3.62456455   -0.16970518    0.47433219
H       2.28517651   -2.13919891   -0.22027715
H      -0.13096740   -1.90332634   -0.67246331
H      -1.87438783    1.37309677   -0.89583135
H      -3.11070324   -0.59515361   -1.17408111
H      -2.06984042    0.85160599    1.43638896
H      -2.18144810   -0.72475007    1.10370762""")

        cls.benzonitrile=ARCSpecies(label='nitrile', smiles='C1=CC=C(C#N)C=C1', xyz="""C       0.44933638   -1.18139954    0.02252031
C      -0.93469297   -1.27762547   -0.13483923
C      -1.71205235   -0.12103144   -0.19470173
C      -1.10935093    1.13312430   -0.09761792
C       0.27444541    1.23256639    0.05979126
C       1.05790400    0.07478722    0.12030930
C       2.47875083    0.17523225    0.28189386
N       3.62923711    0.25656449    0.41273187
H       1.04673341   -2.09000374    0.06805866
H      -1.40719302   -2.25416616   -0.21079270
H      -2.79007223   -0.19724074   -0.31729871
H      -1.71781462    2.03324759   -0.14459621
H       0.73476899    2.21594485    0.13454125""")

        cls.benzaldehyde_oxime=ARCSpecies(label='imine', smiles='C1=CC=CC=C1C(O)=N', xyz="""C      -0.31219598   -1.01526790    0.69633543
C      -1.70251905   -1.00703559    0.56712518
C      -2.32550720   -0.02542854   -0.20249281
C      -1.56115393    0.94708029   -0.84678325
C      -0.16978606    0.94313424   -0.71933152
C       0.46019683   -0.03726466    0.05711545
C       1.92608655   -0.03728946    0.19981752
O       2.45086376   -1.23008813    0.49187922
N       2.74859768    0.93913452    0.07029180
H       0.16288118   -1.78481525    1.30047552
H      -2.29808210   -1.76737608    1.06633378
H      -3.40815105   -0.02145562   -0.30412749
H      -2.04943911    1.70564725   -1.45389585
H       0.40652707    1.69637627   -1.24838821
H       3.41324825   -1.10046686    0.54564009
H       2.24933924    1.81092586   -0.12485130""")

        cls.isovaleronitrile=ARCSpecies(label='nitrile', smiles='CCC(C)C#N', xyz="""C       1.93951750    0.07022433    0.33939714
C       0.63053935   -0.69014967    0.16122896
C       0.11448765   -1.31319866    1.46849558
C      -1.29665546   -1.86822798    1.26898410
C       1.00706309   -2.39027603    1.93748834
N       1.70888430   -3.23669724    2.30855772
H       2.75253379   -0.59444700    0.64680884
H       1.83497281    0.85918786    1.09099930
H       2.23195551    0.54002434   -0.60520969
H       0.76932895   -1.46448454   -0.60398065
H      -0.11863483    0.01068336   -0.22777138
H       0.06561334   -0.53371354    2.23912546
H      -1.31454449   -2.65390907    0.50479096
H      -1.98660429   -1.07662961    0.95774069
H      -1.68252428   -2.30189576    2.19862717""")

        cls.isovaleraldehyde_oxime=ARCSpecies(label='imine', smiles='CCC(C)C(O)=N', xyz="""C      -1.28158278    1.36490117    1.04973440
C      -0.84328281   -0.07180767    0.79639713
C      -0.06533466   -0.22953022   -0.51698152
C       0.18630592   -1.70245536   -0.83337014
C       1.24865337    0.50018240   -0.46918208
O       1.40314754    1.46432994   -1.37461907
N       2.22615177    0.29971089    0.33774387
H      -1.89803201    1.73784329    0.22563199
H      -1.87492476    1.42046601    1.96800361
H      -0.42155710    2.03133276    1.16654522
H      -0.24171413   -0.41470141    1.64673776
H      -1.73897035   -0.70432932    0.76610235
H      -0.66261233    0.19207252   -1.33577169
H      -0.75961329   -2.23737854   -0.96824262
H       0.76950447   -1.80924756   -1.75465419
H       0.74314650   -2.19831682   -0.03072668
H       2.28611883    1.84491600   -1.22771372
H       1.99595583   -0.46129828    0.98568404""")

        cls.malononitrile=ARCSpecies(label='nitrile', smiles='N#CC(C#N)', xyz="""N      -2.18112669    1.02419451    0.00876053
C      -1.21207265    0.38522802    0.00538987
C      -0.01011698   -0.45119476    0.00133359
C       1.22812060    0.33047430   -0.00750528
N       2.22484025    0.92533224   -0.01452270
H      -0.02012675   -1.10452741    0.88124864
H      -0.02951777   -1.10950691   -0.87470464""")

        cls.iminopropanoic_acid=ARCSpecies(label='imine', smiles='N=C(O)C(C#N)', xyz="""N       1.08761470    1.20942794    0.02869931
C       0.72094617   -0.02042197   -0.00900129
O       1.69914939   -0.91426006   -0.18471210
C      -0.63647764   -0.61808894    0.18150798
C      -1.70229213    0.30165773   -0.20783131
N      -2.54435820    1.04519579   -0.49922098
H       0.29194728    1.84186248    0.18467011
H       2.52767273   -0.40935065   -0.27491806
H      -0.70494480   -1.53618745   -0.41219569
H      -0.73664727   -0.89373946    1.23654320""")

        cls.allylmethylether=ARCSpecies(label='ether', smiles='C=CCOC', xyz="""C       2.24051202    1.04153068    0.19486347
C       1.10659712    0.58234118    0.74083019
C       0.16338489   -0.36827342    0.07674238
O      -0.00738172   -1.48018240    0.95029996
C      -0.89152333   -2.44569234    0.39890889
H       2.55998781    0.74063014   -0.79771591
H       2.88053617    1.72597545    0.74310056
H       0.83267744    0.90476855    1.74255103
H       0.55255009   -0.71024239   -0.88913402
H      -0.80072247    0.12806836   -0.08052245
H      -0.49138857   -2.84032162   -0.54006077
H      -0.98849098   -3.27013487    1.11037749
H      -1.88123946   -2.00923795    0.23313156""")

        cls.allylalcohol=ARCSpecies(label='alcohol', smiles='C=CCO', xyz="""C      -1.52682541   -0.19194750   -0.17281541
C      -0.40630181    0.18362433    0.45744638
C       0.89960438    0.44544042   -0.21619860
O       1.26209057    1.79490593    0.02459363
H      -2.44231366   -0.36966852    0.38380790
H      -1.55956509   -0.33307605   -1.24882770
H      -0.42113902    0.30719547    1.53825844
H       1.67685800   -0.20286001    0.19855306
H       0.85438611    0.28223717   -1.29754528
H       0.50870998    2.34042848   -0.25927076""")

        cls.phenylethanimine=ARCSpecies(label='imine', smiles='c1ccccc1C(=N)C', xyz="""C       0.45780349    1.06857125   -0.19224526
C       1.81425409    1.33449779    0.01894805
C       2.66519037    0.32552995    0.46751606
C       2.16360565   -0.95203351    0.70642685
C       0.80932992   -1.22043991    0.49635350
C      -0.05427922   -0.21287994    0.04552340
C      -1.49752902   -0.53941187   -0.16746471
N      -1.94201576   -1.73606811    0.06159544
C      -2.43653310    0.54060141   -0.65348173
H      -0.17512162    1.87800283   -0.54174004
H       2.20753530    2.33099177   -0.16697472
H       3.71944447    0.53443580    0.63106141
H       2.82337950   -1.74186579    1.05624804
H       0.42917332   -2.22229939    0.68645387
H      -2.94698099   -1.80207650   -0.13009056
H      -2.10721900    0.90816936   -1.62946617
H      -2.46053024    1.36395217    0.06597366
H      -3.45360689    0.15275707   -0.76116277""")

        cls.phenylalaninol=ARCSpecies(label='alcohol', smiles='c1ccccc1C(O)(N)C', xyz="""C       0.58563863    0.41496878   -1.13275203
C       1.69128155   -0.12096927   -1.79882312
C       2.38671445   -1.19260008   -1.24641426
C       1.97684536   -1.72977878   -0.02968445
C       0.87130062   -1.19403540    0.63621331
C       0.15581839   -0.10749793    0.10260655
C      -1.06203971    0.46573330    0.81679963
O      -1.23024462   -0.12326081    2.08690732
N      -2.28055195    0.14704689    0.10022125
C      -0.95779962    1.97845043    1.03171144
H       0.06102500    1.24909164   -1.59280509
H       2.00913269    0.29932800   -2.74954853
H       3.24733237   -1.60912737   -1.76280786
H       2.51652447   -2.56659677    0.40611212
H       0.57193212   -1.63240495    1.58686200
H      -2.18855230   -0.04409271    2.22990607
H      -2.27603678   -0.86243498   -0.04850174
H      -2.22374627    0.55182022   -0.83201966
H      -0.92939620    2.54047355    0.09222318
H      -0.05326147    2.22580131    1.60075386
H      -1.80338391    2.35173651    1.62264865""")

        cls.ethylamine=ARCSpecies(label='amine', smiles='CCN', xyz="""C      -1.14264899   -0.06058026   -0.03332469
C       0.26912880    0.49496284    0.03304382
N       1.21966642   -0.56664747    0.33628965
H      -1.43371056   -0.51780317    0.91844437
H      -1.23525080   -0.81736666   -0.81966584
H      -1.85393441    0.74205986   -0.25306388
H       0.32681273    1.26512119    0.80885729
H       0.53039286    0.96148310   -0.92252276
H       2.16545120   -0.18719811    0.32509986
H       1.18773917   -1.27609387   -0.39480684""")

        cls.zmat_1 = {'symbols': ('C', 'C', 'O', 'O', 'H', 'H', 'H', 'H', 'H', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                 ('R_3_2', 'A_3_2_1', 'D_3_2_1_0'), ('R_4_0', 'A_4_0_1', 'D_4_0_1_3'),
                                 ('R_5_0', 'A_5_0_1', 'D_5_0_1_4'), ('R_6_0', 'A_6_0_1', 'D_6_0_1_5'),
                                 ('R_7_1', 'A_7_1_0', 'D_7_1_0_6'), ('R_8_1', 'A_8_1_0', 'D_8_1_0_7'),
                                 ('R_9_3', 'A_9_3_2', 'D_9_3_2_1')),
                      'vars': {'R_1_0': 1.5147479951212197, 'R_2_1': 1.4265728986680748,
                               'A_2_1_0': 108.63387152978416, 'R_3_2': 1.4559254886404387,
                               'A_3_2_1': 105.58023544826183, 'D_3_2_1_0': 179.9922243050821,
                               'R_4_0': 1.0950205915944824, 'A_4_0_1': 110.62463321031589,
                               'D_4_0_1_3': 59.13545080998071, 'R_5_0': 1.093567969297245,
                               'A_5_0_1': 110.91425998596507, 'D_5_0_1_4': 120.87266977773987,
                               'R_6_0': 1.0950091062890002, 'A_6_0_1': 110.62270362433773,
                               'D_6_0_1_5': 120.87301274044218, 'R_7_1': 1.0951433842986755,
                               'A_7_1_0': 110.20822115119915, 'D_7_1_0_6': 181.16392677464265,
                               'R_8_1': 1.0951410439636102, 'A_8_1_0': 110.20143800025897,
                               'D_8_1_0_7': 239.4199964284852, 'R_9_3': 0.9741224704818748,
                               'A_9_3_2': 96.30065819269021, 'D_9_3_2_1': 242.3527063196313},
                      'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9}}
        cls.zmat_2 = {'symbols': ('H', 'C', 'C', 'H', 'H', 'H', 'H', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                 ('R_3_1', 'A_3_1_2', 'D_3_1_2_0'), ('R_4_1', 'A_4_1_2', 'D_4_1_2_3'),
                                 ('R_5_2', 'A_5_2_1', 'D_5_2_1_4'), ('R_6_2', 'A_6_2_1', 'D_6_2_1_5'),
                                 ('R_7_2', 'A_7_2_1', 'D_7_2_1_6')),
                      'vars': {'R_1_0': 1.0940775789443724, 'R_2_1': 1.5120487296562577,
                               'A_2_1_0': 110.56801921096591, 'R_3_1': 1.0940725668318991,
                               'A_3_1_2': 110.56890700195424, 'D_3_1_2_0': 239.99938309284212,
                               'R_4_1': 1.0940817193677925, 'A_4_1_2': 110.56754686774481,
                               'D_4_1_2_3': 239.9997190582892, 'R_5_2': 1.0940725668318991,
                               'A_5_2_1': 110.56890700195424, 'D_5_2_1_4': 59.99971758419434,
                               'R_6_2': 1.0940840619688397, 'A_6_2_1': 110.56790845138725,
                               'D_6_2_1_5': 239.99905123159166, 'R_7_2': 1.0940817193677925,
                               'A_7_2_1': 110.56754686774481, 'D_7_2_1_6': 240.00122783407815},
                      'map': {0: 3, 1: 0, 2: 1, 3: 2, 4: 4, 5: 5, 6: 6, 7: 7}}
        cls.zmat_3 = {'symbols': ('C', 'C', 'O', 'O', 'H', 'H', 'H', 'H', 'H', 'H', 'X'),
                      'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                 ('R_3_2', 'A_3_2_1', 'D_3_2_1_0'), ('R_4_0', 'A_4_0_1', 'D_4_0_1_3'),
                                 ('R_5_0', 'A_5_0_1', 'D_5_0_1_4'), ('R_6_0', 'A_6_0_1', 'D_6_0_1_5'),
                                 ('R_7_1', 'A_7_1_0', 'D_7_1_0_6'), ('R_8_1', 'A_8_1_0', 'D_8_1_0_7'),
                                 ('R_9_3', 'A_9_3_2', 'D_9_3_2_1'), ('RX_10_9', 'AX_10_9_3', 'DX_10_9_3_2')),
                      'vars': {'R_1_0': 1.5147479951212197, 'R_2_1': 1.4265728986680748, 'A_2_1_0': 108.63387152978416,
                               'R_3_2': 1.4559254886404387, 'A_3_2_1': 105.58023544826183, 'D_3_2_1_0': 179.9922243050821,
                               'R_4_0': 1.0950205915944824, 'A_4_0_1': 110.62463321031589, 'D_4_0_1_3': 59.13545080998071,
                               'R_5_0': 1.093567969297245, 'A_5_0_1': 110.91425998596507, 'D_5_0_1_4': 120.87266977773987,
                               'R_6_0': 1.0950091062890002, 'A_6_0_1': 110.62270362433773, 'D_6_0_1_5': 120.87301274044218,
                               'R_7_1': 1.0951433842986755, 'A_7_1_0': 110.20822115119915, 'D_7_1_0_6': 181.16392677464265,
                               'R_8_1': 1.0951410439636102, 'A_8_1_0': 110.20143800025897, 'D_8_1_0_7': 239.4199964284852,
                               'R_9_3': 1.1689469645782498, 'A_9_3_2': 96.30065819269021, 'D_9_3_2_1': 242.3527063196313,
                               'RX_10_9': 1.0, 'AX_10_9_3': 90.0, 'DX_10_9_3_2': 0},
                      'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 'X10'}}
        cls.zmat_4 = {'symbols': ('H', 'C', 'C', 'H', 'H', 'H', 'H', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                 ('R_3_1', 'A_3_1_2', 'D_3_1_2_0'), ('R_4_1', 'A_4_1_2', 'D_4_1_2_3'),
                                 ('R_5_2', 'A_5_2_1', 'D_5_2_1_4'), ('R_6_2', 'A_6_2_1', 'D_6_2_1_5'),
                                 ('R_7_2', 'A_7_2_1', 'D_7_2_1_6')),
                      'vars': {'R_1_0': 1.3128870801982788, 'R_2_1': 1.5120487296562577, 'A_2_1_0': 110.56890700195424,
                               'R_3_1': 1.0940775789443724, 'A_3_1_2': 110.56801921096591, 'D_3_1_2_0': 120.00061587714492,
                               'R_4_1': 1.0940817193677925, 'A_4_1_2': 110.56754686774481, 'D_4_1_2_3': 119.99910067703652,
                               'R_5_2': 1.0940725668318991, 'A_5_2_1': 110.56890700195424, 'D_5_2_1_4': 59.99971758419434,
                               'R_6_2': 1.0940840619688397, 'A_6_2_1': 110.56790845138725, 'D_6_2_1_5': 239.99905123159166,
                               'R_7_2': 1.0940817193677925, 'A_7_2_1': 110.56754686774481, 'D_7_2_1_6': 240.00122783407815},
                      'map': {0: 2, 1: 0, 2: 1, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7}}
        cls.zmat_5 = {'symbols': ('C', 'C', 'X', 'C', 'C', 'C', 'X', 'C', 'X', 'H', 'H', 'H', 'H', 'H', 'X', 'H', 'X'),
                      'coords': ((None, None, None), ('R_1_0', None, None), ('RX_2_1', 'AX_2_1_0', None),
                                 ('R_3_1', 'AX_3_1_2', 'DX_3_1_2_0'), ('R_4_3', 'A_4_3_1', 'DX_4_3_1_2'),
                                 ('R_5_3', 'A_5_3_1', 'D_5_3_1_4'), ('RX_6_5', 'AX_6_5_3', 'DX_6_5_3_1'),
                                 ('R_7_5', 'AX_7_5_6', 'DX_7_5_6_3'), ('RX_8_0', 'AX_8_0_1', 'DX_8_0_1_7'),
                                 ('R_9_0', 'AX_9_0_8', 'DX_9_0_8_1'), ('R_10_3', 'A_10_3_1', 'D_10_3_1_7'),
                                 ('R_11_4', 'A_11_4_3', 'D_11_4_3_1'), ('R_12_4', 'A_12_4_3', 'D_12_4_3_1'),
                                 ('R_13_4', 'A_13_4_3', 'D_13_4_3_1'), ('RX_14_7', 'AX_14_7_5', 'DX_14_7_5_1'),
                                 ('R_15_7', 'AX_15_7_14', 'DX_15_7_14_5'), ('RX_16_10', 'AX_16_10_3', 'DX_16_10_3_1')),
                      'vars': {'R_1_0': 1.2014696201892123, 'RX_2_1': 1.0, 'AX_2_1_0': 90.0, 'R_3_1': 1.4764335616394748,
                               'AX_3_1_2': 90.0, 'DX_3_1_2_0': 180.0, 'R_4_3': 1.528403848430877,
                               'A_4_3_1': 110.10474745663315, 'DX_4_3_1_2': 250.79698398730164, 'R_5_3': 1.4764334808980883,
                               'A_5_3_1': 112.26383853893992, 'D_5_3_1_4': 123.05092674196338, 'RX_6_5': 1.0,
                               'AX_6_5_3': 90.0, 'DX_6_5_3_1': 180, 'R_7_5': 1.201469520969646, 'AX_7_5_6': 90.0,
                               'DX_7_5_6_3': 180.0, 'RX_8_0': 1.0, 'AX_8_0_1': 90.0, 'DX_8_0_1_7': 180,
                               'R_9_0': 1.065642981503376, 'AX_9_0_8': 90.0, 'DX_9_0_8_1': 180.0,
                               'R_10_3': 1.3169771399805865, 'A_10_3_1': 108.17388195099538,
                               'D_10_3_1_7': 119.20794850242746, 'R_11_4': 1.0969184758191393,
                               'A_11_4_3': 111.59730790975621, 'D_11_4_3_1': 62.15337627950438, 'R_12_4': 1.096052090430251,
                               'A_12_4_3': 111.0304823817703, 'D_12_4_3_1': 302.14665453695886,
                               'R_13_4': 1.0960521991926764, 'A_13_4_3': 111.03046862714851,
                               'D_13_4_3_1': 182.16006499876246, 'RX_14_7': 1.0, 'AX_14_7_5': 90.0, 'DX_14_7_5_1': 180,
                               'R_15_7': 1.0656433171015254, 'AX_15_7_14': 90.0, 'DX_15_7_14_5': 180.0, 'RX_16_10': 1.0,
                               'AX_16_10_3': 90.0, 'DX_16_10_3_1': 0},
                      'map': {0: 0, 1: 1, 2: 'X12', 3: 2, 4: 3, 5: 4, 6: 'X13', 7: 5, 8: 'X14', 9: 6, 10: 7, 11: 8, 12: 9,
                              13: 10, 14: 'X15', 15: 11, 16: 'X16'}}
        cls.zmat_6 = {'symbols': ('H', 'C', 'C', 'C', 'X', 'C', 'X', 'C', 'X', 'H', 'H', 'X', 'H'),
                      'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                 ('R_3_1', 'A_3_1_2', 'D_3_1_2_0'), ('RX_4_2', 'AX_4_2_1', 'DX_4_2_1_3'),
                                 ('R_5_2', 'AX_5_2_4', 'DX_5_2_4_1'), ('RX_6_3', 'AX_6_3_1', 'DX_6_3_1_2'),
                                 ('R_7_3', 'AX_7_3_6', 'DX_7_3_6_1'), ('RX_8_5', 'AX_8_5_2', 'DX_8_5_2_7'),
                                 ('R_9_5', 'AX_9_5_8', 'DX_9_5_8_2'), ('R_10_1', 'A_10_1_2', 'D_10_1_2_7'),
                                 ('RX_11_7', 'AX_11_7_3', 'DX_11_7_3_2'), ('R_12_7', 'AX_12_7_11', 'DX_12_7_11_3')),
                      'vars': {'R_1_0': 1.3155122903491134, 'R_2_1': 1.4707410587114869, 'A_2_1_0': 109.22799244788278,
                               'R_3_1': 1.4707410587114869, 'A_3_1_2': 113.21235050581743, 'D_3_1_2_0': 121.94357782706227,
                               'RX_4_2': 1.0, 'AX_4_2_1': 90.0, 'DX_4_2_1_3': 180, 'R_5_2': 1.2013089233618282,
                               'AX_5_2_4': 90.0, 'DX_5_2_4_1': 180.0, 'RX_6_3': 1.0, 'AX_6_3_1': 90.0, 'DX_6_3_1_2': 180,
                               'R_7_3': 1.2013088241289895, 'AX_7_3_6': 90.0, 'DX_7_3_6_1': 180.0, 'RX_8_5': 1.0,
                               'AX_8_5_2': 90.0, 'DX_8_5_2_7': 180, 'R_9_5': 1.06567033240585, 'AX_9_5_8': 90.0,
                               'DX_9_5_8_2': 180.0, 'R_10_1': 1.0962601875867035, 'A_10_1_2': 109.22799322222649,
                               'D_10_1_2_7': 121.94358050468233, 'RX_11_7': 1.0, 'AX_11_7_3': 90.0, 'DX_11_7_3_2': 180,
                               'R_12_7': 1.0656705002006313, 'AX_12_7_11': 90.0, 'DX_12_7_11_3': 180.0},
                      'map': {0: 7, 1: 2, 2: 1, 3: 3, 4: 'X9', 5: 0, 6: 'X10', 7: 4, 8: 'X11', 9: 5, 10: 6, 11: 'X12', 12: 8}}

    def test_heuristics_for_h_abstraction(self):
        """
        Test that ARC can generate TS guesses based on heuristics for H Abstraction reactions.
        """
        # H2 + O <=> H + OH
        h2_xyz = """H 0.0000000  0.0000000  0.3714780
                    H 0.0000000  0.0000000 -0.3714780"""
        h2 = ARCSpecies(label='H2', smiles='[H][H]', xyz=h2_xyz)
        o = ARCSpecies(label='O', smiles='[O]')
        h = ARCSpecies(label='H', smiles='[H]')
        oh = ARCSpecies(label='OH', smiles='[OH]', xyz=self.oh_xyz)
        rxn1 = ARCReaction(r_species=[h2, o], p_species=[h, oh])
        self.assertEqual(rxn1.family, 'H_Abstraction')
        heuristics_1 = HeuristicsAdapter(job_type='tsg',
                                         reactions=[rxn1],
                                         testing=True,
                                         project='test',
                                         project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                         dihedral_increment=10,
                                         )
        heuristics_1.execute_incore()
        self.assertTrue(rxn1.ts_species.is_ts)
        self.assertEqual(rxn1.ts_species.charge, 0)
        self.assertEqual(rxn1.ts_species.multiplicity, 3)
        self.assertEqual(len(rxn1.ts_species.ts_guesses), 2)
        self.assertTrue(almost_equal_coords(rxn1.ts_species.ts_guesses[0].initial_xyz,
                                            {'symbols': ('H', 'H', 'O'), 'isotopes': (1, 1, 16),
                                             'coords': ((0.0, 0.0, -1.875762), (0.0, 0.0, -0.984214), (0.0, 0.0, 0.180204))}))

        # H + OH <=> H2 + O
        rxn2 = ARCReaction(r_species=[h, oh], p_species=[h2, o])
        heuristics_2 = HeuristicsAdapter(job_type='tsg',
                                         reactions=[rxn2],
                                         testing=True,
                                         project='test',
                                         project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                         dihedral_increment=10,
                                         )
        heuristics_2.execute_incore()
        self.assertEqual(len(rxn2.ts_species.ts_guesses), 1)
        self.assertEqual(rxn2.ts_species.ts_guesses[0].initial_xyz['symbols'], ('H', 'O', 'H'))
        self.assertTrue(almost_equal_coords(rxn2.ts_species.ts_guesses[0].initial_xyz,
                                            {'symbols': ('H', 'O', 'H'), 'isotopes': (1, 16, 1),
                                             'coords': ((0.0, 0.0, 1.875762), (0.0, 0.0, -0.180204), (0.0, 0.0, 0.984214))}))

        # OH + H <=> H2 + O
        rxn3 = ARCReaction(r_species=[oh, h], p_species=[h2, o])
        heuristics_3 = HeuristicsAdapter(job_type='tsg',
                                         reactions=[rxn3],
                                         testing=True,
                                         project='test',
                                         project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                         dihedral_increment=10,
                                         )
        heuristics_3.execute_incore()
        self.assertEqual(len(rxn3.ts_species.ts_guesses), 1)
        self.assertEqual(rxn3.ts_species.ts_guesses[0].initial_xyz['symbols'], ('O', 'H', 'H'))
        self.assertTrue(almost_equal_coords(rxn3.ts_species.ts_guesses[0].initial_xyz,
                                            {'symbols': ('O', 'H', 'H'), 'isotopes': (16, 1, 1),
                                             'coords': ((0.0, 0.0, -0.180204), (0.0, 0.0, 0.984214), (0.0, 0.0, 1.8757615))}))

        # CH4 + H <=> CH3 + H2
        ch4 = ARCSpecies(label='CH4', smiles='C', xyz=self.ch4_xyz)
        ch3 = ARCSpecies(label='CH3', smiles='[CH3]', xyz=self.ch3_xyz)
        rxn4 = ARCReaction(reactants=['CH4', 'H'], products=['CH3', 'H2'],
                           r_species=[ch4, h], p_species=[ch3, h2])
        self.assertEqual(rxn4.family, 'H_Abstraction')
        self.assertEqual(rxn4.atom_map[0], 0)
        for index in [1, 2, 3, 4]:
            self.assertIn(rxn4.atom_map[index], [1, 2, 3, 4, 5])
        self.assertIn(rxn4.atom_map[5], [4, 5])
        heuristics_4 = HeuristicsAdapter(job_type='tsg',
                                         reactions=[rxn4],
                                         testing=True,
                                         project='test',
                                         project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                         dihedral_increment=120,
                                         )
        heuristics_4.execute_incore()
        self.assertTrue(rxn4.ts_species.is_ts)
        self.assertEqual(rxn4.ts_species.charge, 0)
        self.assertEqual(rxn4.ts_species.multiplicity, 2)
        self.assertEqual(len(rxn4.ts_species.ts_guesses), 4)  # No dihedral scans for H attacking at 180 degrees.
        self.assertTrue(rxn4.ts_species.ts_guesses[0].success)
        self.assertTrue(almost_equal_coords(rxn4.ts_species.ts_guesses[0].initial_xyz,
                                            {'symbols': ('C', 'H', 'H', 'H', 'H', 'H'), 'isotopes': (12, 1, 1, 1, 1, 1),
                                             'coords': ((2.032228145856716e-09, -0.1349861936729119, -0.047724833206401085),
                                                        (2.032228145856716e-09, 1.1006963897520332, 0.3891549615762657),
                                                        (0.8917770595461324, -0.6498538917136708, 0.31634164254626373),
                                                        (-0.8917770898402092, -0.6498539493490708, 0.31634164059575576),
                                                        (2.032228145856716e-09, -0.1349861936729119, -1.139924203999533),
                                                        (2.032228145856716e-09, 1.9412551274403573, 0.6863373721320729))}))

        # C3H8 + HO2 <=> C3H7 + H2O2
        c3h8_xyz = """C	0.0000000 0.0000000 0.5949240
                      C 0.0000000 1.2772010 -0.2630030
                      C 0.0000000 -1.2772010 -0.2630030
                      H 0.8870000 0.0000000 1.2568980
                      H -0.8870000 0.0000000 1.2568980
                      H 0.0000000 2.1863910 0.3643870
                      H 0.0000000 -2.1863910 0.3643870
                      H 0.8933090 1.3136260 -0.9140200
                      H -0.8933090 1.3136260 -0.9140200
                      H -0.8933090 -1.3136260 -0.9140200
                      H 0.8933090 -1.3136260 -0.9140200"""
        ho2_xyz = """O 0.0553530 -0.6124600 0.0000000
                     O 0.0553530 0.7190720 0.0000000
                     H -0.8856540 -0.8528960 0.0000000"""
        c3h7_xyz = """C 1.3077700 -0.2977690 0.0298660
                      C 0.0770610 0.5654390 -0.0483740
                      C -1.2288150 -0.2480100 0.0351080
                      H -2.1137100 0.4097560 -0.0247200
                      H -1.2879330 -0.9774520 -0.7931500
                      H -1.2803210 -0.8079420 0.9859990
                      H 0.1031750 1.3227340 0.7594170
                      H 0.0813910 1.1445730 -0.9987260
                      H 2.2848940 0.1325040 0.2723890
                      H 1.2764100 -1.3421290 -0.3008110"""
        h2o2_xyz = """O 0.0000000 0.7275150 -0.0586880
                      O 0.0000000 -0.7275150 -0.0586880
                      H 0.7886440 0.8942950 0.4695060
                      H -0.7886440 -0.8942950 0.4695060"""
        c3h8 = ARCSpecies(label='C3H8', smiles='CCC', xyz=c3h8_xyz)
        ho2 = ARCSpecies(label='HO2', smiles='O[O]', xyz=ho2_xyz)
        c3h7 = ARCSpecies(label='C3H7', smiles='[CH2]CC', xyz=c3h7_xyz)
        h2o2 = ARCSpecies(label='H2O2', smiles='OO', xyz=h2o2_xyz)
        rxn5 = ARCReaction(reactants=['C3H8', 'HO2'], products=['C3H7', 'H2O2'],
                           r_species=[c3h8, ho2], p_species=[c3h7, h2o2])
        self.assertEqual(rxn5.family, 'H_Abstraction')
        heuristics_5 = HeuristicsAdapter(job_type='tsg',
                                         reactions=[rxn5],
                                         testing=True,
                                         project='test',
                                         project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                         dihedral_increment=120,
                                         )
        heuristics_5.execute_incore()
        self.assertTrue(rxn5.ts_species.is_ts)
        self.assertEqual(rxn5.ts_species.charge, 0)
        self.assertEqual(rxn5.ts_species.multiplicity, 2)
        self.assertEqual(len(rxn5.ts_species.ts_guesses), 18)
        self.assertEqual(rxn5.ts_species.ts_guesses[0].initial_xyz['symbols'], ('C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'O', 'O', 'H'))
        self.assertEqual(rxn5.ts_species.ts_guesses[1].initial_xyz['symbols'], ('C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'O', 'O', 'H'))
        self.assertEqual(rxn5.ts_species.ts_guesses[2].initial_xyz['symbols'], ('C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'O', 'O', 'H'))
        self.assertTrue(rxn5.ts_species.ts_guesses[0].success)
        self.assertTrue(rxn5.ts_species.ts_guesses[1].success)
        self.assertTrue(rxn5.ts_species.ts_guesses[2].success)

        # CCCOH + OH <=> CCCO + H2O
        cccoh_xyz = """C -1.4562640 1.2257490 0.0000000
                       C 0.0000000 0.7433860 0.0000000
                       C 0.1008890 -0.7771710 0.0000000
                       O 1.4826600 -1.1256940 0.0000000
                       H -1.5081640 2.3212940 0.0000000
                       H -1.9909330 0.8624630 0.8882620
                       H -1.9909330 0.8624630 -0.8882620
                       H 0.5289290 1.1236530 0.8845120
                       H 0.5289290 1.1236530 -0.8845120
                       H -0.4109400 -1.1777970 0.8923550
                       H -0.4109400 -1.1777970 -0.8923550
                       H 1.5250230 -2.0841670 0.0000000"""
        ccco_xyz = """C      -1.22579665    0.34157501   -0.08330600
                      C      -0.04626439   -0.57243496    0.22897599
                      C      -0.11084721   -1.88672335   -0.59040103
                      O       0.94874959   -2.60335587   -0.24842497
                      H      -2.17537216   -0.14662734    0.15781317
                      H      -1.15774972    1.26116047    0.50644174
                      H      -1.23871523    0.61790236   -1.14238547
                      H       0.88193016   -0.02561912    0.01201028
                      H      -0.05081615   -0.78696747    1.30674288
                      H      -1.10865982   -2.31155703   -0.39617740
                      H      -0.21011639   -1.57815495   -1.64338139"""
        h2o_xyz = """O      -0.00032832    0.39781490    0.00000000
                     H      -0.76330345   -0.19953755    0.00000000
                     H       0.76363177   -0.19827735    0.00000000"""
        cccoh = ARCSpecies(label='CCCOH', smiles='CCCO', xyz=cccoh_xyz)
        ccco = ARCSpecies(label='CCCO', smiles='CCC[O]', xyz=ccco_xyz)
        h2o = ARCSpecies(label='H2O', smiles='O', xyz=h2o_xyz)
        rxn6 = ARCReaction(reactants=['CCCOH', 'OH'], products=['CCCO', 'H2O'],
                           r_species=[cccoh, oh], p_species=[ccco, h2o])
        self.assertEqual(rxn6.family, 'H_Abstraction')
        heuristics_6 = HeuristicsAdapter(job_type='tsg',
                                         reactions=[rxn6],
                                         testing=True,
                                         project='test',
                                         project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                         dihedral_increment=20,
                                         )
        heuristics_6.execute_incore()
        self.assertTrue(rxn6.ts_species.is_ts)
        self.assertEqual(rxn6.ts_species.charge, 0)
        self.assertEqual(rxn6.ts_species.multiplicity, 2)
        self.assertEqual(rxn6.ts_species.ts_guesses[0].initial_xyz['symbols'],
                         ('C', 'C', 'C', 'O', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'O', 'H'))
        self.assertEqual(len(rxn6.ts_species.ts_guesses[1].initial_xyz['coords']), 14)

        # C=COH + H <=> C=CO + H2
        cdcoh_xyz = """C      -0.80601307   -0.11773769    0.32792128
                       C       0.23096883    0.47536513   -0.26437348
                       O       1.44620485   -0.11266560   -0.46339257
                       H      -1.74308628    0.41660480    0.45016601
                       H      -0.75733964   -1.13345488    0.70278513
                       H       0.21145717    1.48838416   -0.64841675
                       H       1.41780836   -1.01649567   -0.10468897"""
        cdco_xyz = """C      -0.68324480   -0.04685539   -0.10883672
                      C       0.63642204    0.05717653    0.10011041
                      O       1.50082619   -0.82476680    0.32598015
                      H      -1.27691852    0.84199331   -0.29048852
                      H      -1.17606821   -1.00974165   -0.10030145
                      H       0.99232452    1.08896899    0.06242974"""
        cdcoh = ARCSpecies(label='C=COH', smiles='C=CO', xyz=cdcoh_xyz)
        cdco = ARCSpecies(label='C=CO', smiles='C=C[O]', xyz=cdco_xyz)
        rxn7 = ARCReaction(reactants=['C=COH', 'H'], products=['C=CO', 'H2'],
                           r_species=[cdcoh, h], p_species=[cdco, h2])
        self.assertEqual(rxn7.family, 'H_Abstraction')
        heuristics_7 = HeuristicsAdapter(job_type='tsg',
                                         reactions=[rxn7],
                                         testing=True,
                                         project='test',
                                         project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                         dihedral_increment=120,
                                         )
        heuristics_7.execute_incore()
        self.assertTrue(rxn7.ts_species.is_ts)
        self.assertEqual(rxn7.ts_species.charge, 0)
        self.assertEqual(rxn7.ts_species.multiplicity, 2)
        self.assertEqual(len(rxn7.ts_species.ts_guesses), 1)  # No dihedral scans for H attacking at 180 degrees.
        self.assertEqual(rxn7.ts_species.ts_guesses[0].initial_xyz['symbols'], ('C', 'C', 'O', 'H', 'H', 'H', 'H', 'H'))

        # NCO + NH2 <=> HNCO + NH
        nco_xyz = """N       1.36620399    0.00000000    0.00000000
                     C      -0.09510200    0.00000000    0.00000000
                     O      -1.27110200    0.00000000    0.00000000"""
        nh2_xyz = """N       0.00022972    0.40059496    0.00000000
                     H      -0.83174214   -0.19982058    0.00000000
                     H       0.83151242   -0.20077438    0.00000000"""
        hnco_xyz = """N      -0.70061553    0.28289128   -0.18856549
                      C       0.42761869    0.11537693    0.07336374
                      O       1.55063087   -0.07323229    0.35677630
                      H      -1.27763403   -0.32503592    0.39725197"""
        nh_xyz = """N       0.50949998    0.00000000    0.00000000
                    H      -0.50949998    0.00000000    0.00000000"""
        nco = ARCSpecies(label='NCO', smiles='[N]=C=O', xyz=nco_xyz)
        nh2 = ARCSpecies(label='NH2', smiles='[NH2]', xyz=nh2_xyz)
        hnco = ARCSpecies(label='HNCO', smiles='N=C=O', xyz=hnco_xyz)
        nh = ARCSpecies(label='NH', smiles='[NH]', xyz=nh_xyz)
        rxn8 = ARCReaction(r_species=[nco, nh2], p_species=[hnco, nh])
        self.assertEqual(rxn8.family, 'H_Abstraction')
        heuristics_8 = HeuristicsAdapter(job_type='tsg',
                                         reactions=[rxn8],
                                         testing=True,
                                         project='test',
                                         project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                         dihedral_increment=120,
                                         )
        heuristics_8.execute_incore()
        self.assertTrue(rxn8.ts_species.is_ts)
        self.assertEqual(rxn8.ts_species.charge, 0)
        self.assertEqual(rxn8.ts_species.multiplicity, 3)
        self.assertEqual(len(rxn8.ts_species.ts_guesses), 6)
        self.assertTrue(almost_equal_coords(rxn8.ts_species.ts_guesses[0].initial_xyz,
                                            {'symbols': ('N', 'C', 'O', 'N', 'H', 'H'), 'isotopes': (14, 12, 16, 14, 1, 1),
                                             'coords': ((-3.657596721635545e-09, 0.08876698337705413, 0.9329034620293603),
                                                        (-3.657596721635545e-09, 0.8029731964901674, 0.005816759497990542),
                                                        (9.609228590831403e-09, 1.4947776654181317, -0.9420542025729876),
                                                        (-3.657596721635545e-09, -2.2452231277287726, 0.16101001965294726),
                                                        (-3.657596721635545e-09, -1.0762904363668742, 0.547597552628467),
                                                        (-3.657596721635545e-09, -2.2452231277287726, -0.8649899620469162))}))
        self.assertTrue(almost_equal_coords(rxn8.ts_species.ts_guesses[1].initial_xyz,
                                            {'symbols': ('N', 'C', 'O', 'N', 'H', 'H'), 'isotopes': (14, 12, 16, 14, 1, 1),
                                             'coords': ((0.7304309896785263, 0.4813753237349452, -0.26044855417424406),
                                                        (-0.22605518455485318, 0.6753956743209286, 0.3853614572987496),
                                                        (-1.2013936879956266, 0.8535814918821567, 1.0130695121236126),
                                                        (0.7304309896785263, -1.8526147873708816, -1.032341996550657),
                                                        (0.7304309896785263, -0.6836820960089831, -0.6457544635751373),
                                                        (0.7304309896785263, -1.8526147873708816, -2.0583419782505206))}))
        self.assertTrue(almost_equal_coords(rxn8.ts_species.ts_guesses[2].initial_xyz,
                                            {'symbols': ('N', 'C', 'O', 'N', 'H', 'H'), 'isotopes': (14, 12, 16, 14, 1, 1),
                                             'coords': ((-0.7304309882994099, 0.48137532979234665, -0.26044855803662603),
                                                        (0.22605518593396912, 0.6753956803783296, 0.3853614534363681),
                                                        (1.201393684372416, 0.8535814759681686, 1.0130695222708512),
                                                        (-0.7304309882994099, -1.8526147813134801, -1.032342000413039),
                                                        (-0.7304309882994099, -0.6836820899515816, -0.6457544674375193),
                                                        (-0.7304309882994099, -1.8526147813134801, -2.0583419821129025))}))

        # butenylnebzene + CCOO <=> butenylnebzene_rad + CCOOH
        butenylnebzene_xyz = """C      -1.71226453   -0.84554485    0.38526063
                                C      -3.04422965   -0.42914264    0.41012166
                                C      -3.42029899    0.74723413   -0.23559352
                                C      -2.46544277    1.50753989   -0.90818256
                                C      -1.13299223    1.09288376   -0.93424603
                                C      -0.74341165   -0.08513522   -0.28306031
                                C       0.69357354   -0.54411184   -0.32741768
                                C       0.96111341   -1.45397252   -1.53003141
                                C       2.38975018   -1.92155599   -1.55932472
                                C       3.25117244   -1.64080060   -2.54512753
                                H      -1.43447830   -1.76767058    0.89062734
                                H      -3.78886508   -1.02369999    0.93270709
                                H      -4.45754439    1.07063686   -0.21594061
                                H      -2.75843025    2.42373310   -1.41396154
                                H      -0.39940594    1.69445181   -1.46624302
                                H       0.93550160   -1.06555454    0.60815996
                                H       1.35380726    0.33269483   -0.35901826
                                H       0.70851184   -0.92832434   -2.45979346
                                H       0.31045732   -2.33637041   -1.48650631
                                H       2.72442421   -2.53507765   -0.72507466
                                H       2.96318630   -1.03906198   -3.40168902
                                H       4.27083810   -2.01270921   -2.51458029"""
        peroxyl_xyz = """C      -1.05582103   -0.03329574   -0.10080257
                         C       0.41792695    0.17831205    0.21035514
                         O       1.19234020   -0.65389683   -0.61111443
                         O       2.44749684   -0.41401220   -0.28381363
                         H      -1.33614002   -1.09151783    0.08714882
                         H      -1.25953618    0.21489046   -1.16411897
                         H      -1.67410396    0.62341419    0.54699514
                         H       0.59566350   -0.06437686    1.28256640
                         H       0.67254676    1.24676329    0.02676370"""
        peroxide_xyz = """C      -1.34047532   -0.03188958    0.16703197
                          C       0.07658214   -0.19298564   -0.34334978
                          O       0.27374087    0.70670928   -1.43275058
                          O       1.64704173    0.49781461   -1.86879814
                          H      -2.06314673   -0.24194344   -0.62839800
                          H      -1.53242454   -0.70687225    1.00574309
                          H      -1.51781587    0.99794893    0.49424821
                          H       0.24018222   -1.21958121   -0.68782344
                          H       0.79344780    0.03863434    0.45152272
                          H       1.95991273    1.39912383   -1.67215155"""
        butenylnebzene_rad1_xyz = """C      -1.88266976   -0.87687529   -0.63607576
                                     C      -3.06025073   -0.20236914   -0.30870889
                                     C      -3.07096712    0.71611053    0.73950868
                                     C      -1.90403911    0.96368054    1.45998739
                                     C      -0.72563713    0.29023608    1.13460173
                                     C      -0.70473521   -0.64221365    0.08717649
                                     C       0.57567571   -1.35823396   -0.27232070
                                     C       1.47982006   -0.51744899   -1.11962456
                                     C       2.90883262   -0.59134257   -0.96873657
                                     C       3.75183420    0.10706027   -1.73634793
                                     H      -1.88917338   -1.58645450   -1.46031384
                                     H      -3.96913141   -0.39219681   -0.87352986
                                     H      -3.98783434    1.24160615    0.99265871
                                     H      -1.91005379    1.68377589    2.27388853
                                     H       0.18057426    0.49821548    1.69940227
                                     H       0.34051301   -2.28273463   -0.81410484
                                     H       1.07516828   -1.66856944    0.65418851
                                     H       1.05110536    0.09965361   -1.90323723
                                     H       3.30722691   -1.24504321   -0.19595001
                                     H       4.82473956    0.02594832   -1.59289339
                                     H       3.40309973    0.77336779   -2.51917155"""
        butenylnebzene_rad2_xyz = """C       0.86557186    0.88201467    0.63421602
                                     C       2.10949019    1.51449365    0.71246655
                                     C       3.25224601    0.86186581    0.25912210
                                     C       3.14957012   -0.42059281   -0.27342877
                                     C       1.90421947   -1.05251000   -0.35083861
                                     C       0.74699841   -0.41118094    0.10593634
                                     C      -0.58479314   -1.01936532    0.04460380
                                     C      -0.85980476   -2.42967089   -0.36144757
                                     C      -1.19954275   -2.52225943   -1.82034160
                                     C      -2.37408626   -2.95334594   -2.29914371
                                     H      -0.01246578    1.41307286    0.99522772
                                     H       2.18292853    2.51633055    1.12713435
                                     H       4.22023612    1.35204102    0.31838735
                                     H       4.03880532   -0.93210312   -0.63266934
                                     H       1.86256917   -2.04849879   -0.78187681
                                     H      -1.44058451   -0.38162928    0.24463988
                                     H      -0.01456714   -3.08941132   -0.14056348
                                     H      -1.69219098   -2.80180034    0.24897564
                                     H      -0.42576150   -2.21925087   -2.52323755
                                     H      -2.55420789   -2.99614384   -3.36897081
                                     H      -3.17872709   -3.26780622   -1.64194211"""
        butenylnebzene = ARCSpecies(label='butenylnebzene', smiles='c1ccccc1CCC=C', xyz=butenylnebzene_xyz)
        peroxyl = ARCSpecies(label='CCOO', smiles='CCO[O]', xyz=peroxyl_xyz)
        peroxide = ARCSpecies(label='CCOOH', smiles='CCOO', xyz=peroxide_xyz)
        butenylnebzene_rad1 = ARCSpecies(label='butenylnebzene_rad1', smiles='c1ccccc1C[CH]C=C', xyz=butenylnebzene_rad1_xyz)
        butenylnebzene_rad2 = ARCSpecies(label='butenylnebzene_rad2', smiles='c1ccccc1[CH]CC=C', xyz=butenylnebzene_rad2_xyz)
        rxn9 = ARCReaction(r_species=[butenylnebzene, peroxyl], p_species=[peroxide, butenylnebzene_rad1])
        rxn10 = ARCReaction(r_species=[butenylnebzene, peroxyl], p_species=[peroxide, butenylnebzene_rad2])
        self.assertEqual(rxn9.family, 'H_Abstraction')
        self.assertEqual(rxn10.family, 'H_Abstraction')
        heuristics_9 = HeuristicsAdapter(job_type='tsg',
                                         reactions=[rxn9],
                                         testing=True,
                                         project='test',
                                         project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                         dihedral_increment=120,
                                         )
        heuristics_9.execute_incore()
        self.assertTrue(rxn9.ts_species.is_ts)
        self.assertEqual(rxn9.ts_species.charge, 0)
        self.assertEqual(rxn9.ts_species.multiplicity, 2)
        self.assertEqual(len(rxn9.ts_species.ts_guesses), 6)
        self.assertEqual(rxn9.ts_species.ts_guesses[2].initial_xyz['symbols'],
                         ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H',
                          'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'C', 'C',
                          'O', 'O', 'H', 'H', 'H', 'H', 'H'))
        heuristics_10 = HeuristicsAdapter(job_type='tsg',
                                          reactions=[rxn10],
                                          testing=True,
                                          project='test',
                                          project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                          dihedral_increment=120,
                                          )
        heuristics_10.execute_incore()
        self.assertTrue(rxn10.ts_species.is_ts)
        self.assertEqual(rxn10.ts_species.charge, 0)
        self.assertEqual(rxn10.ts_species.multiplicity, 2)
        self.assertEqual(len(rxn10.ts_species.ts_guesses), 6)
        self.assertEqual(rxn10.ts_species.ts_guesses[1].initial_xyz['symbols'],
                         ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H',
                          'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'C', 'C',
                          'O', 'O', 'H', 'H', 'H', 'H', 'H'))

        # C2H5O + CH3OH <=> C2H5OH + CH3O
        c2h5o_xyz = """C      -0.74046271    0.02568566   -0.00568694
                       C       0.79799272   -0.01511040    0.00517437
                       O       1.17260343   -0.72227959   -1.04851579
                       H      -1.13881231   -0.99286049    0.06963185
                       H      -1.14162013    0.59700303    0.84092854
                       H      -1.13266865    0.46233725   -0.93283228
                       H       1.11374677    1.03794239    0.06905096
                       H       1.06944350   -0.38306117    1.00698657"""
        ch3oh_xyz = """C      -0.36862686   -0.00871354    0.04292587
                       O       0.98182901   -0.04902010    0.46594709
                       H      -0.57257378    0.95163086   -0.43693396
                       H      -0.55632373   -0.82564527   -0.65815446
                       H      -1.01755588   -0.12311763    0.91437513
                       H       1.10435907    0.67758465    1.10037299"""
        c2h5oh_xyz = """C      -0.97459464    0.29181710    0.10303882
                        C       0.39565894   -0.35143697    0.10221676
                        O       0.30253309   -1.63748710   -0.49196889
                        H      -1.68942501   -0.32359616    0.65926091
                        H      -0.93861751    1.28685508    0.55523033
                        H      -1.35943743    0.38135479   -0.91822428
                        H       0.76858330   -0.46187184    1.12485643
                        H       1.10301149    0.25256708   -0.47388355
                        H       1.19485981   -2.02360458   -0.47786539"""
        ch3o_xyz = """C       0.03807240    0.00035621   -0.00484242
                      O       1.35198769    0.01264937   -0.17195885
                      H      -0.33965241   -0.14992727    1.02079480
                      H      -0.51702680    0.90828035   -0.29592912
                      H      -0.53338088   -0.77135867   -0.54806440"""
        c2h5o = ARCSpecies(label='C2H5O', smiles='CC[O]', xyz=c2h5o_xyz)
        ch3oh = ARCSpecies(label='CH3OH', smiles='CO', xyz=ch3oh_xyz)
        c2h5oh = ARCSpecies(label='C2H5OH', smiles='CCO', xyz=c2h5oh_xyz)
        ch3o = ARCSpecies(label='CH3O', smiles='C[O]', xyz=ch3o_xyz)
        rxn11 = ARCReaction(r_species=[c2h5o, ch3oh], p_species=[c2h5oh, ch3o])
        self.assertEqual(rxn11.family, 'H_Abstraction')
        heuristics_11 = HeuristicsAdapter(job_type='tsg',
                                          reactions=[rxn11],
                                          testing=True,
                                          project='test',
                                          project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                          dihedral_increment=30,
                                          )
        heuristics_11.execute_incore()
        self.assertTrue(rxn11.ts_species.is_ts)
        self.assertEqual(rxn11.ts_species.charge, 0)
        self.assertEqual(rxn11.ts_species.multiplicity, 2)
        self.assertEqual(len(rxn11.ts_species.ts_guesses), 12)
        self.assertEqual(rxn11.ts_species.ts_guesses[0].initial_xyz['symbols'],
                         ('C', 'C', 'O', 'H', 'H', 'H', 'H', 'H', 'C', 'O', 'H', 'H', 'H', 'H'))

        # NH3 + OH <=> NH2 + H2O
        nh3 = ARCSpecies(label='NH3', smiles='N', xyz=self.nh3_xyz)
        oh = ARCSpecies(label='OH', smiles='[OH]', xyz=self.oh_xyz)
        nh2 = ARCSpecies(label='NH2', smiles='[NH2]', xyz=self.nh2_xyz)
        h2o = ARCSpecies(label='H2O', smiles='O', xyz=self.h2o_xyz)
        rxn12 = ARCReaction(r_species=[nh3, oh], p_species=[nh2, h2o])
        self.assertEqual(rxn12.family, 'H_Abstraction')
        heuristics_12 = HeuristicsAdapter(job_type='tsg',
                                          reactions=[rxn12],
                                          testing=True,
                                          project='test',
                                          project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                          dihedral_increment=60,
                                          )
        heuristics_12.execute_incore()
        self.assertTrue(rxn12.ts_species.is_ts)
        self.assertEqual(rxn12.ts_species.charge, 0)
        self.assertEqual(rxn12.ts_species.multiplicity, 2)
        self.assertEqual(len(rxn12.ts_species.ts_guesses), 18)
        for i in range(6):
            self.assertTrue(rxn12.ts_species.ts_guesses[i].success)
        self.assertEqual(rxn12.ts_species.ts_guesses[0].initial_xyz['symbols'], ('N', 'H', 'H', 'H', 'O', 'H'))

        # Reverse order
        # NH2 + H2O <=> NH3 + OH
        rxn13 = ARCReaction(r_species=[nh2, h2o], p_species=[nh3, oh])
        self.assertEqual(rxn13.family, 'H_Abstraction')
        heuristics_13 = HeuristicsAdapter(job_type='tsg',
                                          reactions=[rxn13],
                                          testing=True,
                                          project='test',
                                          project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                          dihedral_increment=180,
                                          )
        heuristics_13.execute_incore()
        self.assertTrue(rxn13.ts_species.is_ts)
        self.assertEqual(rxn13.ts_species.charge, 0)
        self.assertEqual(rxn13.ts_species.multiplicity, 2)
        self.assertEqual(len(rxn13.ts_species.ts_guesses), 4)
        self.assertEqual(rxn13.ts_species.ts_guesses[0].initial_xyz['symbols'], ('N', 'H', 'H', 'O', 'H', 'H'))

        # different reactant order order
        # H2O + NH2 <=> NH3 + OH
        rxn14 = ARCReaction(r_species=[h2o, nh2], p_species=[nh3, oh])
        self.assertEqual(rxn14.family, 'H_Abstraction')
        heuristics_14 = HeuristicsAdapter(job_type='tsg',
                                          reactions=[rxn14],
                                          testing=True,
                                          project='test',
                                          project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                          dihedral_increment=180,
                                          )
        heuristics_14.execute_incore()
        self.assertTrue(rxn14.ts_species.is_ts)
        self.assertEqual(rxn14.ts_species.charge, 0)
        self.assertEqual(rxn14.ts_species.multiplicity, 2)
        self.assertEqual(len(rxn14.ts_species.ts_guesses), 4)
        self.assertEqual(rxn14.ts_species.ts_guesses[0].initial_xyz['symbols'], ('O', 'H', 'H', 'N', 'H', 'H'))

        # different product order order
        # NH2 + H2O <=> OH + NH3
        rxn15 = ARCReaction(r_species=[h2o, nh2], p_species=[nh3, oh])
        self.assertEqual(rxn15.family, 'H_Abstraction')
        heuristics_15 = HeuristicsAdapter(job_type='tsg',
                                          reactions=[rxn15],
                                          testing=True,
                                          project='test',
                                          project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                          dihedral_increment=180,
                                          )
        heuristics_15.execute_incore()
        self.assertTrue(rxn15.ts_species.is_ts)
        self.assertEqual(rxn15.ts_species.charge, 0)
        self.assertEqual(rxn15.ts_species.multiplicity, 2)
        self.assertEqual(len(rxn15.ts_species.ts_guesses), 4)
        self.assertEqual(rxn15.ts_species.ts_guesses[0].initial_xyz['symbols'], ('O', 'H', 'H', 'N', 'H', 'H'))

        # NFCl + H2O <=> NHFCl + OH
        hnfcl = ARCSpecies(label='NHFCl', smiles='N(F)Cl', xyz="""N      -0.14626256    0.12816405    0.30745256
                                                                  F      -0.94719775   -0.91910939   -0.09669786
                                                                  Cl      1.53982436   -0.20497454   -0.07627978
                                                                  H      -0.44636405    0.99591988   -0.13447493""")
        nfcl = ARCSpecies(label='NFCl', smiles='[N](F)(Cl)', xyz="""N      -0.17697493    0.58788903    0.00000000
                                                                    F      -1.17300047   -0.36581404    0.00000000
                                                                    Cl      1.34997541   -0.22207499    0.00000000""")
        rxn16 = ARCReaction(r_species=[nfcl, h2o], p_species=[hnfcl, oh])
        self.assertEqual(rxn16.family, 'H_Abstraction')
        heuristics_16 = HeuristicsAdapter(job_type='tsg',
                                          reactions=[rxn16],
                                          testing=True,
                                          project='test',
                                          project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                          dihedral_increment=360,
                                          )
        heuristics_16.execute_incore()
        self.assertEqual(len(rxn16.ts_species.ts_guesses), 2)
        self.assertTrue(rxn16.ts_species.ts_guesses[0].success)
        self.assertEqual(rxn16.ts_species.ts_guesses[0].initial_xyz['symbols'], ('N', 'F', 'Cl', 'O', 'H', 'H'))

        # HO2 + H2NN(T) <=> O2 + N2H3
        ho2_xyz = """O 0.0553530 -0.6124600 0.0000000
                     O 0.0553530 0.7190720 0.0000000
                     H -0.8856540 -0.8528960 0.0000000"""
        ho2 = ARCSpecies(label='HO2', smiles='O[O]', xyz=ho2_xyz)
        h2nnt = ARCSpecies(label='H2NN(T)', smiles='[N]N', xyz="""N       1.25464159   -0.04494405   -0.06271952
                                                                  N      -0.11832785   -0.00810069    0.29783210
                                                                  H      -0.59897890   -0.78596704   -0.15190060
                                                                  H      -0.53733484    0.83901179   -0.08321197""")
        o2 = ARCSpecies(label='O2', smiles='[O][O]', xyz="""O	0.0000000	0.0000000	0.6029240
                                                            O	0.0000000	0.0000000	-0.6029240""")
        n2h3 = ARCSpecies(label='N2H3', smiles='N[NH]')
        rxn17 = ARCReaction(r_species=[ho2, h2nnt], p_species=[o2, n2h3])
        self.assertEqual(rxn17.family, 'H_Abstraction')
        heuristics_16 = HeuristicsAdapter(job_type='tsg',
                                          reactions=[rxn17],
                                          testing=True,
                                          project='test',
                                          project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                          dihedral_increment=60,
                                          )
        heuristics_16.execute_incore()
        self.assertEqual(len(rxn17.ts_species.ts_guesses), 6)
        self.assertTrue(rxn17.ts_species.ts_guesses[0].success)
        self.assertEqual(rxn17.ts_species.ts_guesses[0].initial_xyz['symbols'], ('O', 'O', 'H', 'N', 'N', 'H', 'H'))

        # HONO + HNOH <=> NO2 + NH2OH
        hono = ARCSpecies(label='HONO', smiles='ON=O')
        hnoh = ARCSpecies(label='HNOH', smiles='[NH]O')
        no2 = ARCSpecies(label='NO2', smiles='[O-][N+]=O')
        nh2oh = ARCSpecies(label='NH2OH', smiles='NO')
        rxn1 = ARCReaction(r_species=[hono, hnoh], p_species=[no2, nh2oh])
        self.assertEqual(rxn1.family, 'H_Abstraction')
        heuristics_1 = HeuristicsAdapter(job_type='tsg',
                                         reactions=[rxn1],
                                         testing=True,
                                         project='test',
                                         project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                         dihedral_increment=60,
                                         )
        heuristics_1.execute_incore()
        self.assertTrue(rxn1.ts_species.is_ts)
        self.assertEqual(rxn1.ts_species.multiplicity, 2)
        self.assertEqual(len(rxn1.ts_species.ts_guesses), 6)

        # H2NN(T) + N2H4 <=> N2H3 + N2H3
        h2nn = ARCSpecies(label='H2NN(T)', smiles='[N]N')
        n2h4 = ARCSpecies(label='N2H4', smiles='NN')
        n2h3 = ARCSpecies(label='N2H3', smiles='[NH]N')
        rxn1 = ARCReaction(r_species=[h2nn, n2h4], p_species=[n2h3, n2h3])
        self.assertEqual(rxn1.family, 'H_Abstraction')
        heuristics_1 = HeuristicsAdapter(job_type='tsg',
                                         reactions=[rxn1],
                                         testing=True,
                                         project='test',
                                         project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                         dihedral_increment=60,
                                         )
        heuristics_1.execute_incore()
        self.assertTrue(rxn1.ts_species.is_ts)
        self.assertEqual(rxn1.ts_species.charge, 0)
        self.assertEqual(len(rxn1.ts_species.ts_guesses), 18)

        # Molecules with linear motifs (and many dummy atoms in both R1H and P2H):
        rxn1 = ARCReaction(r_species=[ARCSpecies(label='CtC[CH]CtC', smiles='C#C[CH]C#C'),
                                      ARCSpecies(label='CtCC[C]CtC', smiles='C#CC(C)C#C')],
                           p_species=[ARCSpecies(label='CtCCCtC', smiles='C#CCC#C'),
                                      ARCSpecies(label='CtC[C][C]CtC', smiles='C#C[C](C)C#C')])
        self.assertEqual(rxn1.family, 'H_Abstraction')
        heuristics_1 = HeuristicsAdapter(job_type='tsg',
                                         reactions=[rxn1],
                                         testing=True,
                                         project='test',
                                         project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                         dihedral_increment=60,
                                         )
        heuristics_1.execute_incore()
        self.assertEqual(len(rxn1.ts_species.ts_guesses), 6)

        ch3 = ARCSpecies(label='CH3', smiles='[CH3]')
        cdcdc = ARCSpecies(label='C=C=C', smiles='C=C=C')
        ch4 = ARCSpecies(label='CH4', smiles='C')
        chdcdc = ARCSpecies(label='CH=C=C', smiles='[CH]=C=C')
        rxn1 = ARCReaction(r_species=[ch3, cdcdc], p_species=[ch4, chdcdc])
        self.assertEqual(rxn1.family, 'H_Abstraction')
        heuristics_1 = HeuristicsAdapter(job_type='tsg',
                                         reactions=[rxn1],
                                         testing=True,
                                         project='test',
                                         project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'),
                                         dihedral_increment=120,
                                         )
        heuristics_1.execute_incore()
        self.assertEqual(len(rxn1.ts_species.ts_guesses), 12)

    def test_keeping_atom_order_in_ts(self):
        """Test that the generated TS has the same atom order as in the reactants"""
        # reactant_reversed, products_reversed = False, False
        rxn_1 = ARCReaction(r_species=[ARCSpecies(label='C2H6', smiles='CC', xyz=self.c2h6_xyz),
                                       ARCSpecies(label='CCOOj', smiles='CCO[O]', xyz=self.ccooj_xyz)],
                            p_species=[ARCSpecies(label='C2H5', smiles='C[CH2]', xyz=self.c2h5_xyz),
                                       ARCSpecies(label='CCOOH', smiles='CCOO', xyz=self.ccooh_xyz)])
        self.assertIn(rxn_1.atom_map[0], [0, 1])
        self.assertIn(rxn_1.atom_map[1], [0, 1])
        for index in [2, 3, 4, 5, 6, 7]:
            self.assertIn(rxn_1.atom_map[index], [2, 3, 4, 5, 6, 16])
        self.assertEqual(rxn_1.atom_map[8:12], [7, 8, 9, 10])
        self.assertIn(tuple(rxn_1.atom_map[12:15]), itertools.permutations([13, 11, 12]))
        self.assertIn(rxn_1.atom_map[15:], [[14, 15], [15, 14]])
        heuristics_1 = HeuristicsAdapter(job_type='tsg',
                                         reactions=[rxn_1],
                                         testing=True,
                                         project='test_1',
                                         project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics_1'),
                                         dihedral_increment=120,
                                         )
        heuristics_1.execute_incore()
        for tsg in rxn_1.ts_species.ts_guesses:
            self.assertEqual(tsg.initial_xyz['symbols'],
                             ('C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'C', 'C', 'O', 'O', 'H', 'H', 'H', 'H', 'H'))

        # reactant_reversed, products_reversed = False, True
        rxn_2 = ARCReaction(r_species=[ARCSpecies(label='C2H6', smiles='CC', xyz=self.c2h6_xyz),
                                       ARCSpecies(label='CCOOj', smiles='CCO[O]', xyz=self.ccooj_xyz)],
                            p_species=[ARCSpecies(label='CCOOH', smiles='CCOO', xyz=self.ccooh_xyz),
                                       ARCSpecies(label='C2H5', smiles='C[CH2]', xyz=self.c2h5_xyz)])
        self.assertEqual(rxn_2.family, 'H_Abstraction')
        self.assertEqual(rxn_2.atom_map[:2], [11, 10])
        self.assertIn(tuple(rxn_2.atom_map[2:5]), itertools.permutations([9, 16, 15]))
        self.assertIn(tuple(rxn_2.atom_map[5:8]), itertools.permutations([12, 13, 14]))
        self.assertEqual(rxn_2.atom_map[8:12], [0, 1, 2, 3])
        self.assertIn(tuple(rxn_2.atom_map[12:15]), itertools.permutations([4, 5, 6]))
        self.assertIn(tuple(rxn_2.atom_map[15:]), itertools.permutations([7, 8]))
        heuristics_2 = HeuristicsAdapter(job_type='tsg',
                                         reactions=[rxn_2],
                                         testing=True,
                                         project='test_1',
                                         project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics_1'),
                                         dihedral_increment=120,
                                         )
        heuristics_2.execute_incore()
        for tsg in rxn_2.ts_species.ts_guesses:
            self.assertEqual(tsg.initial_xyz['symbols'],
                             ('C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'C', 'C', 'O', 'O', 'H', 'H', 'H', 'H', 'H'))

        # reactant_reversed, products_reversed = True, False
        rxn_3 = ARCReaction(r_species=[ARCSpecies(label='CCOOj', smiles='CCO[O]', xyz=self.ccooj_xyz),
                                       ARCSpecies(label='C2H6', smiles='CC', xyz=self.c2h6_xyz)],
                            p_species=[ARCSpecies(label='C2H5', smiles='C[CH2]', xyz=self.c2h5_xyz),
                                       ARCSpecies(label='CCOOH', smiles='CCOO', xyz=self.ccooh_xyz)])
        self.assertEqual(rxn_3.atom_map[:4], [7, 8, 9, 10])
        self.assertIn(tuple(rxn_3.atom_map[4:7]), itertools.permutations([11, 12, 13]))
        self.assertIn(tuple(rxn_3.atom_map[7:9]), itertools.permutations([14, 15]))
        self.assertEqual(rxn_3.atom_map[9:11], [1, 0])
        self.assertIn(tuple(rxn_3.atom_map[11:14]), itertools.permutations([16, 5, 6]))
        self.assertIn(tuple(rxn_3.atom_map[14:]), itertools.permutations([3, 4, 2]))

        heuristics_3 = HeuristicsAdapter(job_type='tsg',
                                         reactions=[rxn_3],
                                         testing=True,
                                         project='test_1',
                                         project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics_1'),
                                         dihedral_increment=120,
                                         )
        heuristics_3.execute_incore()
        for tsg in rxn_3.ts_species.ts_guesses:
            self.assertEqual(tsg.initial_xyz['symbols'],
                             ('C', 'C', 'O', 'O', 'H', 'H', 'H', 'H', 'H', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H'))

        # reactant_reversed, products_reversed = True, True
        rxn_4 = ARCReaction(r_species=[ARCSpecies(label='CCOOj', smiles='CCO[O]', xyz=self.ccooj_xyz),
                                       ARCSpecies(label='C2H6', smiles='CC', xyz=self.c2h6_xyz)],
                            p_species=[ARCSpecies(label='CCOOH', smiles='CCOO', xyz=self.ccooh_xyz),
                                       ARCSpecies(label='C2H5', smiles='C[CH2]', xyz=self.c2h5_xyz)])
        self.assertEqual(rxn_4.atom_map[:4], [0, 1, 2, 3])
        self.assertIn(tuple(rxn_4.atom_map[4:7]), itertools.permutations([4, 5, 6]))
        self.assertIn(tuple(rxn_4.atom_map[7:9]), itertools.permutations([7, 8]))
        self.assertEqual(rxn_4.atom_map[9:11], [11, 10])
        self.assertIn(tuple(rxn_4.atom_map[11:14]), itertools.permutations([9, 15, 16]))
        self.assertIn(tuple(rxn_4.atom_map[14:]), itertools.permutations([12, 13, 14 ]))
        heuristics_4 = HeuristicsAdapter(job_type='tsg',
                                         reactions=[rxn_4],
                                         testing=True,
                                         project='test_1',
                                         project_directory=os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics_1'),
                                         dihedral_increment=120,
                                         )
        heuristics_4.execute_incore()
        for tsg in rxn_4.ts_species.ts_guesses:
            self.assertEqual(tsg.initial_xyz['symbols'],
                             ('C', 'C', 'O', 'O', 'H', 'H', 'H', 'H', 'H', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H'))

    def test_combine_coordinates_with_redundant_atoms(self):
        """Test the combine_coordinates_with_redundant_atoms() function."""
        ts_xyz = combine_coordinates_with_redundant_atoms(
            xyz_1=self.ccooh_xyz,
            xyz_2=self.c2h6_xyz,
            mol_1=ARCSpecies(label='CCOOH', smiles='CCOO', xyz=self.ccooh_xyz).mol,
            mol_2=ARCSpecies(label='C2H6', smiles='CC', xyz=self.c2h6_xyz).mol,
            reactant_2=ARCSpecies(label='C2H5', smiles='C[CH2]', xyz=self.c2h5_xyz),
            h1=9,
            h2=5,
            c=2,
            d=0,
            a2=180,
            d2=None,
            d3=0,
            reactants_reversed=False,
        )
        expected_xyz = {'symbols': ('C', 'C', 'O', 'O', 'H', 'H', 'H', 'H', 'H', 'H', 'C', 'C', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 12, 16, 16, 1, 1, 1, 1, 1, 1, 12, 12, 1, 1, 1, 1, 1),
                        'coords': ((0.8187041630923411, -1.305974629356673, -2.1958802480028368),
                                   (0.8187041630923411, -1.305974629356673, -0.681132252881617),
                                   (0.8187041630923411, 0.04581686905211524, -0.22531432865752898),
                                   (0.818513837528933, -0.03174140807870107, 1.2285438851644308),
                                   (1.6983292424348284, -0.7800904747940467, -2.5815947431771877),
                                   (0.81871196114839, -2.3274935937515515, -2.586251749003749),
                                   (-0.06092771998370783, -0.7800974898360937, -2.5815561835518057),
                                   (1.7113460420860538, -1.8153071614909009, -0.3028337456942676),
                                   (-0.07395075446213972, -1.8153703481853025, -0.30295622775763786),
                                   (-0.2107062743589989, 0.499850734706512, 1.3852370918171815),
                                   (-1.9718315856107542, 1.4854394299684088, 0.2311504747215567),
                                   (-1.366661074542108, 1.096901338454432, 1.5612249706918742),
                                   (-2.9351272524300116, 1.9829815997583418, 0.3778070404504672),
                                   (-2.1325990339431034, 0.6001332666491552, -0.39126549020899803),
                                   (-1.3092655055659, 2.1694913032490764, -0.30744489564843125),
                                   (-2.02923513711407, 0.41285009988656296, 2.099824496568834),
                                   (-1.2058935954739198, 1.9822075052998445, 2.1836409226679843))}
        self.assertTrue(almost_equal_coords(ts_xyz, expected_xyz))

        ts_xyz = combine_coordinates_with_redundant_atoms(xyz_1=self.ccooh_xyz,
                                                          xyz_2=self.c2h6_xyz,
                                                          mol_1=ARCSpecies(label='CCOOH', smiles='CCOO', xyz=self.ccooh_xyz).mol,
                                                          mol_2=ARCSpecies(label='C2H6', smiles='CC', xyz=self.c2h6_xyz).mol,
                                                          reactant_2=ARCSpecies(label='C2H5', smiles='C[CH2]', xyz=self.c2h5_xyz),
                                                          h1=9,
                                                          h2=5,
                                                          c=2,
                                                          d=0,
                                                          a2=150,
                                                          d2=30,
                                                          d3=120,
                                                          reactants_reversed=False,
                                                          )
        expected_xyz = {'symbols': ('C', 'C', 'O', 'O', 'H', 'H', 'H', 'H', 'H', 'H', 'C', 'C', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 12, 16, 16, 1, 1, 1, 1, 1, 1, 12, 12, 1, 1, 1, 1, 1),
                        'coords': ((0.9077118476535074, -1.055592038162869, -2.378138314624377),
                                   (0.9077118476535074, -1.055592038162869, -0.8633903195031574),
                                   (0.9077118476535074, 0.29619946024591925, -0.4075723952790693),
                                   (0.9075215220900994, 0.21864118311510294, 1.0462858185428905),
                                   (1.787336926995995, -0.5297078836002427, -2.763852809798728),
                                   (0.9077196457095563, -2.0771110025577473, -2.7685098156252894),
                                   (0.028079964577458538, -0.5297148986422897, -2.763814250173346),
                                   (1.80035372664722, -1.5649245702970966, -0.4850918123158079),
                                   (0.015056930099026644, -1.5649877569914987, -0.4852142943791782),
                                   (-0.12169858979783255, 0.750233325900316, 1.2029790251956411),
                                   (-2.3703610220276, 0.5257644475934526, 1.7488676094956128),
                                   (-1.3302908291148148, 1.035981385760534, 0.7771557022531046),
                                   (-3.3775212214584185, 0.7638878308103012, 1.3940148403768324),
                                   (-2.234527957629507, 0.984077927652405, 2.732998160422298),
                                   (-2.292191326440104, -0.5597760994377934, 1.8606574488891878),
                                   (-1.408466403673402, 2.1215276573011588, 0.6653621132557062),
                                   (-1.4661238729956745, 0.5776678806782756, -0.2069748398519864))}
        self.assertTrue(almost_equal_coords(ts_xyz, expected_xyz))

    def test_get_new_zmat2_map(self):
        """Test the get_new_zmat_2_map() function."""
        new_map = get_new_zmat_2_map(zmat_1=self.zmat_3,
                                     zmat_2=self.zmat_4,
                                     reactant_2=ARCSpecies(label='C2H5', smiles='C[CH2]', xyz=self.c2h5_xyz),
                                     reactants_reversed=False,
                                     )
        expected_new_map = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 'X10',
                            11: 12, 12: 11, 13: 17, 14: 16, 15: 15, 16: 13, 17: 14}
        self.assertEqual(new_map, expected_new_map)

        new_map = get_new_zmat_2_map(zmat_1=self.zmat_3,
                                     zmat_2=self.zmat_4,
                                     reactant_2=ARCSpecies(label='C2H5', smiles='C[CH2]', xyz=self.c2h5_xyz),
                                     reactants_reversed=True,
                                     )
        expected_new_map = {0: 7, 1: 8, 2: 9, 3: 10, 4: 11, 5: 12, 6: 13, 7: 14, 8: 15, 9: 16, 10: 'X17',
                            11: 1, 12: 0, 13: 6, 14: 5, 15: 4, 16: 2, 17: 3}
        self.assertEqual(new_map, expected_new_map)

        reactant_2 = ARCSpecies(label='CtC[CH]CtC', smiles='C#C[CH]C#C',
                                xyz={'symbols': ('C', 'C', 'C', 'C', 'C', 'H', 'H', 'H'),
                                     'isotopes': (12, 12, 12, 12, 12, 1, 1, 1),
                                     'coords': ((-2.291605883571667, -0.42331822283552906, -0.5890813676244919),
                                                (-1.2473364930399486, 0.10981539119094576, -0.33203134389873684),
                                                (-0.014210927595876454, 0.7422328036476595, -0.027581014832650772),
                                                (1.2434491739534939, 0.09321854939774785, -0.12912903785018146),
                                                (2.308402589136876, -0.453969497537813, -0.2143594496463511),
                                                (-3.216005202211226, -0.9003163297195633, -0.8182367178025766),
                                                (-0.03399884322236979, 1.7757469592667339, 0.2998700214665439),
                                                (3.251305586550735, -0.9434096534101759, -0.2914025307027816))})
        new_map = get_new_zmat_2_map(zmat_1=self.zmat_5,
                                     zmat_2=self.zmat_6,
                                     reactant_2=reactant_2,
                                     reactants_reversed=True,
                                     )
        # To determine if this test fails for atom-mapping related reasons, use the following xyz:
        # xyz_7 = {'coords': ((-0.11052302098955041, -0.5106945989206113, -2.3628726319919022),
        #     (-0.11052302098955041, -0.5106945989206113, -1.16140301180269),
        #     (-0.11052302098955023, -0.5106945989206112, 0.3150305498367847),
        #     (1.2448888490560643, -0.9827789526552368, 0.8404002762169092),
        #     (-0.4375559903969747, 0.8159552435098156, 0.8744100775429131),
        #     (-0.7036838926552011, 1.8955361195204183, 1.3296134184916002),
        #     (-0.11052302098955026, -0.5106945989206114, -3.4285156134952786),
        #     (-1.0248180325342278, -1.3649565013173555, 0.7257981498364177),
        #     (1.4854985838822663, -1.9838179319127962, 0.46442407690321375),
        #     (1.2491645770965545, -1.0250999599192192, 1.9356267705316639),
        #     (-0.939726019056252, 2.853070310535801, 1.733355993511537)),
        # 'isotopes': (12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1),
        # 'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H')}
        # To generate a reaction, and check it's atom mapping!
        # Another mapping option to try is:
        # expected_new_map = {0: 12, 1: 13, 2: 'X24', 3: 14, 4: 15, 5: 16, 6: 'X25', 7: 17, 8: 'X26', 9: 18, 10: 19,
        #                     11: 20, 12: 21, 13: 22, 14: 'X27', 15: 23, 16: 'X28', 17: 2, 18: 3, 19: 1, 21: 4, 23: 0,
        #                     25: 7, 26: 6, 28: 5, 20: 'X8', 22: 'X9', 24: 'X10', 27: 'X11'}
        expected_new_map =  {0: 12, 1: 13, 2: 'X24', 3: 14, 4: 15, 5: 16, 6: 'X25', 7: 17, 8: 'X26', 9: 18, 10: 19,
                             11: 20, 12: 21, 13: 22, 14: 'X27', 15: 23, 16: 'X28', 17: 2, 18: 1, 19: 3, 21: 0, 23: 4,
                             25: 5, 26: 6, 28: 7, 20: 'X8', 22: 'X9', 24: 'X10', 27: 'X11'}

        self.assertEqual(new_map, expected_new_map)

    def test_get_new_map_based_on_zmat_1(self):
        """Test the get_new_map_based_on_zmat_1() function."""
        new_map = get_new_map_based_on_zmat_1(zmat_1=self.zmat_1, zmat_2=self.zmat_2, reactants_reversed=False)
        self.assertEqual(new_map, {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9})

        new_map = get_new_map_based_on_zmat_1(zmat_1=self.zmat_1, zmat_2=self.zmat_2, reactants_reversed=True)
        self.assertEqual(new_map, {0: 7, 1: 8, 2: 9, 3: 10, 4: 11, 5: 12, 6: 13, 7: 14, 8: 15, 9: 16})  # +7

        new_map = get_new_map_based_on_zmat_1(zmat_1=self.zmat_2, zmat_2=self.zmat_1, reactants_reversed=False)
        self.assertEqual(new_map, {0: 3, 1: 0, 2: 1, 3: 2, 4: 4, 5: 5, 6: 6, 7: 7})

        new_map = get_new_map_based_on_zmat_1(zmat_1=self.zmat_2, zmat_2=self.zmat_1, reactants_reversed=True)
        self.assertEqual(new_map, {0: 12, 1: 9, 2: 10, 3: 11, 4: 13, 5: 14, 6: 15, 7: 16})  # +9

        new_map = get_new_map_based_on_zmat_1(zmat_1=self.zmat_3, zmat_2=self.zmat_4, reactants_reversed=False)
        self.assertEqual(new_map, {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 'X10'})

        new_map = get_new_map_based_on_zmat_1(zmat_1=self.zmat_3, zmat_2=self.zmat_4, reactants_reversed=True)
        self.assertEqual(new_map, {0: 7, 1: 8, 2: 9, 3: 10, 4: 11, 5: 12, 6: 13, 7: 14, 8: 15, 9: 16, 10: 'X17'})  # +7

        new_map = get_new_map_based_on_zmat_1(zmat_1=self.zmat_4, zmat_2=self.zmat_3, reactants_reversed=False)
        self.assertEqual(new_map, {0: 2, 1: 0, 2: 1, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7})

        new_map = get_new_map_based_on_zmat_1(zmat_1=self.zmat_4, zmat_2=self.zmat_3, reactants_reversed=True)
        self.assertEqual(new_map, {0: 12, 1: 10, 2: 11, 3: 13, 4: 14, 5: 15, 6: 16, 7: 17})  # +10

        new_map = get_new_map_based_on_zmat_1(zmat_1=self.zmat_5, zmat_2=self.zmat_6, reactants_reversed=False)
        self.assertEqual(new_map, {0: 0, 1: 1, 2: 'X12', 3: 2, 4: 3, 5: 4, 6: 'X13', 7: 5, 8: 'X14', 9: 6, 10: 7, 11: 8,
                                   12: 9, 13: 10, 14: 'X15', 15: 11, 16: 'X16'})

        new_map = get_new_map_based_on_zmat_1(zmat_1=self.zmat_5, zmat_2=self.zmat_6, reactants_reversed=True)
        self.assertEqual(new_map, {0: 12, 1: 13, 2: 'X24', 3: 14, 4: 15, 5: 16, 6: 'X25', 7: 17, 8: 'X26', 9: 18,
                                   10: 19, 11: 20, 12: 21, 13: 22, 14: 'X27', 15: 23, 16: 'X28'})  # +12

        new_map = get_new_map_based_on_zmat_1(zmat_1=self.zmat_6, zmat_2=self.zmat_5, reactants_reversed=False)
        self.assertEqual(new_map, {0: 7, 1: 2, 2: 1, 3: 3, 4: 'X9', 5: 0, 6: 'X10', 7: 4, 8: 'X11', 9: 5, 10: 6,
                                   11: 'X12', 12: 8})

        new_map = get_new_map_based_on_zmat_1(zmat_1=self.zmat_6, zmat_2=self.zmat_5, reactants_reversed=True)
        self.assertEqual(new_map, {0: 23, 1: 18, 2: 17, 3: 19, 4: 'X25', 5: 16, 6: 'X26', 7: 20, 8: 'X27', 9: 21,
                                   10: 22, 11: 'X28', 12: 24})  # +16

    def test_generate_the_two_constrained_zmats(self):
        """Test the generate_the_two_constrained_zmats() function."""
        zmat_1, zmat_2 = generate_the_two_constrained_zmats(xyz_1=self.ccooh_xyz,
                                                            xyz_2=self.c2h6_xyz,
                                                            mol_1=ARCSpecies(label='CCOOH', smiles='CCOO', xyz=self.ccooh_xyz).mol,
                                                            mol_2=ARCSpecies(label='C2H6', smiles='CC', xyz=self.c2h6_xyz).mol,
                                                            h1=9,
                                                            h2=3,
                                                            a=3,
                                                            b=0,
                                                            c=2,
                                                            d=1,
                                                            )
        self.assertTrue(_compare_zmats(zmat_1, self.zmat_1, r_tol=0.01, a_tol=0.01, d_tol=0.01))
        self.assertTrue(_compare_zmats(zmat_2, self.zmat_2, r_tol=0.01, a_tol=0.01, d_tol=0.01))

        zmat_1, zmat_2 = generate_the_two_constrained_zmats(xyz_1=self.ch4_xyz,
                                                            xyz_2=self.h2_xyz,
                                                            mol_1=self.ch4_mol,
                                                            mol_2=self.h2_mol,
                                                            h1=2,
                                                            h2=0,
                                                            a=0,
                                                            b=1,
                                                            c=None,
                                                            d=None,
                                                            )
        expected_zmat_1 = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_0', 'A_2_0_1', None),
                                      ('R_3_0', 'A_3_0_1', 'D_3_0_1_2'), ('R_4_0', 'A_4_0_1', 'D_4_0_1_3')),  # R_4_0
                           'vars': {'R_1_0': 1.092199370793132, 'R_2_0': 1.0921994253661749,
                                    'A_2_0_1': 109.47122156965536, 'R_3_0': 1.092199370793132,
                                    'A_3_0_1': 109.47122278898594, 'D_3_0_1_2': 120.00000135665665,
                                    'R_4_0': 1.0921994253661749, 'A_4_0_1': 109.47121850997881,
                                    'D_4_0_1_3': 120.00000068116007},
                           'map': {0: 0, 1: 1, 2: 3, 3: 4, 4: 2}}
        expected_zmat_2 = {'symbols': ('H', 'H'), 'coords': ((None, None, None), ('R_1_0', None, None)),  # R_1_0
                           'vars': {'R_1_0': 0.7473099866382779}, 'map': {0: 0, 1: 1}}
        self.assertTrue(_compare_zmats(zmat_1, expected_zmat_1, r_tol=0.01, a_tol=0.01, d_tol=0.01))
        self.assertTrue(_compare_zmats(zmat_2, expected_zmat_2, r_tol=0.01, a_tol=0.01, d_tol=0.01))

        zmat_1, zmat_2 = generate_the_two_constrained_zmats(xyz_1=self.n2h4_xyz,
                                                            xyz_2=self.nh3_xyz,
                                                            mol_1=self.n2h4_mol,
                                                            mol_2=self.nh3_mol,
                                                            h1=2,
                                                            h2=1,
                                                            a=0,
                                                            b=0,
                                                            c=1,
                                                            d=None,
                                                            )
        expected_zmat_1 = {'symbols': ('N', 'N', 'H', 'H', 'H', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),  # A_2_1_0
                                      ('R_3_1', 'A_3_1_0', 'D_3_1_0_2'), ('R_4_0', 'A_4_0_1', 'D_4_0_1_3'),
                                      ('R_5_0', 'A_5_0_1', 'D_5_0_1_4')),
                           'vars': {'R_1_0': 1.4346996064735746, 'R_2_1': 1.023964433208832,
                                    'A_2_1_0': 113.24587551512498, 'R_3_1': 1.0248853619364922,
                                    'A_3_1_0': 111.58697299955385, 'D_3_1_0_2': 240.07077704046898,
                                    'R_4_0': 1.0239645496281908, 'A_4_0_1': 113.24586240810203,
                                    'D_4_0_1_3': 284.3887260014507, 'R_5_0': 1.024885187464345,
                                    'A_5_0_1': 111.5869758085818, 'D_5_0_1_4': 240.07079516383422},
                           'map': {0: 1, 1: 0, 2: 2, 3: 3, 4: 4, 5: 5}}
        expected_zmat_2 = {'symbols': ('H', 'N', 'H', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),  # R_1_0
                                      ('R_3_1', 'A_3_1_0', 'D_3_1_0_2')),
                           'vars': {'R_1_0': 1.0190000355938578, 'R_2_1': 1.0189999771005855,
                                    'A_2_1_0': 105.99799962283844, 'R_3_1': 1.0190000940871264,
                                    'A_3_1_0': 105.99799852287603, 'D_3_1_0_2': 112.36218461898632},
                           'map': {0: 1, 1: 0, 2: 2, 3: 3}}
        self.assertTrue(_compare_zmats(zmat_1, expected_zmat_1, r_tol=0.01, a_tol=0.01, d_tol=0.01))
        self.assertTrue(_compare_zmats(zmat_2, expected_zmat_2, r_tol=0.01, a_tol=0.01, d_tol=0.01))

        zmat_1, zmat_2 = generate_the_two_constrained_zmats(xyz_2=self.n2h4_xyz,
                                                            xyz_1=self.nh3_xyz,
                                                            mol_2=self.n2h4_mol,
                                                            mol_1=self.nh3_mol,
                                                            h2=2,
                                                            h1=1,
                                                            b=0,
                                                            a=0,
                                                            d=1,
                                                            c=None,
                                                            )
        expected_zmat_1 = {'symbols': ('N', 'H', 'H', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_0', 'A_2_0_1', None),
                                      ('R_3_0', 'A_3_0_1', 'D_3_0_1_2')),
                           'vars': {'R_1_0': 1.0189999771005855, 'R_2_0': 1.0190000940871264,
                                    'A_2_0_1': 105.9980011877756, 'R_3_0': 1.0190000355938578,  # R_3_0
                                    'A_3_0_1': 105.99799962283844, 'D_3_0_1_2': 112.36217876566015},
                           'map': {0: 0, 1: 2, 2: 3, 3: 1}}
        expected_zmat_2 = {'symbols': ('H', 'N', 'N', 'H', 'H', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),  # A_2_1_0
                                      ('R_3_1', 'A_3_1_2', 'D_3_1_2_0'), ('R_4_2', 'A_4_2_1', 'D_4_2_1_3'),
                                      ('R_5_2', 'A_5_2_1', 'D_5_2_1_4')),
                           'vars': {'R_1_0': 1.023964433208832, 'R_2_1': 1.4346996064735746,
                                    'A_2_1_0': 113.24587551512498, 'R_3_1': 1.0248853619364922,
                                    'A_3_1_2': 111.58697299955385, 'D_3_1_2_0': 240.07077704046898,
                                    'R_4_2': 1.0239645496281908, 'A_4_2_1': 113.24586240810203,
                                    'D_4_2_1_3': 284.3887260014507, 'R_5_2': 1.024885187464345,
                                    'A_5_2_1': 111.5869758085818, 'D_5_2_1_4': 240.07079516383422},
                           'map': {0: 2, 1: 0, 2: 1, 3: 3, 4: 4, 5: 5}}
        self.assertTrue(_compare_zmats(zmat_1, expected_zmat_1, r_tol=0.01, a_tol=0.01, d_tol=0.01))
        self.assertTrue(_compare_zmats(zmat_2, expected_zmat_2, r_tol=0.01, a_tol=0.01, d_tol=0.01))

        zmat_1, zmat_2 = generate_the_two_constrained_zmats(xyz_1=self.ch3ch2oh.get_xyz(),
                                                            xyz_2=self.ch3ooh.get_xyz(),
                                                            mol_1=self.ch3ch2oh.mol,
                                                            mol_2=self.ch3ooh.mol,
                                                            h1=8,
                                                            a=2,
                                                            c=1,
                                                            h2=6,
                                                            b=2,
                                                            d=1,
                                                            )
        expected_zmat_1 = {'symbols': ('C', 'C', 'O', 'H', 'H', 'H', 'H', 'H', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                      ('R_3_0', 'A_3_0_1', 'D_3_0_1_2'), ('R_4_0', 'A_4_0_1', 'D_4_0_1_3'),
                                      ('R_5_0', 'A_5_0_1', 'D_5_0_1_4'), ('R_6_1', 'A_6_1_0', 'D_6_1_0_5'),
                                      ('R_7_1', 'A_7_1_0', 'D_7_1_0_6'), ('R_8_2', 'A_8_2_1', 'D_8_2_1_0')),  # A_8_2_1
                           'vars': {'R_1_0': 1.5137276325416074, 'R_2_1': 1.4197372463410514,
                                    'A_2_1_0': 109.01303538097567, 'R_3_0': 1.0950337097344136,
                                    'A_3_0_1': 110.63258593497066, 'D_3_0_1_2': 59.12026293645304,
                                    'R_4_0': 1.0935594120185885, 'A_4_0_1': 110.92258531860486,
                                    'D_4_0_1_3': 120.87939658650379, 'R_5_0': 1.095033981893329,
                                    'A_5_0_1': 110.63254968567193, 'D_5_0_1_4': 120.8793955156551,
                                    'R_6_1': 1.0941026391623285, 'A_6_1_0': 110.5440977183771,
                                    'D_6_1_0_5': 181.34310124526917, 'R_7_1': 1.0941023667717409,
                                    'A_7_1_0': 110.54410081124645, 'D_7_1_0_6': 239.07189759901027,
                                    'R_8_2': 0.9723850776119742, 'A_8_2_1': 107.06334992092434,
                                    'D_8_2_1_0': 179.99951584936258},
                           'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8}}
        expected_zmat_2 = {'symbols': ('H', 'O', 'O', 'C', 'H', 'H', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),  # A_2_1_0
                                      ('R_3_2', 'A_3_2_1', 'D_3_2_1_0'), ('R_4_3', 'A_4_3_2', 'D_4_3_2_1'),
                                      ('R_5_3', 'A_5_3_2', 'D_5_3_2_4'), ('R_6_3', 'A_6_3_2', 'D_6_3_2_5')),
                           'vars': {'R_1_0': 0.9741406737537205, 'R_2_1': 1.4557553347542735,
                                    'A_2_1_0': 96.30924284405943, 'R_3_2': 1.4223004218216138,
                                    'A_3_2_1': 105.53988198924208, 'D_3_2_1_0': 242.22744613021646,
                                    'R_4_3': 1.093821659465454, 'A_4_3_2': 110.03248558165065,
                                    'D_4_3_2_1': 60.84271231265853, 'R_5_3': 1.0938084178037755,
                                    'A_5_3_2': 110.03299489037433, 'D_5_3_2_4': 238.4134975536592,
                                    'R_6_3': 1.0928700313199922, 'A_6_3_2': 108.55511996651099,
                                    'D_6_3_2_5': 240.7911024479184},
                           'map': {0: 6, 1: 2, 2: 1, 3: 0, 4: 3, 5: 4, 6: 5}}
        self.assertTrue(_compare_zmats(zmat_1, expected_zmat_1, r_tol=0.01, a_tol=0.01, d_tol=0.01))
        self.assertTrue(_compare_zmats(zmat_2, expected_zmat_2, r_tol=0.01, a_tol=0.01, d_tol=0.01))

        zmat_1, zmat_2 = generate_the_two_constrained_zmats(xyz_2=self.ch3ch2oh.get_xyz(),
                                                            xyz_1=self.ch3ooh.get_xyz(),
                                                            mol_2=self.ch3ch2oh.mol,
                                                            mol_1=self.ch3ooh.mol,
                                                            h2=8,
                                                            b=2,
                                                            d=1,
                                                            h1=6,
                                                            a=2,
                                                            c=1,
                                                            )
        expected_zmat_1 = {'symbols': ('C', 'O', 'O', 'H', 'H', 'H', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                      ('R_3_0', 'A_3_0_1', 'D_3_0_1_2'), ('R_4_0', 'A_4_0_1', 'D_4_0_1_3'),
                                      ('R_5_0', 'A_5_0_1', 'D_5_0_1_4'), ('R_6_2', 'A_6_2_1', 'D_6_2_1_0')),  # A_6_2_1
                           'vars': {'R_1_0': 1.4223004218216138, 'R_2_1': 1.4557553347542735,
                                    'A_2_1_0': 105.53988198924208, 'R_3_0': 1.093821659465454,
                                    'A_3_0_1': 110.03248558165065, 'D_3_0_1_2': 60.84271231265853,
                                    'R_4_0': 1.0938084178037755, 'A_4_0_1': 110.03299489037433,
                                    'D_4_0_1_3': 238.4134975536592, 'R_5_0': 1.0928700313199922,
                                    'A_5_0_1': 108.55511996651099, 'D_5_0_1_4': 240.7911024479184,
                                    'R_6_2': 0.9741406737537205, 'A_6_2_1': 96.30924284405943,
                                    'D_6_2_1_0': 242.22744613021646},
                           'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6}}
        expected_zmat_2 = {'symbols': ('H', 'O', 'C', 'C', 'H', 'H', 'H', 'H', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),  # A_2_1_0
                                      ('R_3_2', 'A_3_2_1', 'D_3_2_1_0'), ('R_4_3', 'A_4_3_2', 'D_4_3_2_1'),
                                      ('R_5_3', 'A_5_3_2', 'D_5_3_2_4'), ('R_6_3', 'A_6_3_2', 'D_6_3_2_5'),
                                      ('R_7_2', 'A_7_2_3', 'D_7_2_3_6'), ('R_8_2', 'A_8_2_3', 'D_8_2_3_7')),
                           'vars': {'R_1_0': 0.9723850776119742, 'R_2_1': 1.4197372463410514,
                                    'A_2_1_0': 107.06334992092434, 'R_3_2': 1.5137276325416074,
                                    'A_3_2_1': 109.01303538097567, 'D_3_2_1_0': 179.99951584936258,
                                    'R_4_3': 1.0950337097344136, 'A_4_3_2': 110.63258593497066,
                                    'D_4_3_2_1': 59.12026293645304, 'R_5_3': 1.0935594120185885,
                                    'A_5_3_2': 110.92258531860486, 'D_5_3_2_4': 120.87939658650379,
                                    'R_6_3': 1.095033981893329, 'A_6_3_2': 110.63254968567193,
                                    'D_6_3_2_5': 120.8793955156551, 'R_7_2': 1.0941026391623285,
                                    'A_7_2_3': 110.5440977183771, 'D_7_2_3_6': 181.34310124526917,
                                    'R_8_2': 1.0941023667717409, 'A_8_2_3': 110.54410081124645,
                                    'D_8_2_3_7': 239.07189759901027},
                           'map': {0: 8, 1: 2, 2: 1, 3: 0, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7}}
        self.assertTrue(_compare_zmats(zmat_1, expected_zmat_1, r_tol=0.01, a_tol=0.01, d_tol=0.01))
        self.assertTrue(_compare_zmats(zmat_2, expected_zmat_2, r_tol=0.01, a_tol=0.01, d_tol=0.01))

        zmat_1, zmat_2 = generate_the_two_constrained_zmats(xyz_1=self.ch3ch2oh.get_xyz(),
                                                            xyz_2=self.ch3ooh.get_xyz(),
                                                            mol_1=self.ch3ch2oh.mol,
                                                            mol_2=self.ch3ooh.mol,
                                                            h1=7,
                                                            a=4,
                                                            c=2,
                                                            h2=3,
                                                            b=0,
                                                            d=1,
                                                            )
        expected_zmat_1 = {'symbols': ('C', 'C', 'O', 'H', 'H', 'H', 'H', 'H', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                      ('R_3_0', 'A_3_0_1', 'D_3_0_1_2'), ('R_4_0', 'A_4_0_1', 'D_4_0_1_3'),
                                      ('R_5_0', 'A_5_0_1', 'D_5_0_1_4'), ('R_6_1', 'A_6_1_0', 'D_6_1_0_5'),
                                      ('R_7_4', 'A_7_4_2', 'D_7_4_2_1'), ('R_8_2', 'A_8_2_1', 'D_8_2_1_0')),  # A_7_4_2
                           'vars': {'R_1_0': 1.5137276325416074, 'R_2_1': 1.4197372463410514,
                                    'A_2_1_0': 109.01303538097567, 'R_3_0': 1.0950337097344136,
                                    'A_3_0_1': 110.63258593497066, 'D_3_0_1_2': 59.12026293645304,
                                    'R_4_0': 1.0935594120185885, 'A_4_0_1': 110.92258531860486,
                                    'D_4_0_1_3': 120.87939658650379, 'R_5_0': 1.095033981893329,
                                    'A_5_0_1': 110.63254968567193, 'D_5_0_1_4': 120.8793955156551,
                                    'R_6_1': 1.0941026391623285, 'A_6_1_0': 110.5440977183771,
                                    'D_6_1_0_5': 181.34310124526917, 'R_7_4': 2.509397582146114,
                                    'A_7_4_2': 37.75756623354705, 'D_7_4_2_1': 35.45850610925192,
                                    'R_8_2': 0.9723850776119742, 'A_8_2_1': 107.06334992092434,
                                    'D_8_2_1_0': 179.99951584936258},
                           'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8}}
        expected_zmat_2 = {'symbols': ('H', 'C', 'O', 'O', 'H', 'H', 'H'),
                           'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),  # A_2_1_0
                                      ('R_3_2', 'A_3_2_1', 'D_3_2_1_0'), ('R_4_1', 'A_4_1_2', 'D_4_1_2_3'),
                                      ('R_5_1', 'A_5_1_2', 'D_5_1_2_4'), ('R_6_3', 'A_6_3_2', 'D_6_3_2_1')),
                           'vars': {'R_1_0': 1.093821659465454, 'R_2_1': 1.4223004218216138,
                                    'A_2_1_0': 110.03248558165065, 'R_3_2': 1.4557553347542735,
                                    'A_3_2_1': 105.53988198924208, 'D_3_2_1_0': 60.84271231265853,
                                    'R_4_1': 1.0938084178037755, 'A_4_1_2': 110.03299489037433,
                                    'D_4_1_2_3': 299.2562112207745, 'R_5_1': 1.0928700313199922,
                                    'A_5_1_2': 108.55511996651099, 'D_5_1_2_4': 240.7911024479184,
                                    'R_6_3': 0.9741406737537205, 'A_6_3_2': 96.30924284405943,
                                    'D_6_3_2_1': 242.22744613021646},
                           'map': {0: 3, 1: 0, 2: 1, 3: 2, 4: 4, 5: 5, 6: 6}}
        self.assertTrue(_compare_zmats(zmat_1, expected_zmat_1, r_tol=0.01, a_tol=0.01, d_tol=0.01))
        self.assertTrue(_compare_zmats(zmat_2, expected_zmat_2, r_tol=0.01, a_tol=0.01, d_tol=0.01))

    def test_stretch_zmat_bond(self):
        """Test the stretch_zmat_bond function."""
        zmat2_copy = copy.deepcopy(self.zmat_2)
        stretch_zmat_bond(zmat=zmat2_copy, indices=(1, 0), stretch=1.5)
        self.assertEqual(zmat2_copy['vars']['R_2_1'], self.zmat_2['vars']['R_2_1'] * 1.5)

    def test_determine_glue_params(self):
        """Test the determine_glue_params() function."""
        zmat_0 = {'symbols': ('O', 'H'), 'coords': ((None, None, None), ('R_1_0', None, None)),
                  'vars': {'R_1_0': 1.1644188088546794}, 'map': {0: 0, 1: 1}}
        param_a2, param_d2, param_d3 = determine_glue_params(zmat=zmat_0,
                                                             add_dummy=False,
                                                             h1=0,
                                                             a=1,
                                                             c=None,
                                                             d=None,
                                                             )
        self.assertEqual(param_a2, 'A_2_0_1')  # B-H-A
        self.assertEqual(param_d2, None)  # B-H-A-C
        self.assertEqual(param_d3, None)  # D-B-H-A

        # None linear
        zmat_1 = {'symbols': ('H', 'N', 'C', 'H', 'H', 'H', 'H'),
                  'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                             ('R_3_2', 'A_3_2_1', 'D_3_2_1_0'), ('R_4_2', 'A_4_2_1', 'D_4_2_1_3'),
                             ('R_5_2', 'A_5_2_1', 'D_5_2_1_4'), ('R_6_1', 'A_6_1_2', 'D_6_1_2_5')),
                  'vars': {'R_1_0': 1.019169359544101, 'R_2_1': 1.451965854148702, 'A_2_1_0': 109.41187480598941,
                           'R_3_2': 1.0935188594180785, 'A_3_2_1': 110.20496026605478,
                           'D_3_2_1_0': 60.83821034525936, 'R_4_2': 1.0935188594180785,
                           'A_4_2_1': 110.20495933616156, 'D_4_2_1_3': 240.4644263689792,
                           'R_5_2': 1.0936965384360282, 'A_5_2_1': 110.59878027260544,
                           'D_5_2_1_4': 239.76779188408136, 'R_6_1': 1.0191693010605467,
                           'A_6_1_2': 109.41187816450345, 'D_6_1_2_5': 65.17113681053117},
                  'map': {0: 5, 1: 1, 2: 0, 3: 2, 4: 3, 5: 4, 6: 6}}
        param_a2, param_d2, param_d3 = determine_glue_params(zmat=zmat_1,
                                                             add_dummy=False,
                                                             h1=5,
                                                             a=1,
                                                             c=0,
                                                             d=1,
                                                             )
        self.assertEqual(param_a2, 'A_7_0_1')  # B-H-A
        self.assertEqual(param_d2, 'D_7_0_1_2')  # B-H-A-C
        self.assertEqual(param_d3, 'D_8_7_0_1')  # D-B-H-A

        # Linear
        param_a2, param_d2, param_d3 = determine_glue_params(zmat=zmat_1,
                                                             add_dummy=True,
                                                             h1=5,
                                                             a=1,
                                                             c=0,
                                                             d=1,
                                                             )
        self.assertEqual(param_a2, 'A_8_0_1')  # B-H-A
        self.assertEqual(param_d2, 'D_8_0_7_1')  # B-H-X-A
        self.assertEqual(param_d3, 'D_9_8_1_2')  # D-B-A-C/X

        zmat_1_copy = copy.deepcopy(self.zmat_1)
        param_a2, param_d2, param_d3 = determine_glue_params(zmat=zmat_1_copy,
                                                             add_dummy=True,
                                                             h1=9,
                                                             a=3,
                                                             c=2,
                                                             d=0,
                                                             )
        self.assertEqual(param_a2, 'A_11_9_3')
        self.assertEqual(param_d2, 'D_11_9_10_3')
        self.assertEqual(param_d3, 'D_12_11_3_2')
        self.assertEqual(zmat_1_copy['symbols'][-1], 'X')
        self.assertEqual(zmat_1_copy['coords'][-1], ('RX_10_9', 'AX_10_9_3', 'DX_10_9_3_2'))
        self.assertEqual(zmat_1_copy['vars']['RX_10_9'], 1.0)
        self.assertEqual(zmat_1_copy['vars']['AX_10_9_3'], 90)
        self.assertEqual(zmat_1_copy['vars']['DX_10_9_3_2'], 0)
        self.assertEqual(zmat_1_copy['map'][10], 'X10')
        expected_xyz_1 = {'symbols': ('C', 'C', 'O', 'O', 'H', 'H', 'H', 'H', 'H', 'H', 'X'),
                          'isotopes': (12, 12, 16, 16, 1, 1, 1, 1, 1, 1, None),
                          'coords': ((0.01398594476849108, -0.6889055930112338, -1.784376061009113),
                                     (0.01398594476849108, -0.6889055930112338, -0.26962806588789334),
                                     (0.01398594476849108, 0.6628859053975544, 0.18618985833619472),
                                     (0.013795619205083086, 0.5853276282667381, 1.6400480721581545),
                                     (0.8936110241109786, -0.1630214384486075, -2.1700905561834642),
                                     (0.013993742824539971, -1.7104245574061123, -2.174747562010025),
                                     (-0.8656459383075578, -0.16302845349065453, -2.170051996558082),
                                     (0.9066278741353695, -1.1982381538878737, 0.10867044129945613),
                                     (-0.8786689727859842, -1.1983013118398729, 0.10854795923608584),
                                     (-0.8438878073681937, 1.028321080587749, 1.77062574436878),
                                     (-0.9409710712603131, 1.1321270125843694, 0.7807776912038682))}
        self.assertTrue(almost_equal_coords(zmat_to_xyz(zmat_1_copy, keep_dummy=True), expected_xyz_1))

        zmat_2 = {'symbols': ('C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                  'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                             ('R_3_1', 'A_3_1_2', 'D_3_1_2_0'), ('R_4_1', 'A_4_1_2', 'D_4_1_2_3'),
                             ('R_5_2', 'A_5_2_1', 'D_5_2_1_4'), ('R_6_0', 'A_6_0_1', 'D_6_0_1_2'),
                             ('R_7_2', 'A_7_2_1', 'D_7_2_1_6'), ('R_8_2', 'A_8_2_1', 'D_8_2_1_7'),
                             ('R_9_0', 'A_9_0_1', 'D_9_0_1_2'), ('R_10_0', 'A_10_0_1', 'D_10_0_1_2')),
                  'vars': {'R_1_0': 1.538597152766632, 'R_2_1': 1.538597152766632, 'A_2_1_0': 112.21956716174662,
                           'R_3_1': 1.1067875520527994, 'A_3_1_2': 109.48164208764113, 'D_3_1_2_0': 121.77882792718154,
                           'R_4_1': 1.1067875520527994, 'A_4_1_2': 109.48164208764113, 'D_4_1_2_3': 116.44234414563692,
                           'R_5_2': 1.325576275438579, 'A_5_2_1': 111.50202139070583, 'D_5_2_1_4': 58.22117207281846,
                           'R_6_0': 1.1046468961988158, 'A_6_0_1': 111.50202139070583, 'D_6_0_1_2': 180.0,
                           'R_7_2': 1.1059615583516615, 'A_7_2_1': 110.8283376252455, 'D_7_2_1_6': 300.2088700889345,
                           'R_8_2': 1.1059615583516615, 'A_8_2_1': 110.8283376252455, 'D_8_2_1_7': 119.58225745206313,
                           'R_9_0': 1.1059615583516615, 'A_9_0_1': 110.8283376252455, 'D_9_0_1_2': 300.2088700889345,
                           'R_10_0': 1.1059615583516615, 'A_10_0_1': 110.8283376252455, 'D_10_0_1_2': 59.79112991106552},
                  'map': {0: 2, 1: 0, 2: 1, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}}
        param_a2, param_d2, param_d3 = determine_glue_params(zmat=zmat_2,
                                                             add_dummy=False,
                                                             h1=1,
                                                             a=5,
                                                             c=0,
                                                             d=1,
                                                             )
        self.assertEqual(param_a2, 'A_11_2_5')
        self.assertEqual(param_d2, 'D_11_2_5_1')
        self.assertEqual(param_d3, 'D_12_11_2_5')

    def test_get_modified_params_from_zmat_2(self):
        """Test the get_modified_params_from_zmat_2() function."""
        zmat_1 = {'symbols': ('C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'X'),
                  'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_0', 'A_2_0_1', None),
                             ('R_3_0', 'A_3_0_1', 'D_3_0_1_2'), ('R_4_1', 'A_4_1_0', 'D_4_1_0_3'),
                             ('R_5_1', 'A_5_1_0', 'D_5_1_0_4'), ('R_6_1', 'A_6_1_0', 'D_6_1_0_5'),
                             ('R_7_0', 'A_7_0_1', 'D_7_0_1_6'), ('RX_8_7', 'AX_8_7_0', 'DX_8_7_0_1')),
                  'vars': {'R_1_0': 1.5120487296562577, 'R_2_0': 1.0940775789443724, 'A_2_0_1': 110.56801921096591,
                           'R_3_0': 1.0940817193677925, 'A_3_0_1': 110.56754686774481, 'D_3_0_1_2': 119.99910067703652,
                           'R_4_1': 1.0940725668318991, 'A_4_1_0': 110.56890700195424, 'D_4_1_0_3': 59.99971758419434,
                           'R_5_1': 1.0940840619688397, 'A_5_1_0': 110.56790845138725, 'D_5_1_0_4': 239.99905123159166,
                           'R_6_1': 1.0940817193677925, 'A_6_1_0': 110.56754686774481, 'D_6_1_0_5': 240.00122783407815,
                           'R_7_0': 1.3128870801982788, 'A_7_0_1': 110.56890700195424, 'D_7_0_1_6': 300.00028241580566,
                           'RX_8_7': 1.0, 'AX_8_7_0': 90.0, 'DX_8_7_0_1': 0},
                  'map': {0: 0, 1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 2, 8: 'X8'}}
        zmat_2 = {'symbols': ('H', 'O', 'O', 'C', 'C', 'H', 'H', 'H', 'H', 'H'),
                  'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                             ('R_3_2', 'A_3_2_1', 'D_3_2_1_0'), ('R_4_3', 'A_4_3_2', 'D_4_3_2_1'),
                             ('R_5_4', 'A_5_4_3', 'D_5_4_3_2'), ('R_6_4', 'A_6_4_3', 'D_6_4_3_5'),
                             ('R_7_4', 'A_7_4_3', 'D_7_4_3_6'), ('R_8_3', 'A_8_3_4', 'D_8_3_4_7'),
                             ('R_9_3', 'A_9_3_4', 'D_9_3_4_8')),
                  'vars': {'R_1_0': 1.1689469645782498, 'R_2_1': 1.4559254886404387, 'A_2_1_0': 96.30065819269021,
                           'R_3_2': 1.4265728986680748, 'A_3_2_1': 105.58023544826183, 'D_3_2_1_0': 242.3527063196313,
                           'R_4_3': 1.5147479951212197, 'A_4_3_2': 108.63387152978416, 'D_4_3_2_1': 179.9922243050821,
                           'R_5_4': 1.0950205915944824, 'A_5_4_3': 110.62463321031589, 'D_5_4_3_2': 59.1268942923763,
                           'R_6_4': 1.093567969297245, 'A_6_4_3': 110.91425998596507, 'D_6_4_3_5': 120.87266977773987,
                           'R_7_4': 1.0950091062890002, 'A_7_4_3': 110.62270362433773, 'D_7_4_3_6': 120.87301274044218,
                           'R_8_3': 1.0951433842986755, 'A_8_3_4': 110.20822115119915, 'D_8_3_4_7': 181.16392677464265,
                           'R_9_3': 1.0951410439636102, 'A_9_3_4': 110.20143800025897, 'D_9_3_4_8': 239.4199964284852},
                  'map': {0: 9, 1: 3, 2: 2, 3: 1, 4: 0, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8}}
        new_symbols, new_coords, new_vars, new_map = \
            get_modified_params_from_zmat_2(zmat_1=zmat_1,
                                            zmat_2=zmat_2,
                                            reactant_2=ARCSpecies(label='CCOOj', smiles='CCO[O]', xyz=self.ccooj_xyz),
                                            add_dummy=True,
                                            glue_params=('A_9_7_8', 'D_9_7_8_0', 'D_10_9_7_0'),
                                            h1=2,
                                            a=0,
                                            c=1,
                                            a2=150,
                                            d2=0,
                                            d3=120,
                                            )
        expected_new_symbols = ('C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'X', 'O', 'O', 'C', 'C', 'H', 'H', 'H', 'H', 'H')
        expected_new_coords = (
            (None, None, None), ('R_1_0', None, None), ('R_2_0', 'A_2_0_1', None), ('R_3_0', 'A_3_0_1', 'D_3_0_1_2'),
            ('R_4_1', 'A_4_1_0', 'D_4_1_0_3'), ('R_5_1', 'A_5_1_0', 'D_5_1_0_4'), ('R_6_1', 'A_6_1_0', 'D_6_1_0_5'),
            ('R_7_0', 'A_7_0_1', 'D_7_0_1_6'), ('RX_8_7', 'AX_8_7_0', 'DX_8_7_0_1'), ('R_9_2', 'A_9_7_8', 'D_9_7_8_0'),
            ('R_10_9', 'A_10_9_0', 'D_10_9_7_0'), ('R_11_10', 'A_11_10_9', 'D_11_10_9_8'),
            ('R_12_11', 'A_12_11_10', 'D_12_11_10_9'), ('R_13_12', 'A_13_12_11', 'D_13_12_11_10'),
            ('R_14_12', 'A_14_12_11', 'D_14_12_11_13'), ('R_15_12', 'A_15_12_11', 'D_15_12_11_14'),
            ('R_16_11', 'A_16_11_12', 'D_16_11_12_15'), ('R_17_11', 'A_17_11_12', 'D_17_11_12_16'))
        expected_new_vars = {
            'R_1_0': 1.5120487296562577, 'R_2_0': 1.0940775789443724, 'A_2_0_1': 110.56801921096591,
            'R_3_0': 1.0940817193677925, 'A_3_0_1': 110.56754686774481, 'D_3_0_1_2': 119.99910067703652,
            'R_4_1': 1.0940725668318991, 'A_4_1_0': 110.56890700195424, 'D_4_1_0_3': 59.99971758419434,
            'R_5_1': 1.0940840619688397, 'A_5_1_0': 110.56790845138725, 'D_5_1_0_4': 239.99905123159166,
            'R_6_1': 1.0940817193677925, 'A_6_1_0': 110.56754686774481, 'D_6_1_0_5': 240.00122783407815,
            'R_7_0': 1.3128870801982788, 'A_7_0_1': 110.56890700195424, 'D_7_0_1_6': 300.00028241580566, 'RX_8_7': 1.0,
            'AX_8_7_0': 90.0, 'DX_8_7_0_1': 0, 'R_9_2': 1.1689469645782498, 'A_9_7_8': 240, 'D_9_7_8_0': 0,
            'R_10_9': 1.4559254886404387, 'A_10_9_0': 96.30065819269021, 'D_10_9_7_0': 120,
            'R_11_10': 1.4265728986680748, 'A_11_10_9': 105.58023544826183, 'D_11_10_9_8': 242.3527063196313,
            'R_12_11': 1.5147479951212197, 'A_12_11_10': 108.63387152978416, 'D_12_11_10_9': 179.9922243050821,
            'R_13_12': 1.0950205915944824, 'A_13_12_11': 110.62463321031589, 'D_13_12_11_10': 59.1268942923763,
            'R_14_12': 1.093567969297245, 'A_14_12_11': 110.91425998596507, 'D_14_12_11_13': 120.87266977773987,
            'R_15_12': 1.0950091062890002, 'A_15_12_11': 110.62270362433773, 'D_15_12_11_14': 120.87301274044218,
            'R_16_11': 1.0951433842986755, 'A_16_11_12': 110.20822115119915, 'D_16_11_12_15': 181.16392677464265,
            'R_17_11': 1.0951410439636102, 'A_17_11_12': 110.20143800025897, 'D_17_11_12_16': 239.4199964284852}
        expected_new_map = {0: 0, 1: 1, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 2, 8: 'X8', 9: 12,
                            10: 11, 11: 10, 12: 9, 13: 13, 14: 14, 15: 15, 16: 16, 17: 17}
        self.assertTrue(_compare_zmats({'symbols': new_symbols, 'coords': new_coords, 'vars': new_vars, 'map': new_map},
                                       {'symbols': expected_new_symbols, 'coords': expected_new_coords,
                                        'vars': expected_new_vars, 'map': expected_new_map},
                                       r_tol=0.01, a_tol=0.01, d_tol=0.01))

    def test_find_distant_neighbor(self):
        """Test the find_distant_neighbor() function."""
        xyz_1 = {'symbols': ('S', 'O', 'O', 'N', 'C', 'H', 'H', 'H', 'H', 'H'),
                 'isotopes': (32, 16, 16, 14, 12, 1, 1, 1, 1, 1),
                 'coords': ((-0.06618943, -0.12360663, -0.07631983),
                            (-0.79539707, 0.86755487, 1.02675668),
                            (-0.68919931, 0.25421823, -1.34830853),
                            (0.01546439, -1.54297548, 0.44580391),
                            (1.59721519, 0.47861334, 0.00711),
                            (1.94428095, 0.40772394, 1.03719428),
                            (2.20318015, -0.14715186, -0.64755729),
                            (1.59252246, 1.5117895, -0.33908352),
                            (-0.8785689, -2.02453514, 0.38494433),
                            (-1.34135876, 1.49608206, 0.53295071))}
        mol_1 = ARCSpecies(label='CS(=O)(O)[NH]', xyz=xyz_1).mol
        self.assertEqual(find_distant_neighbor(mol=mol_1, start=8), 0)
        self.assertEqual(find_distant_neighbor(mol=mol_1, start=9), 0)
        self.assertEqual(find_distant_neighbor(mol=mol_1, start=5), 0)
        self.assertIn(find_distant_neighbor(mol=mol_1, start=2), [1, 3, 4])
        self.assertIn(find_distant_neighbor(mol=mol_1, start=4), [1, 2, 3])
        self.assertIn(find_distant_neighbor(mol=mol_1, start=3), [1, 2, 4])
        self.assertIn(find_distant_neighbor(mol=mol_1, start=0), [5, 6, 7, 8, 9])

        xyz_2 = {'symbols': ('S', 'H', 'O', 'N', 'C', 'H', 'H', 'H', 'H'),
                 'isotopes': (32, 1, 16, 14, 12, 1, 1, 1, 1),
                 'coords': ((-0.06618943, -0.12360663, -0.07631983),
                            (-0.79539707, 0.86755487, 1.02675668),
                            (-0.68919931, 0.25421823, -1.34830853),
                            (0.01546439, -1.54297548, 0.44580391),
                            (1.59721519, 0.47861334, 0.00711),
                            (1.94428095, 0.40772394, 1.03719428),
                            (2.20318015, -0.14715186, -0.64755729),
                            (1.59252246, 1.5117895, -0.33908352),
                            (-0.8785689, -2.02453514, 0.38494433))}
        mol_2 = ARCSpecies(label='C[SH](=O)[NH]', xyz=xyz_2).mol
        self.assertEqual(find_distant_neighbor(mol=mol_2, start=8), 0)
        self.assertEqual(find_distant_neighbor(mol=mol_2, start=5), 0)
        self.assertIn(find_distant_neighbor(mol=mol_2, start=2), [3, 4])
        self.assertIn(find_distant_neighbor(mol=mol_2, start=4), [2, 3])
        self.assertIn(find_distant_neighbor(mol=mol_2, start=3), [2, 4])
        self.assertIn(find_distant_neighbor(mol=mol_2, start=0), [5, 6, 7, 8])

        xyz_3 = """C                 -2.27234259   -0.78101274   -0.00989219
                   H                 -1.94047502   -1.78971513   -0.14135849
                   H                 -1.87026865   -0.16873290   -0.78986011
                   H                 -3.34123881   -0.74952096   -0.04689398
                   C                 -1.79025824   -0.25578524    1.35514655
                   H                 -2.12212581    0.75291715    1.48661285
                   H                 -2.19233218   -0.86806508    2.13511447
                   N                 -0.32177464   -0.29904964    1.40598078
                   H                  0.05399540    0.27317450    0.67703880
                   H                 -0.00873286    0.04200717    2.29236958"""
        mol_3 = ARCSpecies(label='EA', smiles='NCC', xyz=xyz_3).mol
        self.assertEqual(find_distant_neighbor(mol=mol_3, start=9), 4)
        self.assertEqual(find_distant_neighbor(mol=mol_3, start=8), 4)
        self.assertIn(find_distant_neighbor(mol=mol_3, start=5), [0, 7])
        self.assertIn(find_distant_neighbor(mol=mol_3, start=6), [0, 7])
        self.assertEqual(find_distant_neighbor(mol=mol_3, start=1), 4)
        self.assertEqual(find_distant_neighbor(mol=mol_3, start=2), 4)
        self.assertEqual(find_distant_neighbor(mol=mol_3, start=2), 4)

    def test_are_h_abs_wells_reversed(self):
        """
        Test the are_h_abs_wells_reversed() function.
        The expected order is: R(*1)-H(*2) + R(*3)j <=> R(*1)j + R(*3)-H(*2)
        """
        rxn_1 = ARCReaction(r_species=[ARCSpecies(label='C2H6', smiles='CC'), ARCSpecies(label='OH', smiles='[OH]')],  # none are reversed
                            p_species=[ARCSpecies(label='C2H5', smiles='[CH2]C'), ARCSpecies(label='H2O', smiles='O')])
        rxn_2 = ARCReaction(r_species=[ARCSpecies(label='OH', smiles='[OH]'), ARCSpecies(label='C2H6', smiles='CC')],  # r reversed
                            p_species=[ARCSpecies(label='C2H5', smiles='[CH2]C'), ARCSpecies(label='H2O', smiles='O')])
        rxn_3 = ARCReaction(r_species=[ARCSpecies(label='C2H6', smiles='CC'), ARCSpecies(label='OH', smiles='[OH]')],  # p reversed
                            p_species=[ARCSpecies(label='H2O', smiles='O'), ARCSpecies(label='C2H5', smiles='[CH2]C')])
        rxn_4 = ARCReaction(r_species=[ARCSpecies(label='OH', smiles='[OH]'), ARCSpecies(label='C2H6', smiles='CC')],  # r and p reversed
                            p_species=[ARCSpecies(label='H2O', smiles='O'), ARCSpecies(label='C2H5', smiles='[CH2]C')])

        product_dicts = get_reaction_family_products(rxn=rxn_1,
                                                     rmg_family_set=[rxn_1.family],
                                                     consider_rmg_families=True,
                                                     consider_arc_families=False,
                                                     discover_own_reverse_rxns_in_reverse=False,
                                                     )
        r_reversed, p_reversed = are_h_abs_wells_reversed(rxn_1, product_dict=product_dicts[0])
        self.assertFalse(r_reversed)
        self.assertFalse(p_reversed)

        product_dicts = get_reaction_family_products(rxn=rxn_2,
                                                     rmg_family_set=[rxn_2.family],
                                                     consider_rmg_families=True,
                                                     consider_arc_families=False,
                                                     discover_own_reverse_rxns_in_reverse=False,
                                                     )
        r_reversed, p_reversed = are_h_abs_wells_reversed(rxn_2, product_dict=product_dicts[0])
        self.assertTrue(r_reversed)
        self.assertFalse(p_reversed)

        product_dicts = get_reaction_family_products(rxn=rxn_3,
                                                     rmg_family_set=[rxn_3.family],
                                                     consider_rmg_families=True,
                                                     consider_arc_families=False,
                                                     discover_own_reverse_rxns_in_reverse=False,
                                                     )
        r_reversed, p_reversed = are_h_abs_wells_reversed(rxn_3, product_dict=product_dicts[0])
        self.assertFalse(r_reversed)
        self.assertTrue(p_reversed)

        product_dicts = get_reaction_family_products(rxn=rxn_4,
                                                     rmg_family_set=[rxn_4.family],
                                                     consider_rmg_families=True,
                                                     consider_arc_families=False,
                                                     discover_own_reverse_rxns_in_reverse=False,
                                                     )
        r_reversed, p_reversed = are_h_abs_wells_reversed(rxn_4, product_dict=product_dicts[0])
        self.assertTrue(r_reversed)
        self.assertTrue(p_reversed)

        rxn_5 = ARCReaction(r_species=[ARCSpecies(label='H', smiles='[H]'), ARCSpecies(label='H2O', smiles='O')],  # r and p reversed
                            p_species=[ARCSpecies(label='H2', smiles='[H][H]'), ARCSpecies(label='OH', smiles='[OH]')])
        product_dicts = get_reaction_family_products(rxn=rxn_5,
                                                     rmg_family_set=[rxn_5.family],
                                                     consider_rmg_families=True,
                                                     consider_arc_families=False,
                                                     discover_own_reverse_rxns_in_reverse=False,
                                                     )
        r_reversed, p_reversed = are_h_abs_wells_reversed(rxn_5, product_dict=product_dicts[0])
        self.assertTrue(r_reversed)
        self.assertTrue(p_reversed)

        rxn_6 = ARCReaction(r_species=[ARCSpecies(label='CCCC(O)=O', smiles='CCCC(O)=O'), ARCSpecies(label='OH', smiles='[OH]')],  # none are reversed
                            p_species=[ARCSpecies(label='CCCC([O])=O', smiles='CCCC([O])=O'), ARCSpecies(label='H2O', smiles='O')])
        product_dicts = get_reaction_family_products(rxn=rxn_6,
                                                     rmg_family_set=[rxn_6.family],
                                                     consider_rmg_families=True,
                                                     consider_arc_families=False,
                                                     discover_own_reverse_rxns_in_reverse=False,
                                                     )
        r_reversed, p_reversed = are_h_abs_wells_reversed(rxn_6, product_dict=product_dicts[0])
        self.assertFalse(r_reversed)
        self.assertFalse(p_reversed)



    @classmethod
    def tearDownClass(cls):
        """
        A function that is run ONCE after all unit tests in this class.
        Delete all project directories created during these unit tests.
        """
        shutil.rmtree(os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics'), ignore_errors=True)
        shutil.rmtree(os.path.join(ARC_PATH, 'arc', 'testing', 'heuristics_1'), ignore_errors=True)

    def test_is_water(self):
        """Test the is_water() function."""
        water = self.water
        self.assertTrue(is_water(water))
        methane = 'C'
        methane_species = ARCSpecies(label='methane', smiles=methane)
        self.assertFalse(is_water(methane_species))
        ethanol = self.ethanol
        self.assertFalse(is_water(ethanol))

    def test_process_hydrolysis_reaction(self):
        """Test the process_hydrolysis_reaction() function."""
        acetamide = self.acetamide
        water = self.water
        acetic_acid = self.acetic_acid
        ammonia = self.ammonia
        rxn = ARCReaction(r_species=[acetamide, water], p_species=[acetic_acid, ammonia])
        main_reactant, water_mol = process_hydrolysis_reaction(rxn)
        self.assertEqual(main_reactant.label, acetamide.label)

        benzoyl = self.benzoyl
        ethylamine = self.ethylamine
        benzamide = self.benzamide
        ethanol = self.ethanol
        rxn_no_water = ARCReaction(r_species=[benzoyl, ethylamine], p_species=[benzamide, ethanol])
        with self.assertRaises(ValueError) as cm:
            process_hydrolysis_reaction(rxn_no_water)
        self.assertEqual(str(cm.exception), "Reactants must include a non-water molecule and water.")

        rxn_only_water = ARCReaction(r_species=[water, water], p_species=[water, water])
        with self.assertRaises(ValueError) as cm:
            process_hydrolysis_reaction(rxn_only_water)
        self.assertEqual(str(cm.exception), "Reactants must include a non-water molecule and water.")

    def test_get_neighbors_by_electronegativity(self):
        """Test the get_neighbors_by_electronegativity() function."""
        spc = ARCSpecies(label='H', smiles='[H]')
        with self.assertRaises(ValueError) as cm:
            get_neighbors_by_electronegativity(spc, 0, 0, False)
        self.assertEqual(str(cm.exception), "Atom at index 0 has no valid neighbors.")

        spc = ARCSpecies(label='carbonyl', smiles='C=O')
        atom_index = next(i for i, atom in enumerate(spc.mol.atoms) if atom.is_carbon())
        exclude = next(i for i, atom in enumerate(spc.mol.atoms) if atom.is_oxygen())
        neighbor1 = next(i for i, atom in enumerate(spc.mol.atoms) if atom.is_hydrogen())
        neighbor2 = next(i for i, atom in enumerate(spc.mol.atoms) if atom.is_hydrogen() and i != neighbor1)
        self.assertEqual(get_neighbors_by_electronegativity(spc, atom_index, exclude), (neighbor1, [neighbor2]))

        spc = ARCSpecies(label='NH2C(=O)H', smiles='NC(=O)')
        atom_index = next(i for i, atom in enumerate(spc.mol.atoms) if atom.is_carbon())
        neighbors = [neighbor for neighbor in spc.mol.atoms[atom_index].edges.keys()]
        exclude = next(i for i, atom in enumerate(spc.mol.atoms) if atom.is_hydrogen() and atom in neighbors)
        highest = next(i for i, atom in enumerate(spc.mol.atoms) if atom.is_oxygen())
        second_highest = next(i for i, atom in enumerate(spc.mol.atoms) if atom.is_nitrogen())
        self.assertEqual(get_neighbors_by_electronegativity(spc, atom_index, exclude), (highest, [second_highest]))

        spc = ARCSpecies(label='ClOCH2OH', smiles='ClOCO')
        atom_index = next(i for i, atom in enumerate(spc.mol.atoms) if atom.is_carbon())
        neighbors = [neighbor for neighbor in spc.mol.atoms[atom_index].edges.keys()]
        exclude = next(i for i, atom in enumerate(spc.mol.atoms) if atom.is_hydrogen() and atom in neighbors)
        first_oxygen = next(i for i, atom in enumerate(spc.mol.atoms) if atom.is_oxygen())
        second_oxygen = next(i for i, atom in enumerate(spc.mol.atoms) if atom.is_oxygen() and i != first_oxygen)
        second_hydrogen=next(i for i, atom in enumerate(spc.mol.atoms) if atom.is_hydrogen() and i != exclude)
        self.assertEqual(get_neighbors_by_electronegativity(spc, atom_index, exclude), (first_oxygen, [second_oxygen, second_hydrogen]))


    def test_get_matching_dihedrals(self):
        """
        Test get_matching_dihedrals.
        """
        zmat = {'vars': {'D_1_2_3_4': 60,
                         'D_1_2_5_6': 120,
                         'D_2_3_4_5': 180,
                         'DX_1_2_4_7': 90,
                         'DX_3_4_5_6': -60,
                         'D_2_3_5_6': 150}}
        matches_with_d = get_matching_dihedrals(zmat, a=1, b=2, f=3, d=4)
        expected_matches_with_d = [[1, 2, 3, 4], [1, 2, 4, 7]]
        self.assertEqual(matches_with_d, expected_matches_with_d,
                         "get_matching_dihedrals with 'd' provided failed.")
        matches_without_d = get_matching_dihedrals(zmat, a=1, b=2, f=3, d=None)
        expected_matches_without_d = [[1, 2, 3, 4]]
        self.assertEqual(matches_without_d, expected_matches_without_d,
                         "get_matching_dihedrals without 'd' provided failed.")

    def test_find_matching_dihedral(self):
        """
        Test find_matching_dihedral.
        """
        zmat = {'vars': {'D_1_2_3_4': 60,
                         'D_1_2_5_6': 120,
                         'D_2_3_4_5': 180,
                         'DX_1_2_4_7': 90,
                         'DX_3_4_5_6': -60,
                         'D_2_3_5_6': 150}}
        limited_matches = find_matching_dihedral(zmat, a=1, b=2, f=3, d=4, counter=1)
        expected_limited_matches = [[1, 2, 3, 4]]
        self.assertEqual(limited_matches, expected_limited_matches,
                         "find_matching_dihedral with counter limit failed.")
        no_matches = find_matching_dihedral(zmat, a=9, b=10, f=11, d=12, counter=2)
        self.assertIsNone(no_matches, "find_matching_dihedral should return None for no matches.")
        count_with_d = count_all_possible_dihedrals(zmat, a=2, b=3, f=5, d=4)
        expected_count_with_d = 3
        self.assertEqual(count_with_d, expected_count_with_d,
                         "count_all_possible_dihedrals with 'd' provided failed.")

    def test_count_all_possible_dihedrals(self):
        """
        Test count_all_possible_dihedrals.
        """
        zmat = {'vars': {'D_1_2_3_4': 60,
                         'D_1_2_5_6': 120,
                         'D_2_3_4_5': 180,
                         'DX_1_2_4_7': 90,
                         'DX_3_4_5_6': -60,
                         'D_2_3_5_6': 150}}
        count_without_d = count_all_possible_dihedrals(zmat, a=2, b=3, f=5, d=None)
        expected_count_without_d = 2
        self.assertEqual(count_without_d, expected_count_without_d,
                         "count_all_possible_dihedrals without 'd' provided failed.")
        count_no_matches = count_all_possible_dihedrals(zmat, a=8, b=9, f=10, d=None)
        expected_count_no_matches = 0
        self.assertEqual(count_no_matches, expected_count_no_matches,
                         "count_all_possible_dihedrals should return 0 for no matches.")

    def test_ester_hydrolysis(self):
        """Test ester hydrolysis reactions."""
        water = self.water
        #RXN1
        ethyl_ethanoate = self.ethyl_ethanoate
        acetic_acid = self.acetic_acid
        ethanol = self.ethanol
        rxn1 = ARCReaction(r_species=[ethyl_ethanoate, water], p_species=[acetic_acid, ethanol])
        #RXN2
        methylformate = self.methylformate
        formicacid = self.formicacid
        methanol=self.methanol
        rxn2 = ARCReaction(r_species=[methylformate, water], p_species=[formicacid, methanol])
        #RXN3
        ethylbenzoate=self.ethylbenzoate
        phenol=self.phenol
        rxn3=ARCReaction(r_species=[ethylbenzoate, water], p_species=[acetic_acid, phenol])
        #RXN4
        carbonyl_chloride = self.carbonyl_chloride
        hydrochloric_acid = self.hydrochloric_acid
        rxn4 = ARCReaction(r_species=[carbonyl_chloride, water], p_species=[formicacid, hydrochloric_acid])
        #RXN5
        acetamide = self.acetamide
        ammonia=self.ammonia
        rxn5=ARCReaction(r_species=[acetamide, water], p_species=[acetic_acid, ammonia])
        #RXN6
        benzamide = self.benzamide
        benzoyl=self.benzoyl
        rxn6=ARCReaction(r_species=[benzamide, water], p_species=[benzoyl, ammonia])
        #RXN7
        chloroacetylchloride = self.chloroacetylchloride
        chlorocetyl= self.chlorocetyl
        rxn7=ARCReaction(r_species=[chloroacetylchloride, water], p_species=[chlorocetyl, hydrochloric_acid])
        #RXN8
        methylbenzoate = self.methylbenzoate
        benzoic_acid = self.benzoic_acid
        rxn8=ARCReaction(r_species=[methylbenzoate, water], p_species=[benzoic_acid, methanol])
        #RXN9
        benzamide2=self.benzamide2
        aminobenzene=self.aminobenzene
        carboxyl= self.carboxyl
        rxn9=ARCReaction(r_species=[benzamide2, water], p_species=[aminobenzene, carboxyl])

        tested_rxn=rxn1
        reactant = tested_rxn.r_species[0]
        initial_xyz = reactant.get_xyz()
        product_dicts = get_reaction_family_products(
            rxn=tested_rxn,
            rmg_family_set='default',
            consider_rmg_families=False,
            consider_arc_families=True,
        )
        families = [entry['family'] for entry in product_dicts]
        self.assertIn('ester_hydrolysis', families)
        xyz_guesses_total, zmats_total = hydrolysis(tested_rxn)

        for i in xyz_guesses_total:
            family=i['family']
            print(family)
            a,b,f,d,O,H1= i['indices'][0], i['indices'][1], i['indices'][2], i['indices'][3], i['indices'][4], i['indices'][5]
            for j in i['xyz_guesses']:
                xyz_str = xyz_to_str(j)
                print(xyz_str)
                print()
                if family== 'ester_hydrolysis':#the parameters of ether hydrolysis are checked in the following test section
                    distance_ab=(calculate_param(coords=initial_xyz['coords'], atoms=[b, a]))*1.3
                    self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[b, a]), distance_ab, places=0)
                    self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[a, O]), 1.8, places=0)
                    self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[O, H1]), 1.21, places=0)
                    self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[O, H1+1]), 0.97, places=2)
                    self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[b, a, O]), 77, places=0)
                    self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[a, O, H1]), 71, places=0)
                    self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[H1, O, H1+1]), 111, places=0)
                    self.assertAlmostEqual(abs((calculate_param(coords=j['coords'], atoms=[f, d, a, O]) + 180) % 360 - 180), 140, places=0)
                    self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[b, a, O, H1]), 1.64, places=1)
                    self.assertAlmostEqual(abs((calculate_param(coords=j['coords'], atoms=[a, H1, O, H1+1]) + 180) % 360 - 180), 103, places=0)

    def test_ether_hydrolysis(self):
        """Test ether hydrolysis reactions."""
        water = self.water
        #RXN1
        ethyl_methylether = self.ethyl_methylether
        ethanol=self.ethanol
        methanol=self.methanol
        rxn1 = ARCReaction(r_species=[ethyl_methylether, water], p_species=[ethanol, methanol])
        #RXN2
        dimethylether = self.dimethoxymethane
        dimethoxyethane=self.dimethoxyethane
        rxn2= ARCReaction(r_species=[dimethylether, water], p_species=[methanol, dimethoxyethane])
        #RXN3
        anisole=self.anisole
        phenol=self.phenol
        rxn3=ARCReaction(r_species=[anisole, water], p_species=[phenol, methanol])
        #RXN4
        allylmethylether=self.allylmethylether
        allylalcohol=self.allylalcohol
        rxn4=ARCReaction(r_species=[allylmethylether, water], p_species=[allylalcohol, methanol])

        tested_rxn = rxn4
        reactant = tested_rxn.r_species[0]
        initial_xyz = reactant.get_xyz()
        product_dicts = get_reaction_family_products(
            rxn=tested_rxn,
            rmg_family_set='default',
            consider_rmg_families=False,
            consider_arc_families=True,
        )
        families = [entry['family'] for entry in product_dicts]
        self.assertIn('ether_hydrolysis', families)
        xyz_guesses_total, zmats_total = hydrolysis(tested_rxn)
        for i in xyz_guesses_total:
            print(i['family'])
            a, b, f, d, O, H1 = i['indices'][0], i['indices'][1], i['indices'][2], i['indices'][3], i['indices'][4], i['indices'][5]
            print(a, b, f, d, O, H1)
            for j in i['xyz_guesses']:
                xyz_str = xyz_to_str(j)
                print(xyz_str)
                print()
                distance_ab = (calculate_param(coords=initial_xyz['coords'], atoms=[b, a])) * 1.5
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[b, a]), distance_ab, places=0)
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[a, O]), 2.1, places=0)
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[O, H1]), 1.21, places=0)
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[O, H1 + 1]), 0.97, places=0)
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[b, a, O]), 65, places=0)
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[a, O, H1]), 72, places=0)
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[H1, O, H1 + 1]), 106, places=0)
                self.assertAlmostEqual(abs((calculate_param(coords=j['coords'], atoms=[f, d, a, O]) + 180) % 360 - 180),
                                       98.25, places=0)
                self.assertAlmostEqual((calculate_param(coords=j['coords'], atoms=[b, a, O, H1]) + 180) % 360 - 180, -0.72, places=1)
                self.assertAlmostEqual(
                    abs((calculate_param(coords=j['coords'], atoms=[a, H1, O, H1 + 1]) + 180) % 360 - 180), 103, places=0)

    def test_imine_hydrolysis(self):
        """Test imine hydrolysis reactions."""
        water = self.water
        #RXN1
        ethanimine = self.ethanimine
        aminoethanol = self.aminoethanol
        rxn1 = ARCReaction(r_species=[ethanimine, water], p_species=[aminoethanol])
        #RXN2
        cyclohexanone_imine=self.cyclohexanone_imine
        hydroxycyclohexyl_amine=self.hydroxycyclohexyl_amine
        rxn2=ARCReaction(r_species=[cyclohexanone_imine, water], p_species=[hydroxycyclohexyl_amine])
        #RXN3
        benzaldimine=self.benzaldimine
        aminophenylethanol=self.aminophenylethanol
        rxn3=ARCReaction(r_species=[benzaldimine, water], p_species=[aminophenylethanol])
        #RXN4
        phenylethanimine=self.phenylethanimine
        phenylalaninol=self.phenylalaninol
        rxn4=ARCReaction(r_species=[phenylethanimine, water], p_species=[phenylalaninol])

        tested_rxn = rxn4
        reactant = tested_rxn.r_species[0]
        initial_xyz = reactant.get_xyz()
        product_dicts = get_reaction_family_products(
            rxn=tested_rxn,
            rmg_family_set='default',
            consider_rmg_families=False,
            consider_arc_families=True,
        )
        families = [entry['family'] for entry in product_dicts]
        self.assertIn('imine_hydrolysis', families)
        xyz_guesses_total, zmats_total = hydrolysis(reaction=tested_rxn)
        for i in xyz_guesses_total:
            print(i['family'])
            a, b, f, d, O, H1 = i['indices'][0], i['indices'][1], i['indices'][2], i['indices'][3], i['indices'][4], i['indices'][5]
            print(a, b, f, d, O, H1)
            for j in i['xyz_guesses']:
                xyz_str = xyz_to_str(j)
                print(xyz_str)
                print()
                distance_ab = (calculate_param(coords=initial_xyz['coords'], atoms=[b, a])) * 1.3
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[b, a]), distance_ab, places=0)
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[a, O]), 1.8, places=0)
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[O, H1]), 1.21, places=0)
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[O, H1 + 1]), 0.97, places=0)
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[b, a, O]), 78, places=0)
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[a, O, H1]), 70, places=0)
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[H1, O, H1 + 1]), 111, places=0)
                self.assertAlmostEqual(abs((calculate_param(coords=j['coords'], atoms=[f, d, a, O]) + 180) % 360 - 180),
                                       108, places=0)
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[b, a, O, H1]),12, places=0)
                self.assertAlmostEqual(
                    abs((calculate_param(coords=j['coords'], atoms=[a, H1, O, H1 + 1]) + 180) % 360 - 180), 113,
                    places=0)

    def test_nitrile_hydrolysis(self):
        """Test nitrile hydrolysis reactions."""
        water = self.water
        #RXN1
        propionitrile = self.propionitrile
        imidic_acid = self.imidic_acid
        rxn1 = ARCReaction(r_species=[propionitrile, water], p_species=[imidic_acid])
        #RXN2
        benzonitrile=self.benzonitrile
        benzaldehyde_oxime=self.benzaldehyde_oxime
        rxn2=ARCReaction(r_species=[benzonitrile, water], p_species=[benzaldehyde_oxime])
        #RXN3
        isovaleronitrile=self.isovaleronitrile
        isovaleraldehyde_oxime=self.isovaleraldehyde_oxime
        rxn3=ARCReaction(r_species=[isovaleronitrile, water], p_species=[isovaleraldehyde_oxime])
        #RXN4
        malononitrile=self.malononitrile
        iminopropanoic_acid=self.iminopropanoic_acid
        rxn4=ARCReaction(r_species=[malononitrile, water], p_species=[iminopropanoic_acid])

        tested_rxn = rxn4
        reactant = tested_rxn.r_species[0]
        initial_xyz = reactant.get_xyz()
        product_dicts = get_reaction_family_products(
            rxn=tested_rxn,
            rmg_family_set='default',
            consider_rmg_families=False,
            consider_arc_families=True,
        )
        families = [entry['family'] for entry in product_dicts]
        self.assertIn('nitrile_hydrolysis', families)
        xyz_guesses_total, zmats_total = hydrolysis(tested_rxn)
        for i in xyz_guesses_total:
            a, b, f, O, H1 = i['indices'][0], i['indices'][1], i['indices'][2], i['indices'][4], i['indices'][5]
            print(i['family'])
            for j in i['xyz_guesses']:
                xyz_str = xyz_to_str(j)
                print(xyz_str)
                print()
                distance_ab = (calculate_param(coords=initial_xyz['coords'], atoms=[b, a])) * 1.1
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[b, a]), distance_ab, places=2)
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[a, O]), 1.8, places=2)
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[O, H1]), 1.21, places=2)
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[O, H1 + 1]), 0.97, places=2)
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[b, a, O]), 97, places=1)
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[a, O, H1]), 58, places=1)
                self.assertAlmostEqual(calculate_param(coords=j['coords'], atoms=[H1, O, H1 + 1]), 111, places=1)
                self.assertAlmostEqual(abs((calculate_param(coords=j['coords'], atoms=[f, b, a, O]) + 180) % 360 - 180),
                                       174, places=1)
                self.assertAlmostEqual((calculate_param(coords=j['coords'], atoms=[b, a, O, H1]) + 180) % 360 - 180, -0.0154, places=1)
                self.assertAlmostEqual(
                    abs((calculate_param(coords=j['coords'], atoms=[a, H1, O, H1 + 1]) + 180) % 360 - 180), 104,
                    places=1)

if __name__ == '__main__':
    unittest.main(testRunner=unittest.TextTestRunner(verbosity=2))
